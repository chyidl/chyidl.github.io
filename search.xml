<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker Tips &amp; Tricks</title>
    <url>/2021/09/01/docker/</url>
    <content><![CDATA[<h2 id="Docker-Info"><a href="#Docker-Info" class="headerlink" title="Docker  Info"></a>Docker  Info</h2><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个“边界”</span><br><span class="line"></span><br><span class="line">Cgroups技术是用来制造约束的主要手段</span><br><span class="line"><span class="keyword">Namespace</span>技术则是用来修改进程试图的主要方法</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="Docker-architecture"><a href="#Docker-architecture" class="headerlink" title="Docker architecture"></a>Docker architecture</h2><blockquote>
<p>Docker uses a client-server architecture.</p>
</blockquote>
<p><img src="/misc/images/architecture.svg" alt="docker architecture"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker 仓库操作</span></span><br><span class="line">  docker pull/push</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 镜像管理</span></span><br><span class="line">  docker images/rmi/build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 生命周期管理</span></span><br><span class="line">  docker run/<span class="built_in">start</span>/stop/<span class="built_in">rm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to delete all containers including its volumes use,</span></span><br><span class="line"><span class="variable">$</span> docker <span class="built_in">rm</span> <span class="literal">-vf</span> <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-a</span> <span class="literal">-q</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># to delete all the images</span></span><br><span class="line"><span class="variable">$</span> docker rmi <span class="operator">-f</span> <span class="variable">$</span>(docker images <span class="literal">-a</span> <span class="literal">-q</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Docker-Tips"><a href="#Docker-Tips" class="headerlink" title="Docker Tips"></a>Docker Tips</h2><ul>
<li><p><strong>Docker Tip #1</strong>: Docker 容器进程</p>
<blockquote>
<p>A Docker container is just a process/service that runs directly on your machine. It is slightly different than a regular process because the Docker daemon along with the linux kernel do a few things(<strong>Cgroups</strong>、<strong>Namespace</strong>) to ensure it runs in total isolation<br>Docker容器是一种特殊的进程,和虚拟机差别很大</p>
</blockquote>
</li>
<li><p><strong>Docker Tip #2</strong>: COPY vs. ADD in a Dockerfile</p>
<blockquote>
<p>COPY 和 ADD 功能很相似，都可以从指定目录拷贝数据到Docker镜像中.</p>
</blockquote>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">COPY</span> 和 <span class="keyword">ADD</span> 区别</span><br><span class="line"><span class="number">1</span>. <span class="keyword">COPY</span>: 只能从本机文件或目录中拷贝到镜像中</span><br><span class="line"><span class="number">2</span>. <span class="keyword">ADD</span>: 不仅可以从本机文件或目录中拷贝，还可以使用URL引入外部的文件地址拷贝到镜像中</span><br><span class="line">  $ <span class="keyword">ADD</span> rootfs.tar.gz /</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #3</strong>: 追加 Docker Run 指令减少镜像大小</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Before Dockerfile -- 新增三个层lager</span></span><br><span class="line">RUN wget -O myfile.tar.gz http:<span class="regexp">//</span>example.com/myfile.tar.gz</span><br><span class="line">RUN tar -xvf myfile.tar.gz -C <span class="regexp">/usr/</span>src/myapp</span><br><span class="line">RUN rm myfile.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># After Dockerfile -- 新增一个层layer</span></span><br><span class="line">RUN wget -O myfile.tar.gz http:<span class="regexp">//</span>example.com/myfile.tar.gz \</span><br><span class="line">  &amp;&amp; tar -xvf myfile.tar.gz -C <span class="regexp">/usr/</span>src/myapp \</span><br><span class="line">  &amp;&amp; rm myfile.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #4</strong>: Docker Base镜像OS和Host OS没有关系</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">Docker <span class="built_in">Image</span> OS: 定义在Dockerfile文件的Base镜像的系统</span><br><span class="line">Host OS: 运行Docker <span class="built_in">image</span>的环境</span><br><span class="line">You can use whatever base <span class="built_in">image</span> you want <span class="keyword">for</span> your Docker images.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #5</strong>: 使用相同Base镜像的好处</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">You could use a different base OS <span class="keyword">for</span> <span class="keyword">each</span> Docker image, but <span class="keyword">then</span> you lose <span class="keyword">out</span> <span class="keyword">on</span> the ability <span class="keyword">to</span> <span class="keyword">cache</span> it across all of your images</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #6</strong>: RUN vs. CMD in a Dockerfile</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">RUN:</span> 在镜像内执行命令，这些指令仅仅在构建build镜像中执行一次，并且将构建结果写入新larger层中.</span><br><span class="line"><span class="symbol">CMD:</span> 在启动容器时定义默认的运行的指令, 这种动作发生运行时run-time, 覆盖方式</span><br><span class="line"><span class="symbol">ENTRYPOINT:</span> 执行命令参数追加方式</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #7</strong>: Base Docker Image Alpine</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Why Alpine?</span><br><span class="line">&gt; Small. Simple. Secure. Alpine Linux is a security-<span class="keyword">oriented, </span>lightweight Linux <span class="keyword">distribution </span><span class="keyword">based </span>on musl libc <span class="keyword">and </span><span class="keyword">busybox.</span></span><br><span class="line"><span class="keyword"></span>&gt; Alpine is about <span class="number">30</span>x smaller than Debian.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #8</strong>: Project Structure with Multiple Dockerfiles and Docker Compose</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">ubuntu in ~/chyi/micro-services at <span class="number">3</span>BPlus <span class="keyword">on</span> 🐳 v20.<span class="number">10.8</span></span><br><span class="line">➜ tree -L <span class="number">2</span></span><br><span class="line">.</span><br><span class="line">├── auth</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── billing</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── contact</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── user</span><br><span class="line">    └── Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> directories, <span class="number">5</span> <span class="keyword">files</span></span><br><span class="line"></span><br><span class="line">The docker-compose.yaml</span><br><span class="line">ubuntu in ~/chyi/micro-services at <span class="number">3</span>BPlus <span class="keyword">on</span> 🐳 v20.<span class="number">10.8</span></span><br><span class="line">➜ <span class="keyword">cat</span> docker-compose.yml</span><br><span class="line"><span class="keyword">version</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line">service<span class="variable">s:</span></span><br><span class="line">    auth:</span><br><span class="line">        build: <span class="string">&#x27;./auth&#x27;</span></span><br><span class="line">    billin<span class="variable">g:</span></span><br><span class="line">        build: <span class="string">&#x27;./billing&#x27;</span></span><br><span class="line">    contac<span class="variable">t:</span></span><br><span class="line">        build: <span class="string">&#x27;./contact&#x27;</span></span><br><span class="line">    user:</span><br><span class="line">        build: <span class="string">&#x27;./user&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #9</strong>: 使用Volumes</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yaml</span></span><br><span class="line"><span class="attr">services</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">app</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    # Mount the crrent directoy into `/app` inside the running container.</span></span><br><span class="line">    <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">&#x27;.:/app&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #10</strong>: Published Ports</p>
<blockquote>
<p>Creates a firwaall rule which maps a container port to a port on the Docker host to the outside world.</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Flag value</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-p 8080:80</td>
<td align="left">Map TCP port 80 in the container to port 8080 on the Docker host.</td>
</tr>
<tr>
<td align="left">-p 192.168.1.100:8080:80</td>
<td align="left">Map TCP port 80 in the container to port 8080 on the Docker host for connections to host IP 192.168.1.100.</td>
</tr>
<tr>
<td align="left">-p 8080:80/udp</td>
<td align="left">Map UDP port 80 in the container to port 8080 on the Docker host.</td>
</tr>
<tr>
<td align="left">-p 8080:80/tcp -p 8080:80/udp</td>
<td align="left">Map TCP port 80 in the container to TCP port 8080 on the Docker host, and map UDP port 80 in the container to UDP port 8080 on the Docker host.</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>Docker Tip #11</strong>: dockerignore file</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">.dockerignore</span>: ignore certain files and folders from your Docker images</span><br><span class="line">  <span class="string">.git</span></span><br><span class="line">  <span class="string">.dockerignore</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #12</strong>: Manage Docker without sudo on Linux</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add a docker group and then add your user to it:</span></span><br><span class="line"><span class="variable">$ </span>sudo groupadd docker</span><br><span class="line"><span class="variable">$ </span>docker usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #13</strong>: Measure Docker Container’s Resources</p>
<blockquote>
<p>How much resources containers are using</p>
</blockquote>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker stats</span><br><span class="line">CONTAINER ID   NAME                                                                                         <span class="meta">CPU</span> %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O         PIDS</span><br><span class="line">298d90f942e1   k8s_POD_kafka-zookeeper-0_default_a243d677-<span class="number">101b</span>-493b-a076-d94f46785f22_0                     <span class="number">0.00</span>%     724KiB / <span class="number">3.</span>704GiB     <span class="number">0.02</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">0B</span> / <span class="number">0B</span>           <span class="number">1</span></span><br><span class="line">1d92a13e4a6f   k8s_POD_kafka-0_default_f7374645-<span class="number">9904</span>-436c-bc8d-43ed415833c1_0                               <span class="number">0.00</span>%     872KiB / <span class="number">3.</span>704GiB     <span class="number">0.02</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">0B</span> / <span class="number">0B</span>           <span class="number">1</span></span><br><span class="line">b638c1bbd855   k8s_POD_postgres-postgresql-0_infrastructure_d9067ee1-<span class="number">6874</span>-<span class="number">4018</span>-a008-09362ad9330d_16         <span class="number">0.00</span>%     868KiB / <span class="number">3.</span>704GiB     <span class="number">0.02</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">0B</span> / <span class="number">0B</span>           <span class="number">1</span></span><br><span class="line">0fdc76799b4e   k8s_kube-flannel_kube-flannel-<span class="built_in">ds</span>-nk6tj_kube-system_0a186e7a-c0d7-<span class="number">4282</span>-9f5d-65ee20d0e13a_12   <span class="number">0.07</span>%     <span class="number">15.</span>4MiB / 50MiB       <span class="number">30.80</span>%    <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">33.</span>1MB / <span class="number">0B</span>       <span class="number">11</span></span><br><span class="line">4c3705247efa   k8s_kube-proxy_kube-proxy-xwfvl_kube-system_f46216cb-d018-4d82-b510-9be5e01cefca_12          <span class="number">0.00</span>%     <span class="number">23.</span>36MiB / <span class="number">3.</span>704GiB   <span class="number">0.62</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">43.</span>7MB / <span class="number">12.</span>3kB   <span class="number">8</span></span><br><span class="line">16d5db1e7447   k8s_POD_kube-proxy-xwfvl_kube-system_f46216cb-d018-4d82-b510-9be5e01cefca_13                 <span class="number">0.00</span>%     <span class="number">1.</span>996MiB / <span class="number">3.</span>704GiB   <span class="number">0.05</span>%     <span class="number">0B</span> / <span class="number">0B</span>     487kB / <span class="number">0B</span>        <span class="number">1</span></span><br><span class="line">496aacf5fddf   k8s_POD_kube-flannel-<span class="built_in">ds</span>-nk6tj_kube-system_0a186e7a-c0d7-<span class="number">4282</span>-9f5d-65ee20d0e13a_13            <span class="number">0.00</span>%     768KiB / <span class="number">3.</span>704GiB     <span class="number">0.02</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">0B</span> / <span class="number">0B</span>           <span class="number">1</span></span><br><span class="line">1e328afeb116   dapr_zipkin                                                                                  <span class="number">0.17</span>%     <span class="number">250.</span>2MiB / <span class="number">3.</span>704GiB   <span class="number">6.60</span>%     18MB / <span class="number">0B</span>   60MB / <span class="number">0B</span>         <span class="number">55</span></span><br><span class="line">27872f88cae3   dapr_placement                                                                               <span class="number">0.11</span>%     <span class="number">5.</span>992MiB / <span class="number">3.</span>704GiB   <span class="number">0.16</span>%     18MB / <span class="number">0B</span>   <span class="number">13.</span>6MB / <span class="number">0B</span>       <span class="number">10</span></span><br><span class="line">27c1f6daa81c   dapr_redis                                                                                   <span class="number">0.35</span>%     <span class="number">5.</span>633MiB / <span class="number">3.</span>704GiB   <span class="number">0.15</span>%     18MB / <span class="number">0B</span>   <span class="number">10.</span>7MB / <span class="number">0B</span>       <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ docker stats --format <span class="string">&quot;table &#123;&#123;.Container&#125;&#125;\t&#123;&#123;.CPUPerc&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;&quot;</span></span><br><span class="line">CONTAINER      <span class="meta">CPU</span> %     MEM USAGE / LIMIT</span><br><span class="line">298d90f942e1   <span class="number">0.00</span>%     724KiB / <span class="number">3.</span>704GiB</span><br><span class="line">1d92a13e4a6f   <span class="number">0.00</span>%     872KiB / <span class="number">3.</span>704GiB</span><br><span class="line">b638c1bbd855   <span class="number">0.00</span>%     868KiB / <span class="number">3.</span>704GiB</span><br><span class="line">0fdc76799b4e   <span class="number">2.37</span>%     <span class="number">15.</span>42MiB / 50MiB</span><br><span class="line">4c3705247efa   <span class="number">0.00</span>%     <span class="number">23.</span>36MiB / <span class="number">3.</span>704GiB</span><br><span class="line">16d5db1e7447   <span class="number">0.00</span>%     <span class="number">1.</span>996MiB / <span class="number">3.</span>704GiB</span><br><span class="line">496aacf5fddf   <span class="number">0.00</span>%     768KiB / <span class="number">3.</span>704GiB</span><br><span class="line">1e328afeb116   <span class="number">0.21</span>%     <span class="number">250.</span>2MiB / <span class="number">3.</span>704GiB</span><br><span class="line">27872f88cae3   <span class="number">0.12</span>%     <span class="number">5.</span>992MiB / <span class="number">3.</span>704GiB</span><br><span class="line">27c1f6daa81c   <span class="number">0.34</span>%     <span class="number">5.</span>633MiB / <span class="number">3.</span>704GiB</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #14</strong>: Docker Compose vs Docker Stack</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker Compose: is an official tool that helps you manage your Docker containers by letting you define everything through a docker-compose.yml file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker stack: is a command that&#x27;s embedded into the Docker CLI. Lets you manage a cluster of Docker containers through Docker Swarm.</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #15</strong>: Metadata Docker Images with Labels</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile example of adding 2 labels with 1 LABEL instruction:</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> &lt;key&gt;=&lt;value&gt;</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> version=<span class="string">&quot;1.0&quot;</span> maintainer=<span class="string">&quot;chyi &lt;nick.chyi@gmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker build example to add dynamic labels to your Docker images:</span></span><br><span class="line">$ docker build . --<span class="keyword">label</span><span class="bash"> <span class="string">&quot;version=1.0&quot;</span> --label <span class="string">&quot;maintaner=chyi &lt;nick.chyi@gmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker inspect images</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #16</strong>: Named Volumes vs Path Based Volumes</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Named volumes</span></span><br><span class="line">  postgres:<span class="regexp">/var/</span>lib<span class="regexp">/postgresql/</span>data</span><br><span class="line"></span><br><span class="line">  docker-compose automatically create the postgres volume, <span class="keyword">if</span> not you could running __$ docker volume create postgres__.</span><br><span class="line">  On Linux, the volume will get saved to <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/postgres/</span>_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path based volumes</span></span><br><span class="line">  .<span class="regexp">/postgres:/</span>var<span class="regexp">/lib/</span>postgresql/data</span><br><span class="line"></span><br><span class="line">  postgres/ directory would get created <span class="keyword">in</span> the current directory on the Docker host.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #17</strong>: The Volume or Mount Flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Setting up a volume the old way with docker run:</span></span><br><span class="line">$ docker container run … -v <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>:/myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting up the same volumes using the mount flag with docker run:</span></span><br><span class="line">$ docker container run … --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=<span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>,target=/myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker compose</span></span><br><span class="line">volumes:</span><br><span class="line">  - <span class="built_in">type</span>: <span class="string">&quot;bind&quot;</span></span><br><span class="line">    <span class="built_in">source</span>: <span class="string">&quot;.&quot;</span></span><br><span class="line">    target: <span class="string">&quot;/myapp&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #18</strong>: Connect to a Service Running on Docker Host</p>
<blockquote>
<p>Implementation of connecting to Docker host over a custom network with a static IP address.</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create a custom bridge Docker network</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at <span class="number">3</span>BPlus</span><br><span class="line">➜ docker network create -d bridge --subnet <span class="number">192.168</span>.<span class="number">0.0</span>/<span class="number">24</span> --gateway <span class="number">192.168</span>.<span class="number">0.1</span> mynet</span><br><span class="line"><span class="number">0330</span>b879fcc8fb23eeb092cb66fd86f1796e7f0abe37df4978903cf8fd07217b</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at <span class="number">3</span>BPlus</span><br><span class="line">➜ ifconfig</span><br><span class="line">br-<span class="number">0330</span>b879fcc8: flags=<span class="number">4099</span>&lt;UP,BROADCAST,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet <span class="number">192.168</span>.<span class="number">0.1</span>  netmask <span class="number">255.255</span>.<span class="number">255.0</span>  broadcast <span class="number">192.168</span>.<span class="number">0.255</span></span><br><span class="line">        ether <span class="number">02</span>:<span class="number">42</span>:<span class="number">16</span>:<span class="number">0</span>c:c0:<span class="number">51</span>  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        RX packets <span class="number">0</span>  bytes <span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line">        RX errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        TX packets <span class="number">0</span>  bytes <span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line">        TX errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the Alpine container and drop into a Shell prompt.</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at <span class="number">3</span>BPlus</span><br><span class="line">➜ docker container run --rm -it alpine sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the ping utility.</span></span><br><span class="line">/ <span class="comment"># apk update &amp;&amp; apk add iputils</span></span><br><span class="line">fetch https:<span class="regexp">//</span>dl-cdn.alpinelinux.org<span class="regexp">/alpine/</span>v3.<span class="number">14</span><span class="regexp">/main/</span>aarch64/APKINDEX.tar.gz</span><br><span class="line">fetch https:<span class="regexp">//</span>dl-cdn.alpinelinux.org<span class="regexp">/alpine/</span>v3.<span class="number">14</span><span class="regexp">/community/</span>aarch64/APKINDEX.tar.gz</span><br><span class="line">v3.<span class="number">14.2</span>-<span class="number">5</span>-gd4163d4c6c [https:<span class="regexp">//</span>dl-cdn.alpinelinux.org<span class="regexp">/alpine/</span>v3.<span class="number">14</span>/main]</span><br><span class="line">v3.<span class="number">14.2</span>-<span class="number">4</span>-ga15b4dc067 [https:<span class="regexp">//</span>dl-cdn.alpinelinux.org<span class="regexp">/alpine/</span>v3.<span class="number">14</span>/community]</span><br><span class="line">OK: <span class="number">14810</span> distinct packages available</span><br><span class="line">(<span class="number">1</span>/<span class="number">2</span>) Installing libcap (<span class="number">2.50</span>-r0)</span><br><span class="line">(<span class="number">2</span>/<span class="number">2</span>) Installing iputils (<span class="number">20210202</span>-r0)</span><br><span class="line">Executing busybox-<span class="number">1.33</span>.<span class="number">1</span>-r3.trigger</span><br><span class="line">OK: <span class="number">6</span> MiB <span class="keyword">in</span> <span class="number">16</span> packages</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ping the custom IP address we set up.</span></span><br><span class="line">/ <span class="comment"># ping 192.168.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You should see this output (hit CTRL+C to stop it)</span></span><br><span class="line">PING <span class="number">192.168</span>.<span class="number">0.1</span> (<span class="number">192.168</span>.<span class="number">0.1</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.336</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.293</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span>.<span class="number">0.1</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1013</span>ms</span><br><span class="line">rtt min<span class="regexp">/avg/m</span>ax<span class="regexp">/mdev = 0.293/</span><span class="number">0.314</span><span class="regexp">/0.336/</span><span class="number">0.021</span> ms</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #19</strong>: Show Total Disk Space Used by Docker</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images         <span class="number"> 3 </span>       <span class="number"> 2 </span>        203.9MB   198.5MB (97%)</span><br><span class="line">Containers     <span class="number"> 3 </span>       <span class="number"> 1 </span>        2.524MB   0B (0%)</span><br><span class="line">Local Volumes  <span class="number"> 1 </span>       <span class="number"> 0 </span>        0B        0B</span><br><span class="line">Build Cache    <span class="number"> 0 </span>       <span class="number"> 0 </span>        0B        0B</span><br><span class="line"></span><br><span class="line"><span class="comment"># -v flag (verbose) - will show the unique image size for each image</span></span><br><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ docker system df -v</span><br><span class="line">Images space usage:</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED       SIZE      SHARED SIZE   UNIQUE SIZE   CONTAINERS</span><br><span class="line">alpine                latest    bb3de5531c18  <span class="number"> 4 </span>days ago    5.337MB   0B            5.337MB       2</span><br><span class="line">hello-world           latest    bc11b176a293  <span class="number"> 7 </span>weeks ago   9.136kB   0B            9.136kB       1</span><br><span class="line">bahamat/unix-1st-ed   latest    37aa142d2113  <span class="number"> 5 </span>years ago   198.5MB   0B            198.5MB       0</span><br><span class="line"></span><br><span class="line">Containers space usage:</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND            LOCAL VOLUMES   SIZE      CREATED       STATUS                   NAMES</span><br><span class="line">9023720cdee7   alpine        &quot;sh&quot;              <span class="number"> 0 </span>              2.52MB   <span class="number"> 5 </span>hours ago   Up<span class="number"> 5 </span>hours               upbeat_kepler</span><br><span class="line">9e272ab58362   alpine        &quot;sh -c &#x27;exit 1&#x27;&quot;  <span class="number"> 0 </span>              0B       <span class="number"> 6 </span>hours ago   Exited (1)<span class="number"> 6 </span>hours ago   naughty_blackburn</span><br><span class="line">d95cc7e19d43   hello-world   &quot;/hello&quot;          <span class="number"> 0 </span>              0B       <span class="number"> 7 </span>weeks ago   Exited (0)<span class="number"> 7 </span>weeks ago   nifty_hellman</span><br><span class="line"></span><br><span class="line">Local Volumes space usage:</span><br><span class="line"></span><br><span class="line">VOLUME NAME   LINKS     SIZE</span><br><span class="line">user_my-db   <span class="number"> 0 </span>        0B</span><br><span class="line"></span><br><span class="line">Build cache usage: 0B</span><br><span class="line"></span><br><span class="line">CACHE ID   CACHE TYPE   SIZE      CREATED   LAST USED   USAGE     SHARED</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #20</strong>: Docker Compose Stop vs Down</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose stop</span></span><br><span class="line">&gt; stop container, <span class="keyword">but</span> <span class="keyword">it</span> won&#x27;t remove them</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose down</span></span><br><span class="line">&gt; stop container, removes <span class="keyword">the</span> stopped containers <span class="keyword">as</span> well <span class="keyword">as</span> any networks <span class="keyword">that</span> were created.</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose down -v</span></span><br><span class="line">&gt; add remove all volumes too.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #21</strong>: Difference between Docker Create, Start and Run</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create:</span></span><br><span class="line">  adds a writeable container <span class="keyword">on</span> top <span class="keyword">of</span> your image <span class="keyword">and</span> sets <span class="keyword">it</span> up <span class="keyword">for</span> <span class="built_in">running</span> whatever command you specified <span class="keyword">in</span> you CMD. The container ID <span class="keyword">is</span> reported <span class="keyword">back</span> <span class="keyword">but</span> <span class="keyword">it</span>&#x27;s <span class="keyword">not</span> started.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start:</span></span><br><span class="line">  will start any stopped container.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run:</span></span><br><span class="line">  combination <span class="keyword">of</span> create <span class="keyword">and</span> start, It creates <span class="keyword">the</span> container <span class="keyword">and</span> starts <span class="keyword">it</span>.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Have-a-Fun"><a href="#Have-a-Fun" class="headerlink" title="Have a Fun"></a>Have a Fun</h2><ul>
<li>Run the First Edition of Unix (1972) with Docker<blockquote>
<p>Run a PDP-11 simulator through Docker to interact with Unix as it was back in 1972</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --<span class="keyword">rm</span> -it bahamat/unix-1st-<span class="keyword">ed</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next-gitalk</title>
    <url>/2021/09/01/hexo-next-gitalk/</url>
    <content><![CDATA[<h3 id="站点搭建过程"><a href="#站点搭建过程" class="headerlink" title="站点搭建过程"></a>站点搭建过程</h3><ul>
<li><a href="https://hexo.io/zh-cn/">hexo</a> : 快速、简洁且高校的博客框架</li>
<li><a href="https://github.com/next-theme/hexo-theme-next/blob/master/docs/zh-CN/README.md">next</a> : Hexo主题</li>
<li><a href="https://github.com/gitalk/gitalk">gitalk</a> : 依靠GitHub issue的评论系统</li>
</ul>
<span id="more"></span>

<h3 id="Settings-amp-Tips"><a href="#Settings-amp-Tips" class="headerlink" title="Settings &amp; Tips"></a>Settings &amp; Tips</h3><ul>
<li><p><strong>Show descripion</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 修改themes/next/_config.yml</span><br><span class="line">excerpt_description: true</span><br><span class="line"></span><br><span class="line"># 文章截断</span><br><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>字数统计</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装插件 hexo-symbols-count-time</span></span><br><span class="line"><span class="string">$</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-symbols-count-time</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改hexo配置文件_config.yml</span></span><br><span class="line">  <span class="comment"># Symbols count and time to read of articles for Hexo.</span></span><br><span class="line">  <span class="attr">symbols_count_time:</span></span><br><span class="line">      <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改Next配置文件</span></span><br><span class="line">  <span class="comment"># Post wordcount display settings</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line">  <span class="attr">symbols_count_time:</span></span><br><span class="line">    <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">    <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>micro-services</title>
    <url>/2021/09/01/micro-services/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="项目工程化"><a href="#项目工程化" class="headerlink" title="项目工程化"></a>项目工程化</h2><ul>
<li><p>开源规范</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 开源协议</span></span><br><span class="line"><span class="bullet">  1.</span> GPL - General Public License</span><br><span class="line"><span class="code">    &gt; 衍生代码的分发需要开源并且也要遵守此协议</span></span><br><span class="line"><span class="code">  2. MPL</span></span><br><span class="line"><span class="code">    &gt; 允许免费重发布、免费修改，但要求修改的代码版权归软件发起者，这种授权维护了商业软件的利益，要求基于这种软件的修改无偿贡献版权给该软件</span></span><br><span class="line"><span class="code">  3. LGPL</span></span><br><span class="line"><span class="code">  4. Apache</span></span><br><span class="line"><span class="code">    &gt; Apache 2.0协议除了为用户提供版权许可之外，还有专利许可，适合设计专利内容的项目</span></span><br><span class="line"><span class="code">  5. BSD</span></span><br><span class="line"><span class="code">    &gt;</span></span><br><span class="line"><span class="code">  6. MIT</span></span><br><span class="line"><span class="code">    &gt; MIT 协议是所有开源许可中最宽松的一个，除了细笔包含许可声明之外，再无任何限制</span></span><br></pre></td></tr></table></figure></li>
<li><p>开源规范</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 项目结构:</span><br><span class="line"><span class="bullet">2.</span> 严格遵循代码规范:</span><br><span class="line"><span class="bullet">3.</span> 代码质量:</span><br><span class="line"><span class="bullet">4.</span> 单元测试覆盖率:</span><br><span class="line"><span class="bullet">5.</span> 版本发布规范:</span><br><span class="line"><span class="bullet">6.</span> 向下兼容:</span><br><span class="line"><span class="bullet">7.</span> 详细的文档说明:</span><br><span class="line"><span class="bullet">8.</span> 安全:</span><br></pre></td></tr></table></figure></li>
<li><p>文档规范</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> README文档</span><br><span class="line">  介绍项目功能、安装、部署、使用</span><br><span class="line"><span class="bullet">2.</span> 项目文档</span><br><span class="line">  开发文档: 说明项目的开发流程</span><br><span class="line">  用户文档:</span><br><span class="line"><span class="bullet">3.</span> API接口文档</span><br></pre></td></tr></table></figure></li>
<li><p>版本规范</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">语义化版本规范: SemVer: 主版本号.次版本号.修订号 (<span class="keyword">X</span>.<span class="keyword">Y</span>.<span class="keyword">Z</span>), XYZ为非负的整数，禁止在数字前方补零</span><br><span class="line">  主版本号: MAJOR: 当做了不兼容API修改</span><br><span class="line">  次版本号: MINOR: 当做了向下兼容的功能新增及修改 -- 偶数为稳定版本，奇数为开发版本</span><br><span class="line">  修订号:PATCH: 向下兼容问题修正</span><br><span class="line"></span><br><span class="line"><span class="keyword">X</span>.<span class="keyword">Y</span>.<span class="keyword">Z</span>[-先行版本号][+版本编译元数据]</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 实际开发的时候，使用<span class="number">0</span><span class="number">.1</span><span class="number">.0</span>作为第一开发版本号</span><br><span class="line">fix类型的commit 可以将修订号+<span class="number">1</span></span><br><span class="line">feat类型的commit可以将次版本号+<span class="number">1</span></span><br><span class="line">breaking change的commit将主版本号+<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>Commit 规范</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">Commit Message包含三部分:</span><br><span class="line"><span class="symbol">  Header:</span> <span class="params">&lt;type&gt;</span>[optional scope]: <span class="params">&lt;description&gt;</span></span><br><span class="line"><span class="symbol">    type:</span></span><br><span class="line"><span class="symbol">      feat:</span> 新增功能</span><br><span class="line"><span class="symbol">      fix:</span> Bug修复</span><br><span class="line"><span class="symbol">      perf:</span> 提高代码性能的变更</span><br><span class="line"><span class="symbol">      style:</span> 代码格式类的变更</span><br><span class="line"><span class="symbol">      refactor:</span> 其他代码类的变更，这些变更不属于feat,fix,perf和style. 简化代码，重命名变量、删除冗余代码</span><br><span class="line"><span class="symbol">      test:</span> 新增测试用例或是更新现有测试用例</span><br><span class="line"><span class="symbol">      ci:</span> 持续集成和部署想干改动，</span><br><span class="line"><span class="symbol">      docs:</span> 文档类更新</span><br><span class="line"><span class="symbol">      chore:</span> 其他类型，构建流程、依赖管理或者辅助工具的变动</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    scope:</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    description:</span> 动词开头，使用现在时</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">  Body:</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">  Footer:</span></span><br><span class="line"></span><br><span class="line">git rebase: 重写历史</span><br><span class="line">  git rebase -i <span class="params">&lt;commit ID&gt;</span> 这里是需要合并commit中最旧commit的父commit ID</span><br><span class="line"></span><br><span class="line">git reset HEAD~<span class="number">3</span>A 撤销过去的commit,重新提交</span><br><span class="line"></span><br><span class="line">git commit --amend: 修改最近一次commit 的 message</span><br><span class="line"></span><br><span class="line">Commit Message是commit数据结构中的一个属性，如果Commit Message有变更，则commit ID一定会变，git commit --amend只会变更最后一次的commit ID, git rebase -i 会变更父commit ID之后的所有提交commit ID.</span><br><span class="line"></span><br><span class="line">如果当前分之有未commit的代码，需要先执行git stash将工作状态进行暂存，当修改完成后在执行git stash pop恢复之前的工作状态</span><br></pre></td></tr></table></figure></li>
<li><p>目录结构设计</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结构化目录结构</span></span><br><span class="line">  /cmd            <span class="comment">-- 组件</span></span><br><span class="line">  /internal       <span class="comment">-- 私有应用和库代码,不希望在其他应用和库中被导入</span></span><br><span class="line">  /pkg            <span class="comment">-- 存放可以被外部应用使用的代码库</span></span><br><span class="line"><span class="comment"># 平铺式目录结构</span></span><br><span class="line">  &gt; 这种方式在很多框架/库中存在,好处式引用路径长度短</span><br></pre></td></tr></table></figure></li>
<li><p>工作流设计</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集中式工作流</span></span><br><span class="line">  &gt; 适用于团队人数少、开发不频繁、不需要同时维护多个版本的小项目</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能分支工作流</span></span><br><span class="line">  &gt; 不同功能在不同的分支进行开发，最后合并到<span class="literal">master</span>分支</span><br><span class="line">  Merge pull request:</span><br><span class="line">    <span class="number">1</span>. Create a merge commit: git merge --no-ff. feature分支上所有的commit都会加到<span class="literal">master</span>分支上，并且会生成一个merge commit。</span><br><span class="line">    <span class="number">2</span>. Squash <span class="keyword">and</span> merge: git merge --squash. feature分支上所有的commit都合并成一个commit.然后加到<span class="literal">master</span>分支,原来的commit历史会丢失</span><br><span class="line">    <span class="number">3</span>. Rebase <span class="keyword">and</span> merge: git rebase. 将pull request上所有提交历史按照原有顺序依次添加到<span class="literal">master</span>分支的头部HEAD.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Git Flow工作流</span></span><br><span class="line">  &gt; 比较适合大型的项目或者迭代速度快的项目</span><br><span class="line">  <span class="literal">master</span>: 该分支最新代码是发布状态，不能直接在该分支上开发，<span class="literal">master</span>分支每合并一个hotfix/release分支，都会打一个版本标签</span><br><span class="line">  develop: 该分支是开发中的最新代码，该分支只做合并操作，不能直接在该分支上开发</span><br><span class="line">  feature: 功能开发,基于develop分支新建一个feature分支，feature分支合并之前先pull一下develop分支，</span><br><span class="line">  release: 在发布阶段作为版本发布的预发布分支，基于develop分支创建, 测试通过后，将release分支合并到<span class="literal">master</span>和develop，并在<span class="literal">master</span>分支上版本标签，最后删除release版本分支</span><br><span class="line">  hotfix: 在维护阶段做紧急Bug修复分支，hotfix分支合并到<span class="literal">master</span>和develop分支，并在<span class="literal">master</span>分支打上修复后的版本标签,最后删除hotfix分支</span><br><span class="line"></span><br><span class="line"><span class="comment"># Forking 工作流</span></span><br><span class="line">  项目远程仓库和开发者远程仓库完全独立，开发者通过Pull Request的方式给远程仓库贡献代码，项目维护者选择性地接收任何开发者的提交，通过这种方式，可以避免开发者项目远程仓库的权限,从而提高项目远程仓库的安全性</span><br></pre></td></tr></table></figure></li>
<li><p>研发流程</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="介绍微服务架构设计"><a href="#介绍微服务架构设计" class="headerlink" title="介绍微服务架构设计"></a>介绍微服务架构设计</h2><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机科学</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>DDD</tag>
        <tag>分布式</tag>
        <tag>工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>Distributed ID Generator</title>
    <url>/2021/09/02/Distributed-ID-Generator/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="Distributed-ID-Generator"><a href="#Distributed-ID-Generator" class="headerlink" title="Distributed ID Generator"></a>Distributed ID Generator</h1><ul>
<li>UUID<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func BenchmarkUUID(t *testing.B) &#123;</span><br><span class="line">  for i := 0; i &lt; t.N; i++ &#123;</span><br><span class="line">    _ = uuid.New()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~/Downloads/uuid_demo via 🐹 v1.17 took 13s</span><br><span class="line">➜ go test -bench=.</span><br><span class="line"><span class="section">goos: darwin</span></span><br><span class="line"><span class="section">goarch: amd64</span></span><br><span class="line"><span class="section">pkg: uuid_demo</span></span><br><span class="line"><span class="section">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span></span><br><span class="line">BenchmarkUUID-4   	 1390710	       844.7 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok  	uuid_demo	2.351s</span><br><span class="line"></span><br><span class="line"><span class="comment"># UUIDs are 128-bit hexadecimal numbers that are globally unique</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优点:</span></span><br><span class="line">  1. 生成足够简单，本地生成无网络消耗，具有唯一性</span><br><span class="line"><span class="comment"># 缺点:</span></span><br><span class="line">  1. 无序的字符串，不具备趋势自增特性</span><br><span class="line">  2. 没有具体的业务含义</span><br><span class="line">  3. 长度过长16字节128位,36位长度的字符串,存储以及查询数据库性能消耗较大,数据库建议主键尽量越短越好，作为数据库主键UUID的无序性会导致数据位置频繁变动，严重影响性能</span><br></pre></td></tr></table></figure></li>
<li>基于数据库自增ID<blockquote>
<p>基于数据库的auto_increment自增ID完成可以充当分布式ID</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># 创建数据表</span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SEQUENCE_ID (id <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment, <span class="keyword">value</span> <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>, <span class="keyword">PRIMARY KEY</span> (id)) ENGINE=MyISAM;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.08</span> sec)</span><br><span class="line"></span><br><span class="line"># MySQL使用存储过程插入数据</span><br><span class="line"><span class="keyword">delimiter</span> $$<span class="pgsql"></span></span><br><span class="line"><span class="pgsql"><span class="keyword">create</span> <span class="keyword">procedure</span> bench_insert(count <span class="type">int</span> unsigned)</span></span><br><span class="line"><span class="pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="pgsql">  <span class="keyword">declare</span> num <span class="type">int</span> unsigned <span class="keyword">default</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="pgsql">  <span class="keyword">declare</span> c <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">default</span> repeat(<span class="string">&#x27;c&#x27;</span>,<span class="number">10</span>);</span></span><br><span class="line"><span class="pgsql">  <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span></span><br><span class="line"><span class="pgsql">  <span class="keyword">while</span> num &lt;= count <span class="keyword">DO</span></span></span><br><span class="line"><span class="pgsql">    <span class="keyword">insert</span> <span class="keyword">into</span> SEQUENCE_ID(`<span class="keyword">value</span>`) <span class="keyword">values</span>(c);</span></span><br><span class="line"><span class="pgsql">    <span class="keyword">set</span> num=num+<span class="number">1</span>;</span></span><br><span class="line"><span class="pgsql">  <span class="keyword">end</span> <span class="keyword">while</span>;</span></span><br><span class="line"><span class="pgsql"><span class="keyword">COMMIT</span>;</span></span><br><span class="line"><span class="pgsql"><span class="keyword">END</span>$$</span> <span class="keyword">delimiter</span> ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> bench_insert(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">PROCEDURE</span> bench_insert;</span><br><span class="line"></span><br><span class="line"># 当需要ID的时候，向表中插入记录返回主键ID.</span><br><span class="line"></span><br><span class="line"># 优点:</span><br><span class="line">  <span class="number">1.</span> 实现简单、ID单调自增、数值类型查询速度快</span><br><span class="line"></span><br><span class="line">缺点:</span><br><span class="line">  <span class="number">1.</span> DB单点存在宕机风险，无法扛住高并发场景</span><br></pre></td></tr></table></figure></li>
<li>基于数据库集群模式<blockquote>
<p>多数据库实例单独生产自增ID</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 设置启始值和自增布长</span><br><span class="line">  DB1:</span><br><span class="line">    <span class="keyword">set</span> @<span class="variable">@auto</span>_increment_offset <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 起始值</span></span><br><span class="line">    <span class="keyword">set</span> @<span class="variable">@auto</span>_increment_increment <span class="operator">=</span> <span class="number">2</span>; <span class="comment">-- 步长</span></span><br><span class="line">  DB2:</span><br><span class="line">    <span class="keyword">set</span> @<span class="variable">@auto</span>_increment_offset <span class="operator">=</span> <span class="number">2</span>; <span class="comment">-- 起始值</span></span><br><span class="line">    <span class="keyword">set</span> @<span class="variable">@auto</span>_increment_increment <span class="operator">=</span> <span class="number">2</span>; <span class="comment">-- 步长</span></span><br><span class="line"></span><br><span class="line"># 优点:</span><br><span class="line">  解决DB单点问题</span><br><span class="line"></span><br><span class="line"># 缺点:</span><br><span class="line">  不利于后续扩容，而且实际上单个数据库自身压力还是很大，依旧无法满足高并发场景</span><br></pre></td></tr></table></figure></li>
<li>基于数据库的号段模式<blockquote>
<p>号段模式是分布式ID生成器主流实现方式之一，批量获取自增ID，每次从数据库取出一个号段范围，具体业务服务将本号段生成的自增ID加载内存</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">  mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> id_generator (id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, max_id <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;当前最大id&#x27;</span>, step <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;号段的布长&#x27;</span>, biz_type <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;业务类型&#x27;</span>, <span class="keyword">version</span> <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;版本号&#x27;</span>, <span class="keyword">PRIMARY KEY</span>(`id`));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">5</span> warnings (<span class="number">0.11</span> sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; describe id_generator;</span><br><span class="line">  +<span class="comment">----------+--------+------+-----+---------+-------+</span></span><br><span class="line">  | Field    | <span class="keyword">Type</span>   | <span class="keyword">Null</span> | Key | <span class="keyword">Default</span> | Extra |</span><br><span class="line">  +<span class="comment">----------+--------+------+-----+---------+-------+</span></span><br><span class="line">  | id       | <span class="type">int</span>    | <span class="keyword">NO</span>   | PRI | <span class="keyword">NULL</span>    |       |</span><br><span class="line">  | max_id   | <span class="type">bigint</span> | <span class="keyword">NO</span>   |     | <span class="keyword">NULL</span>    |       |  <span class="comment">-- 当前最大的可用id</span></span><br><span class="line">  | step     | <span class="type">int</span>    | <span class="keyword">NO</span>   |     | <span class="keyword">NULL</span>    |       |  <span class="comment">-- 代表号段的长度</span></span><br><span class="line">  | biz_type | <span class="type">int</span>    | <span class="keyword">NO</span>   |     | <span class="keyword">NULL</span>    |       |  <span class="comment">-- 不同业务类型</span></span><br><span class="line">  | <span class="keyword">version</span>  | <span class="type">int</span>    | <span class="keyword">NO</span>   |     | <span class="keyword">NULL</span>    |       |  <span class="comment">-- 乐观锁，每次都更新version，保证并发时数据的正确性</span></span><br><span class="line">  +<span class="comment">----------+--------+------+-----+---------+-------+</span></span><br><span class="line">  <span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">update</span> id_generator <span class="keyword">set</span> max_id = #&#123;max_id+step&#125;, version = <span class="keyword">version</span> + <span class="number">1</span> <span class="keyword">where</span> version = # &#123;<span class="keyword">version</span>&#125; <span class="keyword">and</span> biz_type = XXX</span><br></pre></td></tr></table></figure></li>
<li>基于Redis模式<blockquote>
<p>利用redis Incr 原子性自增</p>
</blockquote>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="number">172.30.1.23</span>:<span class="number">6002</span>&gt; set seq_id <span class="number">1</span></span><br><span class="line">  OK</span><br><span class="line">  <span class="number">172.30.1.23</span>:<span class="number">6002</span>&gt; incr seq_id</span><br><span class="line">  (integer) <span class="number">2</span></span><br><span class="line">  <span class="number">172.30.1.23</span>:<span class="number">6002</span>&gt; get seq_id</span><br><span class="line">  &quot;<span class="number">2</span>&quot;</span><br><span class="line">  <span class="number">172.30.1.23</span>:<span class="number">6002</span>&gt;</span><br><span class="line"></span><br><span class="line"># Benchmark</span><br><span class="line">ubuntu in ~ at <span class="number">3</span>BPlus took <span class="number">4</span>s</span><br><span class="line">➜ redis-benchmark -n <span class="number">1000000</span> -t set,get,incr -P <span class="number">16</span> -q -h <span class="number">127.0.0.1</span> -p <span class="number">6001</span> --cluster</span><br><span class="line">Cluster has <span class="number">3</span> master nodes:</span><br><span class="line"></span><br><span class="line">Master <span class="number">0</span>: a733c21d3b735b9d026eb4d462ef6b367d8ebb<span class="number">98 172.30.1</span>.<span class="number">23</span>:<span class="number">6002</span></span><br><span class="line">Master <span class="number">1</span>: <span class="number">9</span>c35a4e211f6534861ed768dba592e<span class="number">85539b1377</span> <span class="number">172.30.1.23</span>:<span class="number">6003</span></span><br><span class="line">Master <span class="number">2</span>: a901e497cb72819cf0765e9e4eb16c36399c437b <span class="number">172.30.1.23</span>:<span class="number">6001</span></span><br><span class="line"></span><br><span class="line">SET: <span class="number">47001.32</span> requests per second, p<span class="number">50=15.199</span> msec</span><br><span class="line">GET: <span class="number">101936.80</span> requests per second, p<span class="number">50=5.679</span> msec</span><br><span class="line">INCR: <span class="number">46496.49</span> requests per second, p<span class="number">50=13.879</span> msec   -- 并发<span class="number">5</span>万/s</span><br></pre></td></tr></table></figure></li>
<li>twitter snowflake<blockquote>
<p>雪花算法 (Snowflake) Twitter内部分布式采用的ID生成算法</p>
</blockquote>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section"># The default Twitter format shown below.</span></span><br><span class="line"><span class="section">+--------------------------------------------------------------------------+</span></span><br><span class="line"><span class="section">| 1 Bit Unused | 41 Bit Timestamp |  10 Bit NodeID  |   12 Bit Sequence ID |</span></span><br><span class="line"><span class="section">+--------------------------------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line">41 bits: store a timestamp with millisecond precision</span><br><span class="line">10 bits: store a node id - a range from 0 through 1023</span><br><span class="line">12 bits: store a sequence number - a range from 0 through 4095</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>ID Generator</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka Tips &amp; Tracks</title>
    <url>/2021/09/02/Kafka-Tips-Tracks/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MySQL Tips &amp; Tracks</title>
    <url>/2021/09/02/MySQL-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="数据库日志"><a href="#数据库日志" class="headerlink" title="数据库日志"></a>数据库日志</h2><ul>
<li>重做日志 - redo log<blockquote>
<p>记录修改后的数据</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Tips &amp; Tracks</title>
    <url>/2021/09/02/Redis-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><blockquote>
<p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker.</p>
</blockquote>
<span id="more"></span>

<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><ul>
<li>通信协议<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">redis客户端和服务器发送的命令和数据一律以\r\n (<span class="literal">CR</span> LF)结尾</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求协议:</span></span><br><span class="line">  *&lt;参数数量&gt; <span class="literal">CR</span> LF</span><br><span class="line">  $&lt;参数的字节数量&gt; <span class="literal">CR</span> LF</span><br><span class="line">  &lt;参数的数据&gt; <span class="literal">CR</span> LF</span><br><span class="line"></span><br><span class="line">  ubuntu <span class="keyword">in</span> /  <span class="keyword">at</span> <span class="number">3</span>BPlus took <span class="number">11</span>s</span><br><span class="line">  ➜ tail appendonly.aof</span><br><span class="line">  $<span class="number">3</span></span><br><span class="line">  <span class="built_in">set</span></span><br><span class="line">  $<span class="number">4</span></span><br><span class="line">  name</span><br><span class="line">  $<span class="number">10</span></span><br><span class="line">  chyiyaqing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回复协议:</span></span><br><span class="line">  &gt; 在回复协议中，可以通过检查第一个字节，确定这个回复是什么类型</span><br><span class="line">  - 状态回复 (status reply) 第一个字节是 <span class="string">&quot;+&quot;</span></span><br><span class="line">  - 错误回复 (error reply) 第一个字节是 <span class="string">&quot;-&quot;</span></span><br><span class="line">  - 整数回复 (<span class="keyword">integer</span> reply) 第一个字节是 <span class="string">&quot;.&quot;</span></span><br><span class="line">  - 批量回复 (bulk reply) 第一个字节是 <span class="string">&quot;$&quot;</span></span><br><span class="line">  - 多条批量回复 (multi bulk reply) 第一个字节是 <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><blockquote>
<p>Redis 持久化主要两大机制: AOF (Append Only File) 日志和RDB 快照</p>
</blockquote>
<ul>
<li><p>AOF - Append Only File</p>
<blockquote>
<p>AOF日志是Redis执行完命令，把数据写入内存，然后才记录日志,记录的是Redis收到的每一条命令</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 写后日志这种方式，先让系统执行命令，只有命令执行成功，才会被记录到日志中，避免出现记录错误命令的情况</span></span><br><span class="line"><span class="section"># AOF 是在命令执行后才记录日志，不会阻塞当前写操作</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 写回磁盘策略 appendfsync</span></span><br><span class="line"><span class="bullet">  1.</span> Always: 同步写回, 每个写命令执行完，立马同步将日志写回磁盘</span><br><span class="line"><span class="code">    &gt; 落盘操作属于慢速，回影响主线程性能</span></span><br><span class="line"><span class="code">  2. Everysec: 每秒写回,每个写命令执行完，先把日志写到AOF文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘</span></span><br><span class="line"><span class="code">    &gt; 在避免影响主线程和避免数据丢失两者之间trade-off方式</span></span><br><span class="line"><span class="code">  3. No: 操作系统控制写回，每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span><br><span class="line"><span class="code">    &gt; 落盘时机交给操作系统，只要AOF记录没有写回磁盘，宕机对应的数据就丢失</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 解决AOF文件过大的性能问题: AOF 重写</span></span><br><span class="line"></span><br><span class="line">  问题:</span><br><span class="line"><span class="bullet">    1.</span> 文件系统本身对文件大小有限制，无法保存过大的文件</span><br><span class="line"><span class="bullet">    2.</span> 文件过大，追加命令记录效率变低</span><br><span class="line"><span class="bullet">    3.</span> 发生宕机，AOF记录命令要被重新执行，故障恢复比较缓慢，会影响Redis正常使用</span><br><span class="line"></span><br><span class="line">  AOF重写:</span><br><span class="line"><span class="code">    &gt; 重写机制可以将旧日志文件中的多条命令，在重写后的新日志中变成一条命令</span></span><br><span class="line"><span class="code">    &gt; AOF重写过程是由后台子进程bgrewriteaof完成，避免阻塞主线程，导致性能下降</span></span><br><span class="line"><span class="code">    &gt; 每次AOF重写时，Redis会执行一个内存拷贝，用于重写，然后使用两个日志保证重写过程中，新写入的数据不会丢失，而且，Redis采用额外的线程进行数据重写，过程不会阻塞主线程</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure></li>
<li><p>RDB - 内存快照</p>
<blockquote>
<p>内存快照：指内存中的数据在某一个时刻的状态记录</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Redis两种命令生成RDB文件</span></span><br><span class="line"><span class="bullet">  1.</span> save: 在主线程执行，会导致阻塞</span><br><span class="line"><span class="bullet">  2.</span> bgsave: 创建子进程，专门用于写入RDB文件，避免主线程阻塞</span><br><span class="line"><span class="code">    &gt; bgsave子进程由主线程fork生成，共享主线程的所有内存数据，bgsave子进程运行后，开始读取主线程的内存数据，并把数据写入RDB文件</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 增量快照:</span></span><br><span class="line"><span class="quote">&gt; 做一次全量快照后，后续的快照支队修改的数据进行快照记录，可以避免每次全量快照的开销</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 混合使用AOF日志和内存快照</span></span><br><span class="line"><span class="quote">&gt; 内存快照以一定的频率执行，两次快照之间，使用AOF日志记录这期间的所有命令操作</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Redis-应用场景-消息队列"><a href="#Redis-应用场景-消息队列" class="headerlink" title="Redis 应用场景 - 消息队列"></a>Redis 应用场景 - 消息队列</h2>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 消息队列需要满足的功能:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">  1.</span> 支持阻塞等待拉取消息</span><br><span class="line"><span class="bullet">  2.</span> 支持发布/订阅模式</span><br><span class="line"><span class="bullet">  3.</span> 消费失败，可重新消费，消息不丢失</span><br><span class="line"><span class="bullet">  4.</span> 实例宕机，消息不丢失、数据可持久化</span><br><span class="line"><span class="bullet">  5.</span> 消息可堆积</span><br></pre></td></tr></table></figure>

<ul>
<li><p>List - 队列:</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ redis-cli -c -p <span class="number">6001</span></span><br><span class="line"><span class="number">127.0.0.1:6001</span>&gt; ping</span><br><span class="line">PONG</span><br><span class="line"><span class="number">127.0.0.1:6001</span>&gt; LPUSH queue msg1    # 增加消息</span><br><span class="line">-&gt; Redirected to slot <span class="string">[13011]</span> located at <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6003</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; LPUSH queue msg2</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; RPOP queue        # 拉取消息</span><br><span class="line"><span class="string">&quot;msg1&quot;</span></span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; RPOP queue</span><br><span class="line"><span class="string">&quot;msg2&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6001</span>&gt; RPOP queue          # 队列为空，RPOP返回NULL</span><br><span class="line">-&gt; Redirected to slot <span class="string">[13011]</span> located at <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6003</span></span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0.0.1:6001</span>&gt; BRPOP queue <span class="number">5</span>       # BRPOP阻塞式拉取消息，支持传入超时时间</span><br><span class="line">-&gt; Redirected to slot <span class="string">[13011]</span> located at <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6003</span></span><br><span class="line">(nil)</span><br><span class="line">(<span class="number">5</span>.00s)</span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; BRPOP queue <span class="number">0</span>     # 不设置超时，直到有新消息才返回</span><br><span class="line">^C</span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; exit</span><br><span class="line"></span><br><span class="line">注意: 如果设置超时时间太长，连接太久没有活跃，有可能会被Redis server判定为无效连接，之后Redis Server会强制把这个客户端踢下线，客户端要有重连机制</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 不支持重复消费：消费者拉取消息后，该消息就从List中删除，无法被其他消费者在此消费，即不支持多个消费者消费同一批数据</span><br><span class="line"><span class="number">2</span>. 消息丢失，消费者拉取到消息后，如果发生异常宕机，这条消息就丢失</span><br><span class="line"></span><br><span class="line"># 单机测评</span><br><span class="line">ubuntu in ~ at 3BPlus took 37s</span><br><span class="line">➜ redis-benchmark -n <span class="number">1000000</span> -t lpush,rpop -P <span class="number">16</span> -q -h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -p <span class="number">6001</span> --cluster</span><br><span class="line">Cluster has <span class="number">3</span> master nodes:</span><br><span class="line"></span><br><span class="line">Master <span class="number">0</span>: a733c21d3b735b9d026eb4d462ef6b367d8ebb98 <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6002</span></span><br><span class="line">Master <span class="number">1</span>: 9c35a4e211f6534861ed768dba592e85539b1377 <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6003</span></span><br><span class="line">Master <span class="number">2</span>: a901e497cb72819cf0765e9e4eb16c36399c437b <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6001</span></span><br><span class="line"></span><br><span class="line">LPUSH: <span class="number">41529</span>.<span class="number">96</span> requests per second, p50=<span class="number">17</span>.<span class="number">199</span> msec</span><br><span class="line">RPOP: <span class="number">46539</span>.<span class="number">77</span> requests per second, p50=<span class="number">15</span>.<span class="number">463</span> msec</span><br></pre></td></tr></table></figure></li>
<li><p>Pub/Sub - 发布订阅模型</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 消费者1</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ <span class="keyword">at</span> <span class="number">3</span>BPlus</span><br><span class="line">➜ redis-cli -c -p <span class="number">6001</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; SUBSCRIBE queue</span><br><span class="line">Reading messages... (press Ctrl-C <span class="keyword">to</span> quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line"><span class="number">3</span>) (<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;message&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;msg1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者2</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ <span class="keyword">at</span> <span class="number">3</span>BPlus</span><br><span class="line">➜ redis-cli -c -p <span class="number">6001</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; SUBSCRIBE queue</span><br><span class="line">Reading messages... (press Ctrl-C <span class="keyword">to</span> quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line"><span class="number">3</span>) (<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;message&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;msg1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ <span class="keyword">at</span> <span class="number">3</span>BPlus</span><br><span class="line">➜ redis-cli -c -p <span class="number">6001</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PUBLISH queue msg1</span><br><span class="line">(<span class="built_in">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PUBLISH queue msg2</span><br><span class="line">(<span class="built_in">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pub/Sub 支持阻塞式拉取消息，满足多组消费者，匹配订阅模式,允许消费者订阅多个队列</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PUBLISH queue.p1 msg1       <span class="comment">-- 生产者</span></span><br><span class="line">(<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PUBLISH queue.p2 msg2</span><br><span class="line">(<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PSUBSCRIBE queue.*          <span class="comment">-- 消费者 匹配订阅</span></span><br><span class="line">Reading messages... (press Ctrl-C <span class="keyword">to</span> quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue.*&quot;</span></span><br><span class="line"><span class="number">3</span>) (<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue.*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;queue.p1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;msg1&quot;</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue.*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;queue.p2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;msg2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pub/Sub 实现原理</span></span><br><span class="line">&gt; 没有基于任何数据类型，没有做任何数据存储，只是单纯地为生产者、消费者建立数据转发通道，把符合规则的数据，从一端转发到另一端</span><br><span class="line">&gt; **在使用Pub/Sub时，消费者必须先订阅队列，生产者才能发布消息，否则消息会丢失**</span><br><span class="line">&gt; List属于“拉取模式”, Pub/Sub属于“推模式”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意使用Pub/Sub会丢数据</span></span><br><span class="line"><span class="number">1.</span> 消费者下线,重新上线，只能接收新的消息，在下线期间生产者发布的消息，因为找不到消费者，会被丢弃掉.</span><br><span class="line"><span class="number">2.</span> Redis宕机, Pub/Sub相关操作，不会写入RDB和AOF中，当Redis宕机重启，Pub/Sub的数据会全部丢失</span><br><span class="line"><span class="number">3.</span> 消费堆积, 每个消费者订阅一个队列，Redis都会在Server给消费者分配一个【缓冲区】,这个缓冲区其实就是一块内存，当生产者发布消息时，Redis先把消息写到对应消费者的缓冲区,之后消费者不断从缓冲区读取、处理消息, 缓冲区上线,会被强制下线.</span><br></pre></td></tr></table></figure></li>
<li><p>Stream</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Stream 通过XADD 和 XREAD完成简单的生产、消费模型</span></span><br><span class="line">  XADD: 发布消息</span><br><span class="line">  XREAD: 读取消息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者发布消息</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6001</span>&gt; XADD <span class="keyword">queue</span> * name <span class="number">2021</span>      <span class="comment"># * 表示自动生成唯一消息ID</span></span><br><span class="line">-&gt; Redirected <span class="keyword">to</span> slot [<span class="number">13011</span>] located at <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span></span><br><span class="line"><span class="string">&quot;1630886765690-0&quot;</span>                           <span class="comment">#消息ID格式: 时间戳-自增序号</span></span><br><span class="line"><span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XADD <span class="keyword">queue</span> * name <span class="number">09</span>-<span class="number">06</span></span><br><span class="line"><span class="string">&quot;1630886777470-0&quot;</span></span><br><span class="line"><span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者消费消息</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6001</span>&gt; XREAD COUNT <span class="number">5</span> STREAMS <span class="keyword">queue</span> <span class="number">0</span>-<span class="number">0</span>   <span class="comment"># 从开头读取5条消息，0-0表示从开头读取</span></span><br><span class="line">-&gt; Redirected <span class="keyword">to</span> slot [<span class="number">13011</span>] located at <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span></span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;1630886765690-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;2021&quot;</span></span><br><span class="line">      <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;1630886777470-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;09-06&quot;</span></span><br><span class="line"><span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XREAD COUNT <span class="number">5</span> STREAMS <span class="keyword">queue</span> <span class="number">1630886777470</span>-<span class="number">0</span>  <span class="comment"># 继续拉取消息,传入上一条消息的ID</span></span><br><span class="line"><span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XREAD COUNT <span class="number">5</span> BLOCK <span class="number">0</span> STREAMS <span class="keyword">queue</span> <span class="number">1630886777470</span>-<span class="number">0</span>  <span class="comment"># BLOCK 阻塞式拉取消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Stream 支持发布/订阅模式</span></span><br><span class="line">  - XGROUP: 创建消费者组</span><br><span class="line">  - XREADGROUP: 在指定消费组下，开启消费者拉取消息</span><br><span class="line"></span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XGROUP CREATE <span class="keyword">queue</span> group1 <span class="number">0</span>-<span class="number">0</span>  <span class="comment"># 创建消费者组1， 0-0表示从头拉取消费</span></span><br><span class="line">  OK</span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XGROUP CREATE <span class="keyword">queue</span> group2 <span class="number">0</span>-<span class="number">0</span>  <span class="comment"># 创建消费者组2，0-0</span></span><br><span class="line">  OK</span><br><span class="line"></span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XREADGROUP GROUP group1 consumer COUNT <span class="number">5</span> STREAMS <span class="keyword">queue</span> &gt;  <span class="comment"># group1 的consumer开始消费，&gt;表示拉取最新数据</span></span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;1630886765690-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;2021&quot;</span></span><br><span class="line">      <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;1630886777470-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;09-06&quot;</span></span><br><span class="line">      <span class="number">3</span>) <span class="number">1</span>) <span class="string">&quot;1630887243865-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;08-14&quot;</span></span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XREADGROUP GROUP group2 consumer COUNT <span class="number">5</span> STREAMS <span class="keyword">queue</span> &gt;</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;1630886765690-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;2021&quot;</span></span><br><span class="line">      <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;1630886777470-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;09-06&quot;</span></span><br><span class="line">      <span class="number">3</span>) <span class="number">1</span>) <span class="string">&quot;1630887243865-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;08-14&quot;</span></span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XACK <span class="keyword">queue</span> group1 <span class="number">1630887243865</span>-<span class="number">0</span>  <span class="comment"># XACK 命令告知Redis消费者处理完</span></span><br><span class="line">  (integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Stream 数据会写入RDB和AOF做持久化A</span></span><br><span class="line"><span class="comment"># 消息堆积，Stream会只保留固定长度的新消息,当队列长度超过上限，就消息会被删除，只保留固定长度的新消息</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>缓存</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>echo-go-web-framework</title>
    <url>/2021/09/02/echo-go-web-framework/</url>
    <content><![CDATA[<h1 id="Echo"><a href="#Echo" class="headerlink" title="Echo"></a>Echo</h1><blockquote>
<p>高性能、可扩展、精简的Go Web框架</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">➜ go run main.go</span><br><span class="line"></span><br><span class="line">   <span class="strong">____</span>    <span class="strong">__</span></span><br><span class="line"><span class="strong">  / __</span>/<span class="strong">__<span class="emphasis">_/ /  <span class="strong">__<span class="emphasis">_</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"> / _</span>// __</span>/ _</span> \/ <span class="emphasis">_ \</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">/<span class="strong">__<span class="emphasis">_/\<span class="strong">__/<span class="emphasis">_//_</span>/\__</span>_</span>/ v4.5.0</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">High performance, minimalist Go web framework</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">https://echo.labstack.com</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__O/__</span><span class="strong">____</span>_</span></span></span><br><span class="line"><span class="strong">                                    O\</span></span><br><span class="line"><span class="strong">⇨ http server started on [::]:8080</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h2><ul>
<li>Optimized HTTP router which smartly prioritize routes</li>
<li>Build robust and scalable RESTful APIs</li>
<li>Group APIs</li>
<li>Extensible middleware framework</li>
<li>Define middleware at root, group or route level</li>
<li>Data binding for JSON, XML and form payload</li>
<li>Handy functions to send variety of HTTP response</li>
<li>Centralized HTTP error handling</li>
<li>Template rendering with any template engine</li>
<li>Define your format for the logger</li>
<li>Highly customizable</li>
<li>Automatic TLS via Let’s Encrypt</li>
<li>HTTP/2 support</li>
</ul>
]]></content>
      <tags>
        <tag>框架</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Dev-Ops Tips &amp; Tracks</title>
    <url>/2021/09/03/Dev-Ops-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> Programming</span><br><span class="line"><span class="bullet">2.</span> Software Testing</span><br><span class="line"><span class="bullet">3.</span> Operations</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Distribute Scraping for Gophers</title>
    <url>/2021/09/03/Distribute-Scraping-for-Gophers/</url>
    <content><![CDATA[<h1 id="分布式爬虫"><a href="#分布式爬虫" class="headerlink" title="分布式爬虫"></a>分布式爬虫</h1><blockquote>
<p>分布式爬虫是一套任务分发和执行系统，常见的任务分发，因为上下游存在速度不匹配问题，需要借助消息队列</p>
</blockquote>
<span id="more"></span>

<h2 id="分布式消息队列"><a href="#分布式消息队列" class="headerlink" title="分布式消息队列"></a>分布式消息队列</h2><ul>
<li>nats<blockquote>
<p>nats是Go实现的高性能分布式消息队列，适用于高并发吞吐量的消息分发场景.</p>
</blockquote>
</li>
</ul>
]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch Tips &amp; Tracks</title>
    <url>/2021/09/03/Elasticsearch-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><blockquote>
<p>Elasticsearch是一个开源的分布式搜索与分析引擎，提供近实时搜索和聚合功能<br>Elastic Stack主要应用于：搜索、日志管理、安全分析、指标分析、业务分析、应用性能监控等多个领域<br>“Search is something that any application should have.”</p>
</blockquote>
<span id="more"></span>

<h2 id="Elastic-Stack-生态圈"><a href="#Elastic-Stack-生态圈" class="headerlink" title="Elastic Stack 生态圈"></a>Elastic Stack 生态圈</h2><ul>
<li><p>解决方案:</p>
<ul>
<li>搜索</li>
<li>日志分析</li>
<li>指标分析</li>
<li>安全分析</li>
</ul>
</li>
<li><p>可视化:</p>
<ul>
<li>Kibana: 可视化分析</li>
</ul>
</li>
<li><p>存储/计算:</p>
<ul>
<li>Elasticsearch: 核心引擎,提供数据存储、搜索和聚合的能力</li>
</ul>
</li>
<li><p>数据抓取:</p>
<ul>
<li>Logstash<blockquote>
<p>开源的服务器端数据处理管道，支持从不同来源采集数据，转换数据，并将数据发送到不同的存储库中</p>
</blockquote>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 特性:</span></span><br><span class="line"><span class="bullet">  1.</span> 实时解析和转换数据</span><br><span class="line"><span class="code">    &gt; 从IP地址破译地理位置</span></span><br><span class="line"><span class="code">    &gt; 从PII数据匿名化，排除敏感字段</span></span><br><span class="line"><span class="code">  2. 可扩展</span></span><br><span class="line"><span class="code">  3. 可靠性安全性</span></span><br><span class="line"><span class="code">    &gt; Logstash 通过持久化队列保证至少将运行中的事件送达一次</span></span><br><span class="line"><span class="code">    &gt; 数据传输加密</span></span><br><span class="line"><span class="code">  4. 加密</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Beats<blockquote>
<p>轻量级别数据采集器</p>
</blockquote>
</li>
</ul>
</li>
<li><p>X-Pack: 商业化套件</p>
</li>
</ul>
<blockquote>
<p>Elasticsearch与数据库的集成</p>
</blockquote>
<p><img src="/misc/images/Elastichsearch.png" alt="Elastichsearch"></p>
<blockquote>
<p>指标分析/日志分析</p>
</blockquote>
<ul>
<li>Data Collection(beats) -&gt; Buffering(redis,Kafkak) -&gt; Data Aggregation &amp; Processing(logstash) -&gt; Indexing &amp; storage(elasticsearch) -&gt; Analysis &amp; visualization(Kbana)</li>
</ul>
<h2 id="Elasticsearch-1"><a href="#Elasticsearch-1" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><ul>
<li><p>Elasticsearch 目录结构</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">ubuntu <span class="keyword">in</span> ~/elasticsearch-<span class="number">7.14</span>.<span class="number">1</span> <span class="keyword">at</span> k8s-node1 took <span class="number">45</span>s</span><br><span class="line">➜ tree -L <span class="number">1</span></span><br><span class="line">.</span><br><span class="line">├── bin                 <span class="comment">-- 脚本文件，包括启动elasticsearch,安装插件，运行统计数据</span></span><br><span class="line">├── config              <span class="comment">-- elasticsearch.yml 集群配置文件，user, role based 相关配置</span></span><br><span class="line">├── jdk                 <span class="comment">-- Java 运行环境</span></span><br><span class="line">├── lib                 <span class="comment">-- Java 类库</span></span><br><span class="line">├── LICENSE.txt</span><br><span class="line">├── logs                <span class="comment">-- path.log 日志文件</span></span><br><span class="line">├── modules             <span class="comment">-- 包含所有ES模块</span></span><br><span class="line">├── NOTICE.txt</span><br><span class="line">├── plugins             <span class="comment">-- 包含所有已安装插件</span></span><br><span class="line">└── README.asciidoc</span><br></pre></td></tr></table></figure></li>
<li><p>JVM 配置</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="attr"># 修改JVM - config/jvm.options</span></span><br><span class="line"><span class="attr">  -Xms和Xms 最小最大内存设置成一样</span></span><br><span class="line"><span class="attr">  -Xmx不超过机器内存的50</span><span class="meta">%</span></span><br></pre></td></tr></table></figure></li>
<li><p>Run</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">$ bin/elasticsearch</span><br><span class="line"><span class="symbol">~ took 11m 31s</span></span><br><span class="line"><span class="symbol">➜ curl http</span>:<span class="comment">//localhost:9200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a714f28827d5&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;docker-cluster&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;96jmRuNUQxqFsGeWJjIo6g&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;7.14.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;66b55ebfa59c92c15db3f69a335d500018b3331e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2021-08-26T09:01:05.390870785Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : false,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;8.9.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Plugin 机制对系统扩展</p>
<blockquote>
<p>Discovery Plugin<br>Analysis Plugin<br>Security Plugin<br>Management Plugin<br>Ingest Plugin<br>Mapper Plugin<br>Backup Plugin</p>
</blockquote>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">ubuntu <span class="keyword">in</span> ~ at k8s-node1 via 🐍 <span class="number">3.8</span><span class="number">.6</span></span><br><span class="line">➜ elasticsearch-plugin install analysis-icu  # 分词插件</span><br><span class="line">-&gt; Installing analysis-icu</span><br><span class="line">-&gt; Downloading analysis-icu <span class="keyword">from</span> elastic</span><br><span class="line">[=================================================] <span class="number">100</span>%</span><br><span class="line">-&gt; Installed analysis-icu</span><br><span class="line">-&gt; Please restart Elasticsearch to activate any plugins installed</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at k8s-node1 via 🐍 <span class="number">3.8</span><span class="number">.6</span> took <span class="number">23</span>s</span><br><span class="line">➜ elasticsearch-plugin list</span><br><span class="line">analysis-icu</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at k8s-node1 via 🐍 <span class="number">3.8</span><span class="number">.6</span></span><br><span class="line">➜ curl http:<span class="comment">//localhost:9200/_cat/plugins</span></span><br><span class="line">k8s-node1 analysis-icu <span class="number">7.14</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></li>
<li><p>多集群<br><a href="/misc/code/elasticsearch/docker-compose.yml">docker-compose.yml</a></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">➜ curl -X GET <span class="string">&quot;localhost:9200/_cat/nodes?v=true&amp;pretty&quot;</span></span><br><span class="line">ip         heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name</span><br><span class="line"><span class="number">172.24.0.2</span>           <span class="number">41</span>          <span class="number">97</span>  <span class="number">85</span>    <span class="number">4</span>.<span class="number">28</span>    <span class="number">1</span>.<span class="number">24</span>     <span class="number">0</span>.<span class="number">43</span> cdfhilmrstw -      es01</span><br><span class="line"><span class="number">172.24.0.3</span>           <span class="number">56</span>          <span class="number">97</span>  <span class="number">85</span>    <span class="number">4</span>.<span class="number">28</span>    <span class="number">1</span>.<span class="number">24</span>     <span class="number">0</span>.<span class="number">43</span> cdfhilmrstw -      es03</span><br><span class="line"><span class="number">172.24.0.4</span>           <span class="number">27</span>          <span class="number">97</span>  <span class="number">85</span>    <span class="number">4</span>.<span class="number">28</span>    <span class="number">1</span>.<span class="number">24</span>     <span class="number">0</span>.<span class="number">43</span> cdfhilmrstw *      es02</span><br></pre></td></tr></table></figure></li>
<li><p>Kibana:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">curl</span> http://localhost:<span class="number">5601</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Kibana Plugins 插件</span></span><br><span class="line"><span class="variable">$</span> kibana<span class="literal">-plugin</span> install</span><br><span class="line"><span class="variable">$</span> kibana<span class="literal">-plugin</span> list</span><br><span class="line"><span class="variable">$</span> kibana remove</span><br></pre></td></tr></table></figure></li>
<li><p>Logstash:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Elasticsearch-基本概念"><a href="#Elasticsearch-基本概念" class="headerlink" title="Elasticsearch 基本概念"></a>Elasticsearch 基本概念</h2><ul>
<li><p>文档 Document</p>
<blockquote>
<p>Elasticsearch 是面向文档的，文档是所有可搜索数据的最小单位<br>文档会被序列化成JSON格式，保存在Elasticsearch中<br>每个文档都有一个Unique ID</p>
</blockquote>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"># 文档元数据<span class="type">Metadata</span> - 标注文档的相关信息</span><br><span class="line">  _index - 文档所属的索引名</span><br><span class="line">  _<span class="keyword">type</span>  - 文档所属类型名</span><br><span class="line">  _id    - 文档唯一<span class="type">ID</span></span><br><span class="line">  _source - 文档原始<span class="type">JSON</span>数据</span><br><span class="line">  _version - 文档的版本信息 <span class="comment">-- 解决并发读写冲突</span></span><br><span class="line">  _score  - 相关性打分</span><br></pre></td></tr></table></figure></li>
<li><p>索引 Index</p>
<blockquote>
<p>将文档写入Elasticsearch的过程叫索引indexing</p>
</blockquote>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Mapping:</span> 定义包含的文档的字段名和字段类型</span><br><span class="line"><span class="symbol">Setting:</span> 定义不同数据分布</span><br><span class="line"><span class="symbol">Shard:</span> 索引中的数据分散在Shards上</span><br></pre></td></tr></table></figure></li>
<li><p>节点 Node</p>
<blockquote>
<p>节点是Elasticsearch 实例</p>
</blockquote>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">-E node.<span class="attr">name=</span>node1</span><br><span class="line">每个节点启动后，会分配一个UID，保存在data目录下</span><br><span class="line"></span><br><span class="line"><span class="comment"># Master-eligible nodes 和 Master Node</span></span><br><span class="line">  <span class="number">1</span>. 节点启动默认是一个<span class="literal">Master</span>-eligible节点, -E node.<span class="literal">master</span>:<span class="literal">false</span> 禁止</span><br><span class="line">  <span class="number">2</span>. <span class="literal">Master</span>-eligible节点可以参加选主流程，称为<span class="literal">Master</span>节点</span><br><span class="line">  <span class="number">3</span>. 每个节点都保存集群状态，只有<span class="literal">master</span>节点才能修改集群状态</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群状态 Cluster State</span></span><br><span class="line">  <span class="number">1</span>. 所有节点信息</span><br><span class="line">  <span class="number">2</span>. 所有的索引和相关Mapping 与 Setting信息</span><br><span class="line">  <span class="number">3</span>. 分片的路由信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data Node &amp; Coordinating Node</span></span><br><span class="line">  <span class="number">1</span>. Data <span class="keyword">Node</span><span class="title">: 可以保存数据的节点，保存分片数据</span></span><br><span class="line"><span class="title">  2</span>. Coordinating <span class="keyword">Node</span><span class="title">: 负责接受Client</span>请求，将请求分发到合适的节点，最终把结果汇集到一起</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hot &amp; Warm Node</span></span><br><span class="line"><span class="comment"># Machine Learning Node</span></span><br><span class="line"><span class="comment"># Tribe Node</span></span><br></pre></td></tr></table></figure></li>
<li><p>分片 Primary Shard &amp; Replica Shard</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#主分片: 解决数据水平扩展的问题</span></span><br><span class="line"><span class="bullet">  1.</span> 一个分片是一个运行的Lucene的实例</span><br><span class="line"><span class="bullet">  2.</span> 主分片在索引创建时指定，后续不允许修改,使用 Reindex修改</span><br><span class="line"></span><br><span class="line"><span class="section">#副本: 解决数据高可用的问题</span></span><br><span class="line"><span class="bullet">  1.</span> 副本分片数，可以动态调整</span><br><span class="line"><span class="bullet">  2.</span> 增加副本数，可以在一定程度上提高服务的可用性 (读取的吞吐)</span><br><span class="line"></span><br><span class="line"><span class="section">#分片设定-容量规划</span></span><br><span class="line"><span class="bullet">  1.</span> 分片数设置过小:</span><br><span class="line"><span class="code">    a. 后续无法增加节点实现水平扩展</span></span><br><span class="line"><span class="code">    b. 单个分片的数据量过大，导致数据重新分配耗时</span></span><br><span class="line"><span class="code">  2. 分片设置过大:</span></span><br><span class="line"><span class="code">    a. 影响搜索结果的相关性打分，影响统计结果准确性</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 查看集群状态</span></span><br><span class="line">  Green: 主分片和副片正常</span><br><span class="line">  Yellow: 主分片正常，副片不正常</span><br><span class="line">  Red: 主分片未能分配</span><br></pre></td></tr></table></figure></li>
<li><p>Elasticsearch vs 关系型数据库 抽象与类比</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">RDBMS</th>
<th align="left">Elasticsearch</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Table</td>
<td align="left">Index</td>
</tr>
<tr>
<td align="left">Row</td>
<td align="left">Document</td>
</tr>
<tr>
<td align="left">Column</td>
<td align="left">Field</td>
</tr>
<tr>
<td align="left">Schema</td>
<td align="left">Mapping</td>
</tr>
<tr>
<td align="left">SQL</td>
<td align="left">DSL</td>
</tr>
</tbody></table>
<ul>
<li><p>文档Document CRUD</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>create document. 自动生成_id</span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;trying out Kibana&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>create document. 指定Id, 如果ID已经存在，报错</span><br><span class="line">PUT users<span class="regexp">/_doc/</span><span class="number">1</span>?op_type=create</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;trying out Elasticsearch&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>create document. 指定Id, 如果ID已经存在，报错</span><br><span class="line">PUT users<span class="regexp">/_create/</span><span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;trying out Elasticsearch&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Get the document by ID</span><br><span class="line">GET users<span class="regexp">/_doc/</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Index</span><br><span class="line">PUT users<span class="regexp">/_doc/</span><span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;Mike&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Update 在原文档上增加字段</span><br><span class="line">POST users<span class="regexp">/_update/</span><span class="number">1</span>/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;doc&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;trying out Elasticsearch 3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><ul>
<li>Bulk API<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">1. 支持在一次API调用中，对不同的索引进行操作</span><br><span class="line">2. 支持四种类型操作:</span><br><span class="line">  <span class="keyword">Index</span></span><br><span class="line">  <span class="keyword">Create</span></span><br><span class="line">  <span class="keyword">Update</span></span><br><span class="line">  <span class="keyword">Delete</span></span><br><span class="line"><span class="number">3.</span> 操作单条操作失败，不会影响其他操作</span><br><span class="line"><span class="number">4.</span> 返回结果包括每一条操作的执行结果</span><br><span class="line"></span><br><span class="line">//Bulk操作</span><br><span class="line">POST _bulk</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;field1&quot;</span>: <span class="string">&quot;value1&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;test2&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;field1&quot;</span>: <span class="string">&quot;value3&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;update&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;test&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;doc&quot;</span>: &#123;<span class="string">&quot;field2&quot;</span>: <span class="string">&quot;value2&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>mget</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//mg</span>et -- 批量读取</span><br><span class="line"><span class="regexp">//</span>可以减少网络连接，提高性能</span><br><span class="line">GET _mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;docs&quot;</span>: [</span><br><span class="line">    &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;users&quot;</span>, <span class="string">&quot;_id&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;comment&quot;</span>, <span class="string">&quot;_id&quot;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Elasticsearch-原理"><a href="#Elasticsearch-原理" class="headerlink" title="Elasticsearch 原理"></a>Elasticsearch 原理</h2><ul>
<li>图书和搜索引擎类比</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">正排索引</th>
<th align="left">倒排索引</th>
</tr>
</thead>
<tbody><tr>
<td align="left">图书</td>
<td align="left">目录页</td>
<td align="left">索引页</td>
</tr>
<tr>
<td align="left">搜索引擎</td>
<td align="left">文档ID-&gt;文档内容和单词的关联</td>
<td align="left">单词到文档ID的关系</td>
</tr>
</tbody></table>
<ul>
<li><p>Elasticsearch 倒排索引</p>
<blockquote>
<p>Elasticsearch的JSON文档中每个字段，都有自己的倒排索引</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 单词词典(Term Dictionary)</span></span><br><span class="line"><span class="quote">&gt; 记录所有文档的单词，记录单词到倒排列表的关联关系</span></span><br><span class="line"><span class="quote">&gt; 通过B+树或哈希链表实现，满足高性能的插入与查询</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 倒排列表(Posting List)</span></span><br><span class="line"><span class="quote">&gt; 记录单词对应的文档结合</span></span><br><span class="line"><span class="bullet">  -</span> 倒排索引项(Posting)</span><br><span class="line"><span class="bullet">    -</span> 文档ID</span><br><span class="line"><span class="bullet">    -</span> 词频TF - 单词在文档出现的次数</span><br><span class="line"><span class="bullet">    -</span> 位置Position - 单词在文档中分词的位置，用于语句搜索 phrase query</span><br><span class="line"><span class="bullet">    -</span> 偏移Offset - 记录单词的开始结束位置，实现高量显示</span><br></pre></td></tr></table></figure></li>
<li><p>Elasticsearch 分词器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Analysis</span></span><br><span class="line">  - Analysis: 文本分析是把全文本转换一系列单词 term/token的过程</span><br><span class="line">  - Analysis是通过Analyzer实现</span><br><span class="line"></span><br><span class="line"><span class="comment"># Analyzer:</span></span><br><span class="line">  - Character Filters: 针对原始文本处理</span><br><span class="line">    - HTML strip - 去除html标签</span><br><span class="line">    - Mapping - 字符串替换</span><br><span class="line">    - Pattern repalce - 正则匹配替换</span><br><span class="line"></span><br><span class="line">  - Tokenizer: 将原始的文本按照一定的规则，切分为词 term or token</span><br><span class="line">    - whitespace</span><br><span class="line">    - standard</span><br><span class="line">    - uax_url_email</span><br><span class="line">    - pattern</span><br><span class="line">    - keyward</span><br><span class="line">    - path hierarchy</span><br><span class="line"></span><br><span class="line">  - Token Filter: 将切分的单词进行加工，小写，删除stopwords,增加同义词</span><br><span class="line">    - Lowercase</span><br><span class="line">    - stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elasticsearch内置分词器</span></span><br><span class="line"><span class="regexp">//</span>默认分词器 standard</span><br><span class="line"><span class="regexp">//</span> 按词切分，小写处理</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Simple Analyzer</span><br><span class="line"><span class="regexp">//</span> 按照非字母切分，非字母被去除</span><br><span class="line"><span class="regexp">//</span> 小写处理</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Whitespace Analyzer</span><br><span class="line"><span class="regexp">//</span> 按照空格切分</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;whitespace&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Stop Analyzer</span><br><span class="line"><span class="regexp">//</span> stop filter: 去除the, a, is 修饰性词</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;stop&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Keyward Analyzer</span><br><span class="line"><span class="regexp">//</span>不分词，直接将输入当输出</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>正则表达式进行分词</span><br><span class="line"><span class="regexp">//</span>默认非字符的符号进行分隔</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;pattern&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>english</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;english&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> analysis_icu</span><br><span class="line"><span class="regexp">//</span> elasticsearch-plugin install analysis_icu</span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;icu_analyzer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>:<span class="string">&quot;他说的确实在理&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Search API</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URI Search - 通过URI query实现搜索</span></span><br><span class="line">  q: 指定查询语句, 使用Query String Syntax</span><br><span class="line">  df: 默认字段, 不指定会对所有字段进行查询</span><br><span class="line">  Sort: 排序/from 和 size 用于分页</span><br><span class="line">  Profile: 查看查询是如何被执行</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>. 指定字段 vs. 泛查询</span><br><span class="line">  <span class="regexp">//</span>带profile 普通查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=<span class="number">2012</span>&amp;df=title</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>带profile 泛查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=<span class="number">2012</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>带profile 指定字段</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=title:<span class="number">2012</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>. Term vs. Phrase</span><br><span class="line">    <span class="comment"># Term: Beautiful Mind 等效于 Beautiful OR Mind</span></span><br><span class="line">    <span class="comment"># Phrase: &quot;Beautifuk Mind&quot; 等效于 Beautiful And Mind, 前后顺序保持一致</span></span><br><span class="line">  <span class="regexp">//</span>使用引号 查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=title:<span class="string">&quot;Beautiful Mind&quot;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>:<span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>使用引号 Mind 泛 查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=title:Beautiful Mind</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>:<span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>使用引号 Bool 泛 查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=title:(Beautiful Mind)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>:<span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>. 布尔操作</span><br><span class="line">    AND <span class="regexp">/ OR /</span> NOT 或者 &amp;&amp; <span class="regexp">/ || /</span> !</span><br><span class="line">    title:(matrix NOT reloaded)</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>. 分组</span><br><span class="line">    + 表示 must</span><br><span class="line">    - 表示 must_not</span><br><span class="line">    title:(+matrix -reloaded)</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>. 范围查询</span><br><span class="line">    []闭区间 &#123;&#125;开区间</span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>. 算数符号</span><br><span class="line">    year:&gt;<span class="number">2010</span></span><br><span class="line"></span><br><span class="line">  <span class="number">7</span>. 通配符查询(通配符查询效率低，占用内存大，不建议使用)</span><br><span class="line">    ? 代表<span class="number">1</span>个字符</span><br><span class="line">    * 代表<span class="number">0</span>或多个字符</span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>. 正则表达式</span><br><span class="line">    title:[bt]oy</span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>. 模糊匹配与近似查询</span><br><span class="line">    title:befutifl~<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Request Body Search</span></span><br><span class="line">  <span class="number">1</span>. 分页:</span><br><span class="line">    from, size</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>. sort:</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>. _source filtering: 如果_source没有存储，就只返回匹配的文档的元数据</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>. 脚本字段:</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>. 查询表达式 - Match</span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>. Match</span><br><span class="line"></span><br><span class="line"><span class="comment"># Page Rank算法</span></span><br><span class="line">  <span class="number">1</span>. 衡量相关性 Information Retrieval</span><br><span class="line">    a. Precision (查准率) - 尽可能返回较少的无关文档</span><br><span class="line">    b. Recall(查全率)     - 尽量返回较多的相关文档</span><br><span class="line">    c. Ranking            - 是否能够按照相关度进行排序</span><br></pre></td></tr></table></figure></li>
<li><p>Mapping</p>
<blockquote>
<p>类似数据库中的scehma定义</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 定义索引中的字段名称</span><br><span class="line"><span class="number">2.</span> 定义字段的数据类型</span><br><span class="line"><span class="keyword">Mapping</span> 把<span class="type">JSON</span>文档映射成Lucene所需要的扁平格式</span><br><span class="line">一个<span class="keyword">Mapping</span>属于一个索引的<span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"># 四种不同级别的<span class="keyword">Index</span> <span class="keyword">Options</span> - 控制倒排索引记录的内容</span><br><span class="line">  docs - 记录doc id</span><br><span class="line">  freqs - 记录 doc id 和 term frequencies</span><br><span class="line">  positions - 记录 doc id/term frequencies/term position</span><br><span class="line">  offsets - 记录 doc id/term frequencies/term position/<span class="type">character</span> offsets</span><br></pre></td></tr></table></figure></li>
<li><p>数据类型<br>JSON -&gt; Elasticsearch类型</p>
<table>
<thead>
<tr>
<th align="left">JSON类型</th>
<th align="left">Elasticsearch 类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">字符串</td>
<td align="left">匹配日期格式 -&gt; Date</td>
</tr>
<tr>
<td align="left">布尔值</td>
<td align="left">boolean</td>
</tr>
<tr>
<td align="left">浮点数</td>
<td align="left">float</td>
</tr>
<tr>
<td align="left">整数</td>
<td align="left">long</td>
</tr>
<tr>
<td align="left">对象</td>
<td align="left">Object</td>
</tr>
<tr>
<td align="left">数组</td>
<td align="left">由第一个非空数值的类型所决定</td>
</tr>
<tr>
<td align="left">空值</td>
<td align="left">忽略</td>
</tr>
</tbody></table>
</li>
</ul>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 简单类型:</span></span><br><span class="line"><span class="bullet">  1.</span> Text/Keyword</span><br><span class="line"><span class="bullet">  2.</span> Date</span><br><span class="line"><span class="bullet">  3.</span> Integer / Floating</span><br><span class="line"><span class="bullet">  4.</span> Boolean</span><br><span class="line"><span class="bullet">  5.</span> IPv4 &amp; IPv6</span><br><span class="line"></span><br><span class="line"><span class="section"># 复杂类型 - 对象和嵌套对象</span></span><br><span class="line">  对象类型/嵌套类型</span><br><span class="line"></span><br><span class="line"><span class="section"># 特殊类型</span></span><br><span class="line">  geo<span class="emphasis">_point &amp; geo_</span>shape / percolator</span><br></pre></td></tr></table></figure>

<h2 id="Elasticsearch-聚合-Aggregation"><a href="#Elasticsearch-聚合-Aggregation" class="headerlink" title="Elasticsearch 聚合 (Aggregation)"></a>Elasticsearch 聚合 (Aggregation)</h2><blockquote>
<p>Elasticsearch 除了搜索以外还提供针对ES数据进行统计分析</p>
</blockquote>
<ul>
<li>集合分类<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Bucket Aggregation: 满足特定条件的文档集合</span><br><span class="line">  <span class="built_in">group</span> <span class="keyword">by</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Metric Aggregation: 数学运算，对文档字段统计分析</span><br><span class="line">  <span class="built_in">min</span>/<span class="built_in">max</span>/<span class="built_in">sum</span>/<span class="built_in">avg</span>/cardinality</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> Pipeline Aggregation: 对聚合结果进行二次聚合</span><br><span class="line"><span class="number">4.</span> Matrix Aggregation: 支持多个字段的操作并提供结果矩阵</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Elasticsearch-分布式结构"><a href="#Elasticsearch-分布式结构" class="headerlink" title="Elasticsearch 分布式结构"></a>Elasticsearch 分布式结构</h2><ul>
<li><p>高可用</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 服务可用性 - 允许有节点停止服务</span><br><span class="line"><span class="bullet">2.</span> 数据可用性 - 部分节点丢失，不会丢失数据</span><br></pre></td></tr></table></figure></li>
<li><p>可扩展性</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 请求量提升/数据不断增加(将数据分布到所有节点上)</span><br></pre></td></tr></table></figure></li>
<li><p>Elasticsearch分布式架构</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 不同的集群通过不同的名字区分，-E <span class="keyword">cluster</span>.name=geektime</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ELK-大数据分析"><a href="#ELK-大数据分析" class="headerlink" title="ELK 大数据分析"></a>ELK 大数据分析</h2>]]></content>
      <tags>
        <tag>搜索引擎</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>golang pkg Tips &amp; Tracks</title>
    <url>/2021/09/03/golang-pkg-Tips-Tracks/</url>
    <content><![CDATA[<h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><ul>
<li>Goals<blockquote>
<p>The efficientcy of a statically-typed compiled language with the ease of programming of a dynamic language.<br>Safety: type-safe and memory-safe<br>Good support for concurrency and communication.<br>Efficient, latency-free garbage collection.<br>High-speed compilation.</p>
</blockquote>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>Design principles</p>
<blockquote>
<p>Keep concept orthogonal(正交).<br>Keep the grammar regular and simple.<br>Reduce typing. Let the language work things out.<br>Reduce typing. Keep the type system clear.</p>
</blockquote>
</li>
<li><p>The Big Picture</p>
<blockquote>
<p>Fundamentals:</p>
</blockquote>
<ul>
<li>Clean, concise syntax.</li>
<li>Lightweight type system.</li>
<li>No implicit conversions: keep things explicit.</li>
<li>Untyped unsized constants:</li>
<li>Strict separation of interface and implementation.<blockquote>
<p>Run-time:</p>
</blockquote>
</li>
<li>Garbage collection.</li>
<li>Strings, maps, communication channels</li>
<li>Concurrency.<blockquote>
<p>Package model:<br>Explicit dependencies to enable faster builds.</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="Golang-Frequently-Asked-Questions-FAQ"><a href="#Golang-Frequently-Asked-Questions-FAQ" class="headerlink" title="Golang Frequently Asked Questions (FAQ)"></a>Golang Frequently Asked Questions (FAQ)</h2><ul>
<li><p>Map access is unsafe only when updates are occurring.</p>
</li>
<li><p>How can I gurantee my type satisfies an interface?</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">    Say(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">Say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ask the compiler to check that the type T implements the interface I by</span></span><br><span class="line"><span class="keyword">var</span> _ I = (*T)(<span class="literal">nil</span>) <span class="comment">// Verify that *T implements I.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := T&#123;&#125;</span><br><span class="line">    t.Say(<span class="string">&quot;Say Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Should I define methods on values or pointers?</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">func (s *MyStruct) pointerMethod() &#123;&#125;   // <span class="keyword">method</span> <span class="keyword">on</span> pointer</span><br><span class="line">func (s MyStruct) valueMethod() &#123;&#125;      // <span class="keyword">method</span> <span class="keyword">on</span> <span class="keyword">value</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">When</span> defining a <span class="keyword">method</span> <span class="keyword">on</span> a <span class="keyword">type</span>, the receiver behaves exactly <span class="keyword">as</span> <span class="keyword">if</span> it were an argument <span class="keyword">to</span> the <span class="keyword">method</span>. Whether <span class="keyword">to</span> define the receiver <span class="keyword">as</span> a <span class="keyword">value</span> <span class="keyword">or</span> <span class="keyword">as</span> a pointer <span class="keyword">is</span> the same question, <span class="keyword">then</span>, <span class="keyword">as</span> whether a <span class="keyword">function</span> argument should be a <span class="keyword">value</span> <span class="keyword">or</span> poiner.</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> First, <span class="keyword">and</span> most important, does the <span class="keyword">method</span> need <span class="keyword">to</span> modify the receiver?</span><br><span class="line"><span class="number">2.</span> Second <span class="keyword">is</span> the consideration <span class="keyword">of</span> efficiency. <span class="keyword">If</span> the receiver <span class="keyword">is</span> <span class="keyword">large</span>, a big struct <span class="keyword">for</span> instance, it will be much cheaper <span class="keyword">to</span> use a pointer receiver.</span><br></pre></td></tr></table></figure></li>
<li><p>What operations are atomic? What about mutexes?</p>
<blockquote>
<p>Do not communicate by sharing memory. Instead, share memory by communicating.</p>
</blockquote>
</li>
<li><p>How can I control the number of CPUs?</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">The runtime can allocate more threads than the value of GOMAXPROCS to service multiple outstanding I/O requests. GOMAXPROCS only affects how many goroutines can actually<span class="built_in"> execute </span>at once; arbitrarily more may be blocked in<span class="keyword"> system</span> calls.</span><br></pre></td></tr></table></figure></li>
<li><p>Who do I write a unit test?</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Create a <span class="keyword">new</span> file ending <span class="keyword">in</span> <span class="module-access"><span class="module"><span class="identifier">_test</span>.</span></span>go <span class="keyword">in</span> the same directory <span class="keyword">as</span> your package sources. Inside that file, import <span class="string">&quot;testing&quot;</span> <span class="keyword">and</span> write functions <span class="keyword">of</span> the form</span><br><span class="line"></span><br><span class="line">func <span class="constructor">TestFoo(<span class="params">t</span> <span class="operator">*</span><span class="params">testing</span>.T)</span> &#123;</span><br><span class="line">  …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>What compiler technology is used to build the compilers?</p>
<blockquote>
<p>The default compiler, gc, was originally written in C, but since the Go 1.5 release the compiler has been a Go program.</p>
</blockquote>
</li>
<li><p>Why do garbage collection? Won’t it be too expensive?</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">The current <span class="keyword">implementation</span> <span class="keyword">is</span> a mark-and-sweep collector.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Golang-Tips-amp-Tracks"><a href="#Golang-Tips-amp-Tracks" class="headerlink" title="Golang Tips &amp; Tracks"></a>Golang Tips &amp; Tracks</h2><ul>
<li><strong>负载均衡算法对比</strong><blockquote>
<p>负载均衡最重要的就是均衡</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">normal_shuffle</span><span class="params">(slice []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(slice); i++ &#123;</span><br><span class="line">    a := rand.Intn(<span class="built_in">len</span>(slice))</span><br><span class="line">    b := rand.Intn(<span class="built_in">len</span>(slice))</span><br><span class="line">    slice[a], slice[b] = slice[b], slice[a]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shuffle</span><span class="params">(indexes []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="built_in">len</span>(indexes); i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">    lastIdx := i - <span class="number">1</span></span><br><span class="line">    idx := rand.Intn(i)</span><br><span class="line">    indexes[lastIdx], indexes[idx] = indexes[idx], indexes[lastIdx]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> cnt1 = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">var</span> sl = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">    normal_shuffle(sl)</span><br><span class="line">    cnt1[sl[<span class="number">0</span>]]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> cnt2 = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">var</span> sl = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">    shuffle(sl)</span><br><span class="line">    cnt2[sl[<span class="number">0</span>]]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;normal shuffle: &quot;</span>, cnt1)</span><br><span class="line">  fmt.Println(<span class="string">&quot;fisher yates  : &quot;</span>, cnt2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chyi/<span class="keyword">go</span>-awesome-prj/shuffle via 🐹 v1<span class="number">.17</span> took <span class="number">38</span>s</span><br><span class="line">➜ <span class="keyword">go</span> run main.<span class="keyword">go</span></span><br><span class="line">normal shuffle:  <span class="keyword">map</span>[<span class="number">0</span>:<span class="number">224558</span> <span class="number">1</span>:<span class="number">128887</span> <span class="number">2</span>:<span class="number">129201</span> <span class="number">3</span>:<span class="number">129493</span> <span class="number">4</span>:<span class="number">129487</span> <span class="number">5</span>:<span class="number">129202</span> <span class="number">6</span>:<span class="number">129172</span>]</span><br><span class="line">fisher yates  :  <span class="keyword">map</span>[<span class="number">0</span>:<span class="number">142974</span> <span class="number">1</span>:<span class="number">143116</span> <span class="number">2</span>:<span class="number">142768</span> <span class="number">3</span>:<span class="number">142660</span> <span class="number">4</span>:<span class="number">142930</span> <span class="number">5</span>:<span class="number">142505</span> <span class="number">6</span>:<span class="number">143047</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Middleware Tips &amp; Tracks</title>
    <url>/2021/09/06/Middleware-Tips-Tracks/</url>
    <content><![CDATA[<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><blockquote>
<p>面对技术选型时，就是一个关于如何取舍的问题，不要不经过思考就觉得那个方案好，那个方案不好。需要根据具体场景分析<br>技术选型不只是技术问题，还与团队、管理、组织结构有关</p>
</blockquote>
<ul>
<li>业务功能角度</li>
<li>技术资源角度<blockquote>
<p>所处的环境、技术资源能否匹配这些技术方案</p>
</blockquote>
</li>
</ul>
<span id="more"></span>

<h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"># 专业消息中间件需要满足:</span><br><span class="line">  1. 消息不丢失</span><br><span class="line">    a. 生产者会不会丢消息?</span><br><span class="line">      -<span class="ruby"> 消息没发送出去: 网络故障或者其他原因导致发布失败，中间件直接返回失败</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 不确定是否发送成功: 网络问题导致发布超时，可能数据已发送成功，但是读取响应结果超时</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line">      生产者设置最大重试次数，超过上限依旧失败，需要记录日志报警处理, 生产者会不会丢消息，取决于生产者对于异常情况的处理是否合理, 保证消息不丢，宁可重发，也不能丢弃</span><br><span class="line">    b. 消费者会不会丢消息?</span><br><span class="line">      -<span class="ruby"> 消费者在处理完消息后，必须告知队列中间件，队列中间件才会把标记已处理，否则仍旧把这些数据发给消费者</span></span><br><span class="line"><span class="ruby"></span>    c. 队列中间件会不会丢消息?</span><br><span class="line">      -<span class="ruby"> 生产者在发布消息时，队列中间件通常会写多个节点，以此保证消息的完整性，即便其中一个节点挂，也能保证集群数据不丢失</span></span><br><span class="line"><span class="ruby"></span>  2. 消息可堆积</span><br></pre></td></tr></table></figure>
<ul>
<li>Redis 作为消息中间件<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> Redis本身可能会丢数据</span><br><span class="line"><span class="bullet">2.</span> 面对消息积压，Redis内存资源紧张</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>中间件</tag>
        <tag>Middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>CS - Time</title>
    <url>/2021/09/06/CS-Time/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Time-时间"><a href="#Time-时间" class="headerlink" title="Time 时间"></a>Time 时间</h2><ul>
<li><p>Universal Time: 世界时</p>
<blockquote>
<p>依靠观测天文现象来测量时间，基于地球自转规律</p>
</blockquote>
</li>
<li><p>International Atomic Time: 国际原子时</p>
<blockquote>
<p>以微观时间铯原子的震荡频率为基准，制造原子钟</p>
</blockquote>
</li>
<li><p>Coordinated Universal Time: 协调世界时</p>
<blockquote>
<p>根据世间时和原子时，最终确立新的时间标准，定义成为全球的时间标准</p>
</blockquote>
</li>
<li><p>NTP Network Time Protocol 同步时间</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. NTP如何同步时间</span><br><span class="line">  &gt; 假设网络来回路径对称，并且延迟相同</span><br><span class="line">  网络延时 = (t4 - t1) - (t3 - t2)</span><br><span class="line">  时间差 = t2 - t1 - 网络延迟<span class="regexp">/2 = ((t2-t1) + (t3-t4))/</span><span class="number">2</span></span><br><span class="line"><span class="number">2</span>. 同步时间时，对正在运行的程序有没有影响</span><br><span class="line">  <span class="comment"># 墙上时钟: 世界协调时UTC，校准时间后，可能发生回拨</span></span><br><span class="line">  <span class="comment"># 单调时钟: 计算机自启动以后的纳秒数，不会回拨</span></span><br><span class="line"></span><br><span class="line">NTP校准时间提供<span class="number">2</span>中方式:</span><br><span class="line">  <span class="number">1</span>. ntpdate: 一切已服务器端时间为准，强制修改本机时间</span><br><span class="line">  <span class="number">2</span>. ntpd: 把时间差均摊到每次小的调整上 -- 避免发生倒流</span><br></pre></td></tr></table></figure></li>
</ul>
<p>  -</p>
]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
</search>
