<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker Tips &amp; Tricks</title>
    <url>/2021/09/01/docker/</url>
    <content><![CDATA[<h2 id="Docker-Info"><a href="#Docker-Info" class="headerlink" title="Docker  Info"></a>Docker  Info</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个“边界”</span><br><span class="line"></span><br><span class="line">Cgroups技术是用来制造约束的主要手段</span><br><span class="line">Namespace技术则是用来修改进程试图的主要方法</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="Docker-Tips"><a href="#Docker-Tips" class="headerlink" title="Docker Tips"></a>Docker Tips</h2><ul>
<li><p><strong>Docker Tip #1</strong>: Docker 容器进程</p>
<blockquote>
<p>A Docker container is just a process/service that runs directly on your machine. It is slightly different than a regular process because the Docker daemon along with the linux kernel do a few things(<strong>Cgroups</strong>、<strong>Namespace</strong>) to ensure it runs in total isolation<br>Docker容器是一种特殊的进程,和虚拟机差别很大</p>
</blockquote>
</li>
<li><p><strong>Docker Tip #2</strong>: COPY vs. ADD in a Dockerfile</p>
<blockquote>
<p>COPY 和 ADD 功能很相似，都可以从指定目录拷贝数据到Docker镜像中.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># COPY 和 ADD 区别</span><br><span class="line">1. COPY: 只能从本机文件或目录中拷贝到镜像中</span><br><span class="line">2. ADD: 不仅可以从本机文件或目录中拷贝，还可以使用URL引入外部的文件地址拷贝到镜像中</span><br><span class="line">  $ ADD rootfs.tar.gz /</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #3</strong>: 追加 Docker Run 指令减少镜像大小</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Before Dockerfile -- 新增三个层lager</span><br><span class="line">RUN wget -O myfile.tar.gz http://example.com/myfile.tar.gz</span><br><span class="line">RUN tar -xvf myfile.tar.gz -C /usr/src/myapp</span><br><span class="line">RUN rm myfile.tar.gz</span><br><span class="line"></span><br><span class="line"># After Dockerfile -- 新增一个层layer</span><br><span class="line">RUN wget -O myfile.tar.gz http://example.com/myfile.tar.gz \</span><br><span class="line">  &amp;&amp; tar -xvf myfile.tar.gz -C /usr/src/myapp \</span><br><span class="line">  &amp;&amp; rm myfile.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #4</strong>: Docker Base镜像OS和Host OS没有关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker Image OS: 定义在Dockerfile文件的Base镜像的系统</span><br><span class="line">Host OS: 运行Docker image的环境</span><br><span class="line">You can use whatever base image you want for your Docker images.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #5</strong>: 使用相同Base镜像的好处</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You could use a different base OS for each Docker image, but then you lose out on the ability to cache it across all of your images</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #6</strong>: RUN vs. CMD in a Dockerfile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RUN: 在镜像内执行命令，这些指令仅仅在构建build镜像中执行一次，并且将构建结果写入新larger层中.</span><br><span class="line">CMD: 在启动容器时定义默认的运行的指令, 这种动作发生运行时run-time</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #7</strong>: Base Docker Image Alpine</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Why Alpine?</span><br><span class="line">&gt; Small. Simple. Secure. Alpine Linux is a security-oriented, lightweight Linux distribution based on musl libc and busybox.</span><br><span class="line">&gt; Alpine is about 30x smaller than Debian.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #8</strong>: Project Structure with Multiple Dockerfiles and Docker Compose</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu in ~/chyi/micro-services at 3BPlus on 🐳 v20.10.8</span><br><span class="line">➜ tree -L 2</span><br><span class="line">.</span><br><span class="line">├── auth</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── billing</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── contact</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── user</span><br><span class="line">    └── Dockerfile</span><br><span class="line"></span><br><span class="line">4 directories, 5 files</span><br><span class="line"></span><br><span class="line">The docker-compose.yaml</span><br><span class="line">ubuntu in ~/chyi/micro-services at 3BPlus on 🐳 v20.10.8</span><br><span class="line">➜ cat docker-compose.yml</span><br><span class="line">version: &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">    auth:</span><br><span class="line">        build: &#x27;./auth&#x27;</span><br><span class="line">    billing:</span><br><span class="line">        build: &#x27;./billing&#x27;</span><br><span class="line">    contact:</span><br><span class="line">        build: &#x27;./contact&#x27;</span><br><span class="line">    user:</span><br><span class="line">        build: &#x27;./user&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #9</strong>: 使用Volumes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker-compose.yaml</span><br><span class="line">services:</span><br><span class="line">  app:</span><br><span class="line">    # Mount the crrent directoy into `/app` inside the running container.</span><br><span class="line">    volumes:</span><br><span class="line">      - &#x27;.:/app&#x27;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #10</strong>: Published Ports</p>
<blockquote>
<p>Creates a firwaall rule which maps a container port to a port on the Docker host to the outside world.</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Flag value</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-p 8080:80</td>
<td align="left">Map TCP port 80 in the container to port 8080 on the Docker host.</td>
</tr>
<tr>
<td align="left">-p 192.168.1.100:8080:80</td>
<td align="left">Map TCP port 80 in the container to port 8080 on the Docker host for connections to host IP 192.168.1.100.</td>
</tr>
<tr>
<td align="left">-p 8080:80/udp</td>
<td align="left">Map UDP port 80 in the container to port 8080 on the Docker host.</td>
</tr>
<tr>
<td align="left">-p 8080:80/tcp -p 8080:80/udp</td>
<td align="left">Map TCP port 80 in the container to TCP port 8080 on the Docker host, and map UDP port 80 in the container to UDP port 8080 on the Docker host.</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>Docker Tip #11</strong>: dockerignore file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.dockerignore: ignore certain files and folders from your Docker images</span><br><span class="line">  .git</span><br><span class="line">  .dockerignore</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #12</strong>: Manage Docker without sudo on Linux</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Add a docker group and then add your user to it:</span><br><span class="line">$ sudo groupadd docker</span><br><span class="line">$ docker usermod -aG docker $USER</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #13</strong>: Measure Docker Container’s Resources</p>
<blockquote>
<p>How much resources containers are using</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker stats</span><br><span class="line">CONTAINER ID   NAME                                                                                         CPU %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O         PIDS</span><br><span class="line">298d90f942e1   k8s_POD_kafka-zookeeper-0_default_a243d677-101b-493b-a076-d94f46785f22_0                     0.00%     724KiB / 3.704GiB     0.02%     0B / 0B     0B / 0B           1</span><br><span class="line">1d92a13e4a6f   k8s_POD_kafka-0_default_f7374645-9904-436c-bc8d-43ed415833c1_0                               0.00%     872KiB / 3.704GiB     0.02%     0B / 0B     0B / 0B           1</span><br><span class="line">b638c1bbd855   k8s_POD_postgres-postgresql-0_infrastructure_d9067ee1-6874-4018-a008-09362ad9330d_16         0.00%     868KiB / 3.704GiB     0.02%     0B / 0B     0B / 0B           1</span><br><span class="line">0fdc76799b4e   k8s_kube-flannel_kube-flannel-ds-nk6tj_kube-system_0a186e7a-c0d7-4282-9f5d-65ee20d0e13a_12   0.07%     15.4MiB / 50MiB       30.80%    0B / 0B     33.1MB / 0B       11</span><br><span class="line">4c3705247efa   k8s_kube-proxy_kube-proxy-xwfvl_kube-system_f46216cb-d018-4d82-b510-9be5e01cefca_12          0.00%     23.36MiB / 3.704GiB   0.62%     0B / 0B     43.7MB / 12.3kB   8</span><br><span class="line">16d5db1e7447   k8s_POD_kube-proxy-xwfvl_kube-system_f46216cb-d018-4d82-b510-9be5e01cefca_13                 0.00%     1.996MiB / 3.704GiB   0.05%     0B / 0B     487kB / 0B        1</span><br><span class="line">496aacf5fddf   k8s_POD_kube-flannel-ds-nk6tj_kube-system_0a186e7a-c0d7-4282-9f5d-65ee20d0e13a_13            0.00%     768KiB / 3.704GiB     0.02%     0B / 0B     0B / 0B           1</span><br><span class="line">1e328afeb116   dapr_zipkin                                                                                  0.17%     250.2MiB / 3.704GiB   6.60%     18MB / 0B   60MB / 0B         55</span><br><span class="line">27872f88cae3   dapr_placement                                                                               0.11%     5.992MiB / 3.704GiB   0.16%     18MB / 0B   13.6MB / 0B       10</span><br><span class="line">27c1f6daa81c   dapr_redis                                                                                   0.35%     5.633MiB / 3.704GiB   0.15%     18MB / 0B   10.7MB / 0B       5</span><br><span class="line"></span><br><span class="line">$ docker stats --format &quot;table &#123;&#123;.Container&#125;&#125;\t&#123;&#123;.CPUPerc&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;&quot;</span><br><span class="line">CONTAINER      CPU %     MEM USAGE / LIMIT</span><br><span class="line">298d90f942e1   0.00%     724KiB / 3.704GiB</span><br><span class="line">1d92a13e4a6f   0.00%     872KiB / 3.704GiB</span><br><span class="line">b638c1bbd855   0.00%     868KiB / 3.704GiB</span><br><span class="line">0fdc76799b4e   2.37%     15.42MiB / 50MiB</span><br><span class="line">4c3705247efa   0.00%     23.36MiB / 3.704GiB</span><br><span class="line">16d5db1e7447   0.00%     1.996MiB / 3.704GiB</span><br><span class="line">496aacf5fddf   0.00%     768KiB / 3.704GiB</span><br><span class="line">1e328afeb116   0.21%     250.2MiB / 3.704GiB</span><br><span class="line">27872f88cae3   0.12%     5.992MiB / 3.704GiB</span><br><span class="line">27c1f6daa81c   0.34%     5.633MiB / 3.704GiB</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #14</strong>: Docker Compose vs Docker Stack</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Docker Compose: is an official tool that helps you manage your Docker containers by letting you define everything through a docker-compose.yml file.</span><br><span class="line"></span><br><span class="line"># docker stack: is a command that&#x27;s embedded into the Docker CLI. Lets you manage a cluster of Docker containers through Docker Swarm.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #15</strong>: Metadata Docker Images with Labels</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Dockerfile example of adding 2 labels with 1 LABEL instruction:</span><br><span class="line">LABEL &lt;key&gt;=&lt;value&gt;</span><br><span class="line">LABEL version=&quot;1.0&quot; maintainer=&quot;chyi &lt;nick.chyi@gmail.com&gt;&quot;</span><br><span class="line"></span><br><span class="line"># Docker build example to add dynamic labels to your Docker images:</span><br><span class="line">$ docker build . --label &quot;version=1.0&quot; --label &quot;maintaner=chyi &lt;nick.chyi@gmail.com&gt;&quot;</span><br><span class="line"></span><br><span class="line"># docker inspect images</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #16</strong>: Named Volumes vs Path Based Volumes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Named volumes</span><br><span class="line">  postgres:/var/lib/postgresql/data</span><br><span class="line"></span><br><span class="line">  docker-compose automatically create the postgres volume, if not you could running __$ docker volume create postgres__.</span><br><span class="line">  On Linux, the volume will get saved to /var/lib/docker/volumes/postgres/_data</span><br><span class="line"></span><br><span class="line"># Path based volumes</span><br><span class="line">  ./postgres:/var/lib/postgresql/data</span><br><span class="line"></span><br><span class="line">  postgres/ directory would get created in the current directory on the Docker host.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #17</strong>: The Volume or Mount Flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Setting up a volume the old way with docker run:</span><br><span class="line">$ docker container run … -v &quot;$(pwd)&quot;:/myapp</span><br><span class="line"></span><br><span class="line"># Setting up the same volumes using the mount flag with docker run:</span><br><span class="line">$ docker container run … --mount type=bind,source=&quot;$(pwd)&quot;,target=/myapp</span><br><span class="line"></span><br><span class="line"># Docker compose</span><br><span class="line">volumes:</span><br><span class="line">  - type: &quot;bind&quot;</span><br><span class="line">    source: &quot;.&quot;</span><br><span class="line">    target: &quot;/myapp&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #18</strong>: Connect to a Service Running on Docker Host</p>
<blockquote>
<p>Implementation of connecting to Docker host over a custom network with a static IP address.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Create a custom bridge Docker network</span><br><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ docker network create -d bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 mynet</span><br><span class="line">0330b879fcc8fb23eeb092cb66fd86f1796e7f0abe37df4978903cf8fd07217b</span><br><span class="line"></span><br><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ ifconfig</span><br><span class="line">br-0330b879fcc8: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.0.1  netmask 255.255.255.0  broadcast 192.168.0.255</span><br><span class="line">        ether 02:42:16:0c:c0:51  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line"># Start the Alpine container and drop into a Shell prompt.</span><br><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ docker container run --rm -it alpine sh</span><br><span class="line"></span><br><span class="line"># Install the ping utility.</span><br><span class="line">/ # apk update &amp;&amp; apk add iputils</span><br><span class="line">fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/main/aarch64/APKINDEX.tar.gz</span><br><span class="line">fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/community/aarch64/APKINDEX.tar.gz</span><br><span class="line">v3.14.2-5-gd4163d4c6c [https://dl-cdn.alpinelinux.org/alpine/v3.14/main]</span><br><span class="line">v3.14.2-4-ga15b4dc067 [https://dl-cdn.alpinelinux.org/alpine/v3.14/community]</span><br><span class="line">OK: 14810 distinct packages available</span><br><span class="line">(1/2) Installing libcap (2.50-r0)</span><br><span class="line">(2/2) Installing iputils (20210202-r0)</span><br><span class="line">Executing busybox-1.33.1-r3.trigger</span><br><span class="line">OK: 6 MiB in 16 packages</span><br><span class="line"></span><br><span class="line"># Ping the custom IP address we set up.</span><br><span class="line">/ # ping 192.168.0.1</span><br><span class="line"></span><br><span class="line"># You should see this output (hit CTRL+C to stop it)</span><br><span class="line">PING 192.168.0.1 (192.168.0.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.1: icmp_seq=1 ttl=64 time=0.336 ms</span><br><span class="line">64 bytes from 192.168.0.1: icmp_seq=2 ttl=64 time=0.293 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 1013ms</span><br><span class="line">rtt min/avg/max/mdev = 0.293/0.314/0.336/0.021 ms</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #19</strong>: Show Total Disk Space Used by Docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          3         2         203.9MB   198.5MB (97%)</span><br><span class="line">Containers      3         1         2.524MB   0B (0%)</span><br><span class="line">Local Volumes   1         0         0B        0B</span><br><span class="line">Build Cache     0         0         0B        0B</span><br><span class="line"></span><br><span class="line"># -v flag (verbose) - will show the unique image size for each image</span><br><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ docker system df -v</span><br><span class="line">Images space usage:</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED       SIZE      SHARED SIZE   UNIQUE SIZE   CONTAINERS</span><br><span class="line">alpine                latest    bb3de5531c18   4 days ago    5.337MB   0B            5.337MB       2</span><br><span class="line">hello-world           latest    bc11b176a293   7 weeks ago   9.136kB   0B            9.136kB       1</span><br><span class="line">bahamat/unix-1st-ed   latest    37aa142d2113   5 years ago   198.5MB   0B            198.5MB       0</span><br><span class="line"></span><br><span class="line">Containers space usage:</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND            LOCAL VOLUMES   SIZE      CREATED       STATUS                   NAMES</span><br><span class="line">9023720cdee7   alpine        &quot;sh&quot;               0               2.52MB    5 hours ago   Up 5 hours               upbeat_kepler</span><br><span class="line">9e272ab58362   alpine        &quot;sh -c &#x27;exit 1&#x27;&quot;   0               0B        6 hours ago   Exited (1) 6 hours ago   naughty_blackburn</span><br><span class="line">d95cc7e19d43   hello-world   &quot;/hello&quot;           0               0B        7 weeks ago   Exited (0) 7 weeks ago   nifty_hellman</span><br><span class="line"></span><br><span class="line">Local Volumes space usage:</span><br><span class="line"></span><br><span class="line">VOLUME NAME   LINKS     SIZE</span><br><span class="line">user_my-db    0         0B</span><br><span class="line"></span><br><span class="line">Build cache usage: 0B</span><br><span class="line"></span><br><span class="line">CACHE ID   CACHE TYPE   SIZE      CREATED   LAST USED   USAGE     SHARED</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #20</strong>: Docker Compose Stop vs Down</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># docker-compose stop</span><br><span class="line">&gt; stop container, but it won&#x27;t remove them</span><br><span class="line"></span><br><span class="line"># docker-compose down</span><br><span class="line">&gt; stop container, removes the stopped containers as well as any networks that were created.</span><br><span class="line"></span><br><span class="line"># docker-compose down -v</span><br><span class="line">&gt; add remove all volumes too.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #21</strong>: Using WORKDIR to Cleanup Dockerfile</p>
<blockquote>
<p>The WORKDIR instruction allows you to set a specific path in one spot, and then most instructions (RUN and COPY to name a few) will execute in the context of thet WORDIR.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Have-a-Fun"><a href="#Have-a-Fun" class="headerlink" title="Have a Fun"></a>Have a Fun</h2><ul>
<li>Run the First Edition of Unix (1972) with Docker<blockquote>
<p>Run a PDP-11 simulator through Docker to interact with Unix as it was back in 1972</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker run --rm -it bahamat/unix-1st-ed</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next-gitalk</title>
    <url>/2021/09/01/hexo-next-gitalk/</url>
    <content><![CDATA[<h3 id="站点搭建过程"><a href="#站点搭建过程" class="headerlink" title="站点搭建过程"></a>站点搭建过程</h3><ul>
<li><a href="https://hexo.io/zh-cn/">hexo</a> : 快速、简洁且高校的博客框架</li>
<li><a href="https://github.com/next-theme/hexo-theme-next/blob/master/docs/zh-CN/README.md">next</a> : Hexo主题</li>
<li><a href="https://github.com/gitalk/gitalk">gitalk</a> : 依靠GitHub issue的评论系统</li>
</ul>
<span id="more"></span>

<h3 id="Settings-amp-Tips"><a href="#Settings-amp-Tips" class="headerlink" title="Settings &amp; Tips"></a>Settings &amp; Tips</h3><ul>
<li><p><strong>Show descripion</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改themes/next/_config.yml</span><br><span class="line">excerpt_description: true</span><br><span class="line"></span><br><span class="line"># 文章截断</span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>字数统计</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装插件 hexo-symbols-count-time</span><br><span class="line">$ npm install hexo-symbols-count-time</span><br><span class="line"></span><br><span class="line"># 修改hexo配置文件_config.yml</span><br><span class="line">  # Symbols count and time to read of articles for Hexo.</span><br><span class="line">  symbols_count_time:</span><br><span class="line">      symbols: true</span><br><span class="line">      time: true</span><br><span class="line">      total_symbols: true</span><br><span class="line">      total_time: true</span><br><span class="line"></span><br><span class="line"># 修改Next配置文件</span><br><span class="line">  # Post wordcount display settings</span><br><span class="line">  # Dependencies: https://github.com/next-theme/hexo-word-counter</span><br><span class="line">  symbols_count_time:</span><br><span class="line">    separated_meta: true</span><br><span class="line">    item_text_post: true</span><br><span class="line">    item_text_total: false</span><br><span class="line">    awl: 4</span><br><span class="line">    wpm: 275</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>micro-services</title>
    <url>/2021/09/01/micro-services/</url>
    <content><![CDATA[<p>介绍微服务架构设计</p>
<span id="more"></span>

<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机科学</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>DDD</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>echo-go-web-framework</title>
    <url>/2021/09/02/echo-go-web-framework/</url>
    <content><![CDATA[<h1 id="Echo"><a href="#Echo" class="headerlink" title="Echo"></a>Echo</h1><blockquote>
<p>高性能、可扩展、精简的Go Web框架</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">➜ go run main.go</span><br><span class="line"></span><br><span class="line">   ____    __</span><br><span class="line">  / __/___/ /  ___</span><br><span class="line"> / _// __/ _ \/ _ \</span><br><span class="line">/___/\__/_//_/\___/ v4.5.0</span><br><span class="line">High performance, minimalist Go web framework</span><br><span class="line">https://echo.labstack.com</span><br><span class="line">____________________________________O/_______</span><br><span class="line">                                    O\</span><br><span class="line">⇨ http server started on [::]:8080</span><br></pre></td></tr></table></figure>

<h2 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h2><ul>
<li>Optimized HTTP router which smartly prioritize routes</li>
<li>Build robust and scalable RESTful APIs</li>
<li>Group APIs</li>
<li>Extensible middleware framework</li>
<li>Define middleware at root, group or route level</li>
<li>Data binding for JSON, XML and form payload</li>
<li>Handy functions to send variety of HTTP response</li>
<li>Centralized HTTP error handling</li>
<li>Template rendering with any template engine</li>
<li>Define your format for the logger</li>
<li>Highly customizable</li>
<li>Automatic TLS via Let’s Encrypt</li>
<li>HTTP/2 support</li>
</ul>
<span id="more"></span>
]]></content>
      <tags>
        <tag>框架</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
</search>
