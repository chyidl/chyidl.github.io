<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker Tips &amp; Tricks</title>
    <url>/2021/09/01/Docker-Intro/</url>
    <content><![CDATA[<h2 id="Docker-Info"><a href="#Docker-Info" class="headerlink" title="Docker  Info"></a>Docker  Info</h2><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个“边界”</span><br><span class="line"></span><br><span class="line">Cgroups技术是用来制造约束的主要手段</span><br><span class="line"><span class="keyword">Namespace</span>技术则是用来修改进程试图的主要方法</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="Docker-architecture"><a href="#Docker-architecture" class="headerlink" title="Docker architecture"></a>Docker architecture</h2><blockquote>
<p>Docker uses a client-server architecture.</p>
</blockquote>
<p><img src="/misc/images/architecture.svg" alt="docker architecture"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker 仓库操作</span></span><br><span class="line">  docker pull/push</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 镜像管理</span></span><br><span class="line">  docker images/rmi/build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 生命周期管理</span></span><br><span class="line">  docker run/<span class="built_in">start</span>/stop/<span class="built_in">rm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># to delete all containers including its volumes use,</span></span><br><span class="line"><span class="variable">$</span> docker <span class="built_in">rm</span> <span class="literal">-vf</span> <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-a</span> <span class="literal">-q</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># to delete all Docker images</span></span><br><span class="line"><span class="variable">$</span> docker rmi <span class="variable">$</span>(docker images <span class="literal">-q</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stop all Docker containers</span></span><br><span class="line">&gt; docker <span class="built_in">ps</span> -- list all running containers</span><br><span class="line">&gt;   <span class="literal">-q</span> flag will only list the IDs <span class="keyword">for</span> those containers</span><br><span class="line"><span class="variable">$</span> docker <span class="built_in">kill</span> <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-q</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove all Docker containers</span></span><br><span class="line"><span class="variable">$</span> docker <span class="built_in">rm</span> <span class="variable">$</span>(docker <span class="built_in">ps</span> <span class="literal">-a</span> <span class="literal">-q</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Docker-Tips"><a href="#Docker-Tips" class="headerlink" title="Docker Tips"></a>Docker Tips</h2><ul>
<li><p><strong>Docker Tip #1</strong>: Docker 容器进程</p>
<blockquote>
<p>A Docker container is just a process/service that runs directly on your machine. It is slightly different than a regular process because the Docker daemon along with the linux kernel do a few things(<strong>Cgroups</strong>、<strong>Namespace</strong>) to ensure it runs in total isolation<br>Docker容器是一种特殊的进程,和虚拟机差别很大</p>
</blockquote>
</li>
<li><p><strong>Docker Tip #2</strong>: COPY vs. ADD in a Dockerfile</p>
<blockquote>
<p>COPY 和 ADD 功能很相似，都可以从指定目录拷贝数据到Docker镜像中.</p>
</blockquote>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">COPY</span> 和 <span class="keyword">ADD</span> 区别</span><br><span class="line"><span class="number">1</span>. <span class="keyword">COPY</span>: 只能从本机文件或目录中拷贝到镜像中</span><br><span class="line"><span class="number">2</span>. <span class="keyword">ADD</span>: 不仅可以从本机文件或目录中拷贝，还可以使用URL引入外部的文件地址拷贝到镜像中</span><br><span class="line">  $ <span class="keyword">ADD</span> rootfs.tar.gz /</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #3</strong>: 追加 Docker Run 指令减少镜像大小</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Before Dockerfile -- 新增三个层lager</span></span><br><span class="line">RUN wget -O myfile.tar.gz http:<span class="regexp">//</span>example.com/myfile.tar.gz</span><br><span class="line">RUN tar -xvf myfile.tar.gz -C <span class="regexp">/usr/</span>src/myapp</span><br><span class="line">RUN rm myfile.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># After Dockerfile -- 新增一个层layer</span></span><br><span class="line">RUN wget -O myfile.tar.gz http:<span class="regexp">//</span>example.com/myfile.tar.gz \</span><br><span class="line">  &amp;&amp; tar -xvf myfile.tar.gz -C <span class="regexp">/usr/</span>src/myapp \</span><br><span class="line">  &amp;&amp; rm myfile.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #4</strong>: Docker Base镜像OS和Host OS没有关系</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">Docker <span class="built_in">Image</span> OS: 定义在Dockerfile文件的Base镜像的系统</span><br><span class="line">Host OS: 运行Docker <span class="built_in">image</span>的环境</span><br><span class="line">You can use whatever base <span class="built_in">image</span> you want <span class="keyword">for</span> your Docker images.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #5</strong>: 使用相同Base镜像的好处</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">You could use a different base OS <span class="keyword">for</span> <span class="keyword">each</span> Docker image, but <span class="keyword">then</span> you lose <span class="keyword">out</span> <span class="keyword">on</span> the ability <span class="keyword">to</span> <span class="keyword">cache</span> it across all of your images</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #6</strong>: RUN vs. CMD in a Dockerfile</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">RUN:</span> 在镜像内执行命令，这些指令仅仅在构建build镜像中执行一次，并且将构建结果写入新larger层中.</span><br><span class="line"><span class="symbol">CMD:</span> 在启动容器时定义默认的运行的指令, 这种动作发生运行时run-time, 覆盖方式</span><br><span class="line"><span class="symbol">ENTRYPOINT:</span> 执行命令参数追加方式</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #7</strong>: Base Docker Image Alpine</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Why Alpine?</span><br><span class="line">&gt; Small. Simple. Secure. Alpine Linux is a security-<span class="keyword">oriented, </span>lightweight Linux <span class="keyword">distribution </span><span class="keyword">based </span>on musl libc <span class="keyword">and </span><span class="keyword">busybox.</span></span><br><span class="line"><span class="keyword"></span>&gt; Alpine is about <span class="number">30</span>x smaller than Debian.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #8</strong>: Project Structure with Multiple Dockerfiles and Docker Compose</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">ubuntu in ~/chyi/micro-services at <span class="number">3</span>BPlus <span class="keyword">on</span> 🐳 v20.<span class="number">10.8</span></span><br><span class="line">➜ tree -L <span class="number">2</span></span><br><span class="line">.</span><br><span class="line">├── auth</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── billing</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── contact</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── user</span><br><span class="line">    └── Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> directories, <span class="number">5</span> <span class="keyword">files</span></span><br><span class="line"></span><br><span class="line">The docker-compose.yaml</span><br><span class="line">ubuntu in ~/chyi/micro-services at <span class="number">3</span>BPlus <span class="keyword">on</span> 🐳 v20.<span class="number">10.8</span></span><br><span class="line">➜ <span class="keyword">cat</span> docker-compose.yml</span><br><span class="line"><span class="keyword">version</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line">service<span class="variable">s:</span></span><br><span class="line">    auth:</span><br><span class="line">        build: <span class="string">&#x27;./auth&#x27;</span></span><br><span class="line">    billin<span class="variable">g:</span></span><br><span class="line">        build: <span class="string">&#x27;./billing&#x27;</span></span><br><span class="line">    contac<span class="variable">t:</span></span><br><span class="line">        build: <span class="string">&#x27;./contact&#x27;</span></span><br><span class="line">    user:</span><br><span class="line">        build: <span class="string">&#x27;./user&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #9</strong>: 使用Volumes</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yaml</span></span><br><span class="line"><span class="attr">services</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">app</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    # Mount the crrent directoy into `/app` inside the running container.</span></span><br><span class="line">    <span class="attr">volumes</span>:<span class="string"></span></span><br><span class="line">      <span class="meta">-</span> <span class="string">&#x27;.:/app&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #10</strong>: Published Ports</p>
<blockquote>
<p>Creates a firwaall rule which maps a container port to a port on the Docker host to the outside world.</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Flag value</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-p 8080:80</td>
<td align="left">Map TCP port 80 in the container to port 8080 on the Docker host.</td>
</tr>
<tr>
<td align="left">-p 192.168.1.100:8080:80</td>
<td align="left">Map TCP port 80 in the container to port 8080 on the Docker host for connections to host IP 192.168.1.100.</td>
</tr>
<tr>
<td align="left">-p 8080:80/udp</td>
<td align="left">Map UDP port 80 in the container to port 8080 on the Docker host.</td>
</tr>
<tr>
<td align="left">-p 8080:80/tcp -p 8080:80/udp</td>
<td align="left">Map TCP port 80 in the container to TCP port 8080 on the Docker host, and map UDP port 80 in the container to UDP port 8080 on the Docker host.</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>Docker Tip #11</strong>: dockerignore file</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">.dockerignore</span>: ignore certain files and folders from your Docker images</span><br><span class="line">  <span class="string">.git</span></span><br><span class="line">  <span class="string">.dockerignore</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #12</strong>: Manage Docker without sudo on Linux</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add a docker group and then add your user to it:</span></span><br><span class="line"><span class="variable">$ </span>sudo groupadd docker</span><br><span class="line"><span class="variable">$ </span>docker usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #13</strong>: Measure Docker Container’s Resources</p>
<blockquote>
<p>How much resources containers are using</p>
</blockquote>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$ docker stats</span><br><span class="line">CONTAINER ID   NAME                                                                                         <span class="meta">CPU</span> %     MEM USAGE / LIMIT     MEM %     NET I/O     BLOCK I/O         PIDS</span><br><span class="line">298d90f942e1   k8s_POD_kafka-zookeeper-0_default_a243d677-<span class="number">101b</span>-493b-a076-d94f46785f22_0                     <span class="number">0.00</span>%     724KiB / <span class="number">3.</span>704GiB     <span class="number">0.02</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">0B</span> / <span class="number">0B</span>           <span class="number">1</span></span><br><span class="line">1d92a13e4a6f   k8s_POD_kafka-0_default_f7374645-<span class="number">9904</span>-436c-bc8d-43ed415833c1_0                               <span class="number">0.00</span>%     872KiB / <span class="number">3.</span>704GiB     <span class="number">0.02</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">0B</span> / <span class="number">0B</span>           <span class="number">1</span></span><br><span class="line">b638c1bbd855   k8s_POD_postgres-postgresql-0_infrastructure_d9067ee1-<span class="number">6874</span>-<span class="number">4018</span>-a008-09362ad9330d_16         <span class="number">0.00</span>%     868KiB / <span class="number">3.</span>704GiB     <span class="number">0.02</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">0B</span> / <span class="number">0B</span>           <span class="number">1</span></span><br><span class="line">0fdc76799b4e   k8s_kube-flannel_kube-flannel-<span class="built_in">ds</span>-nk6tj_kube-system_0a186e7a-c0d7-<span class="number">4282</span>-9f5d-65ee20d0e13a_12   <span class="number">0.07</span>%     <span class="number">15.</span>4MiB / 50MiB       <span class="number">30.80</span>%    <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">33.</span>1MB / <span class="number">0B</span>       <span class="number">11</span></span><br><span class="line">4c3705247efa   k8s_kube-proxy_kube-proxy-xwfvl_kube-system_f46216cb-d018-4d82-b510-9be5e01cefca_12          <span class="number">0.00</span>%     <span class="number">23.</span>36MiB / <span class="number">3.</span>704GiB   <span class="number">0.62</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">43.</span>7MB / <span class="number">12.</span>3kB   <span class="number">8</span></span><br><span class="line">16d5db1e7447   k8s_POD_kube-proxy-xwfvl_kube-system_f46216cb-d018-4d82-b510-9be5e01cefca_13                 <span class="number">0.00</span>%     <span class="number">1.</span>996MiB / <span class="number">3.</span>704GiB   <span class="number">0.05</span>%     <span class="number">0B</span> / <span class="number">0B</span>     487kB / <span class="number">0B</span>        <span class="number">1</span></span><br><span class="line">496aacf5fddf   k8s_POD_kube-flannel-<span class="built_in">ds</span>-nk6tj_kube-system_0a186e7a-c0d7-<span class="number">4282</span>-9f5d-65ee20d0e13a_13            <span class="number">0.00</span>%     768KiB / <span class="number">3.</span>704GiB     <span class="number">0.02</span>%     <span class="number">0B</span> / <span class="number">0B</span>     <span class="number">0B</span> / <span class="number">0B</span>           <span class="number">1</span></span><br><span class="line">1e328afeb116   dapr_zipkin                                                                                  <span class="number">0.17</span>%     <span class="number">250.</span>2MiB / <span class="number">3.</span>704GiB   <span class="number">6.60</span>%     18MB / <span class="number">0B</span>   60MB / <span class="number">0B</span>         <span class="number">55</span></span><br><span class="line">27872f88cae3   dapr_placement                                                                               <span class="number">0.11</span>%     <span class="number">5.</span>992MiB / <span class="number">3.</span>704GiB   <span class="number">0.16</span>%     18MB / <span class="number">0B</span>   <span class="number">13.</span>6MB / <span class="number">0B</span>       <span class="number">10</span></span><br><span class="line">27c1f6daa81c   dapr_redis                                                                                   <span class="number">0.35</span>%     <span class="number">5.</span>633MiB / <span class="number">3.</span>704GiB   <span class="number">0.15</span>%     18MB / <span class="number">0B</span>   <span class="number">10.</span>7MB / <span class="number">0B</span>       <span class="number">5</span></span><br><span class="line"></span><br><span class="line">$ docker stats --format <span class="string">&quot;table &#123;&#123;.Container&#125;&#125;\t&#123;&#123;.CPUPerc&#125;&#125;\t&#123;&#123;.MemUsage&#125;&#125;&quot;</span></span><br><span class="line">CONTAINER      <span class="meta">CPU</span> %     MEM USAGE / LIMIT</span><br><span class="line">298d90f942e1   <span class="number">0.00</span>%     724KiB / <span class="number">3.</span>704GiB</span><br><span class="line">1d92a13e4a6f   <span class="number">0.00</span>%     872KiB / <span class="number">3.</span>704GiB</span><br><span class="line">b638c1bbd855   <span class="number">0.00</span>%     868KiB / <span class="number">3.</span>704GiB</span><br><span class="line">0fdc76799b4e   <span class="number">2.37</span>%     <span class="number">15.</span>42MiB / 50MiB</span><br><span class="line">4c3705247efa   <span class="number">0.00</span>%     <span class="number">23.</span>36MiB / <span class="number">3.</span>704GiB</span><br><span class="line">16d5db1e7447   <span class="number">0.00</span>%     <span class="number">1.</span>996MiB / <span class="number">3.</span>704GiB</span><br><span class="line">496aacf5fddf   <span class="number">0.00</span>%     768KiB / <span class="number">3.</span>704GiB</span><br><span class="line">1e328afeb116   <span class="number">0.21</span>%     <span class="number">250.</span>2MiB / <span class="number">3.</span>704GiB</span><br><span class="line">27872f88cae3   <span class="number">0.12</span>%     <span class="number">5.</span>992MiB / <span class="number">3.</span>704GiB</span><br><span class="line">27c1f6daa81c   <span class="number">0.34</span>%     <span class="number">5.</span>633MiB / <span class="number">3.</span>704GiB</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #14</strong>: Docker Compose vs Docker Stack</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker Compose: is an official tool that helps you manage your Docker containers by letting you define everything through a docker-compose.yml file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker stack: is a command that&#x27;s embedded into the Docker CLI. Lets you manage a cluster of Docker containers through Docker Swarm.</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #15</strong>: Metadata Docker Images with Labels</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile example of adding 2 labels with 1 LABEL instruction:</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> &lt;key&gt;=&lt;value&gt;</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> version=<span class="string">&quot;1.0&quot;</span> maintainer=<span class="string">&quot;chyi &lt;nick.chyi@gmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker build example to add dynamic labels to your Docker images:</span></span><br><span class="line">$ docker build . --<span class="keyword">label</span><span class="bash"> <span class="string">&quot;version=1.0&quot;</span> --label <span class="string">&quot;maintaner=chyi &lt;nick.chyi@gmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker inspect images</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #16</strong>: Named Volumes vs Path Based Volumes</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Named volumes</span></span><br><span class="line">  postgres:<span class="regexp">/var/</span>lib<span class="regexp">/postgresql/</span>data</span><br><span class="line"></span><br><span class="line">  docker-compose automatically create the postgres volume, <span class="keyword">if</span> not you could running __$ docker volume create postgres__.</span><br><span class="line">  On Linux, the volume will get saved to <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes<span class="regexp">/postgres/</span>_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Path based volumes</span></span><br><span class="line">  .<span class="regexp">/postgres:/</span>var<span class="regexp">/lib/</span>postgresql/data</span><br><span class="line"></span><br><span class="line">  postgres/ directory would get created <span class="keyword">in</span> the current directory on the Docker host.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #17</strong>: The Volume or Mount Flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Setting up a volume the old way with docker run:</span></span><br><span class="line">$ docker container run … -v <span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>:/myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting up the same volumes using the mount flag with docker run:</span></span><br><span class="line">$ docker container run … --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=<span class="string">&quot;<span class="subst">$(pwd)</span>&quot;</span>,target=/myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker compose</span></span><br><span class="line">volumes:</span><br><span class="line">  - <span class="built_in">type</span>: <span class="string">&quot;bind&quot;</span></span><br><span class="line">    <span class="built_in">source</span>: <span class="string">&quot;.&quot;</span></span><br><span class="line">    target: <span class="string">&quot;/myapp&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #18</strong>: Connect to a Service Running on Docker Host</p>
<blockquote>
<p>Implementation of connecting to Docker host over a custom network with a static IP address.</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create a custom bridge Docker network</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at <span class="number">3</span>BPlus</span><br><span class="line">➜ docker network create -d bridge --subnet <span class="number">192.168</span>.<span class="number">0.0</span>/<span class="number">24</span> --gateway <span class="number">192.168</span>.<span class="number">0.1</span> mynet</span><br><span class="line"><span class="number">0330</span>b879fcc8fb23eeb092cb66fd86f1796e7f0abe37df4978903cf8fd07217b</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at <span class="number">3</span>BPlus</span><br><span class="line">➜ ifconfig</span><br><span class="line">br-<span class="number">0330</span>b879fcc8: flags=<span class="number">4099</span>&lt;UP,BROADCAST,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet <span class="number">192.168</span>.<span class="number">0.1</span>  netmask <span class="number">255.255</span>.<span class="number">255.0</span>  broadcast <span class="number">192.168</span>.<span class="number">0.255</span></span><br><span class="line">        ether <span class="number">02</span>:<span class="number">42</span>:<span class="number">16</span>:<span class="number">0</span>c:c0:<span class="number">51</span>  txqueuelen <span class="number">0</span>  (Ethernet)</span><br><span class="line">        RX packets <span class="number">0</span>  bytes <span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line">        RX errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        TX packets <span class="number">0</span>  bytes <span class="number">0</span> (<span class="number">0.0</span> B)</span><br><span class="line">        TX errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start the Alpine container and drop into a Shell prompt.</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at <span class="number">3</span>BPlus</span><br><span class="line">➜ docker container run --rm -it alpine sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the ping utility.</span></span><br><span class="line">/ <span class="comment"># apk update &amp;&amp; apk add iputils</span></span><br><span class="line">fetch https:<span class="regexp">//</span>dl-cdn.alpinelinux.org<span class="regexp">/alpine/</span>v3.<span class="number">14</span><span class="regexp">/main/</span>aarch64/APKINDEX.tar.gz</span><br><span class="line">fetch https:<span class="regexp">//</span>dl-cdn.alpinelinux.org<span class="regexp">/alpine/</span>v3.<span class="number">14</span><span class="regexp">/community/</span>aarch64/APKINDEX.tar.gz</span><br><span class="line">v3.<span class="number">14.2</span>-<span class="number">5</span>-gd4163d4c6c [https:<span class="regexp">//</span>dl-cdn.alpinelinux.org<span class="regexp">/alpine/</span>v3.<span class="number">14</span>/main]</span><br><span class="line">v3.<span class="number">14.2</span>-<span class="number">4</span>-ga15b4dc067 [https:<span class="regexp">//</span>dl-cdn.alpinelinux.org<span class="regexp">/alpine/</span>v3.<span class="number">14</span>/community]</span><br><span class="line">OK: <span class="number">14810</span> distinct packages available</span><br><span class="line">(<span class="number">1</span>/<span class="number">2</span>) Installing libcap (<span class="number">2.50</span>-r0)</span><br><span class="line">(<span class="number">2</span>/<span class="number">2</span>) Installing iputils (<span class="number">20210202</span>-r0)</span><br><span class="line">Executing busybox-<span class="number">1.33</span>.<span class="number">1</span>-r3.trigger</span><br><span class="line">OK: <span class="number">6</span> MiB <span class="keyword">in</span> <span class="number">16</span> packages</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ping the custom IP address we set up.</span></span><br><span class="line">/ <span class="comment"># ping 192.168.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You should see this output (hit CTRL+C to stop it)</span></span><br><span class="line">PING <span class="number">192.168</span>.<span class="number">0.1</span> (<span class="number">192.168</span>.<span class="number">0.1</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.336</span> ms</span><br><span class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">0.1</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.293</span> ms</span><br><span class="line">^C</span><br><span class="line">--- <span class="number">192.168</span>.<span class="number">0.1</span> ping statistics ---</span><br><span class="line"><span class="number">2</span> packets transmitted, <span class="number">2</span> received, <span class="number">0</span>% packet loss, time <span class="number">1013</span>ms</span><br><span class="line">rtt min<span class="regexp">/avg/m</span>ax<span class="regexp">/mdev = 0.293/</span><span class="number">0.314</span><span class="regexp">/0.336/</span><span class="number">0.021</span> ms</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #19</strong>: Show Total Disk Space Used by Docker</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images         <span class="number"> 3 </span>       <span class="number"> 2 </span>        203.9MB   198.5MB (97%)</span><br><span class="line">Containers     <span class="number"> 3 </span>       <span class="number"> 1 </span>        2.524MB   0B (0%)</span><br><span class="line">Local Volumes  <span class="number"> 1 </span>       <span class="number"> 0 </span>        0B        0B</span><br><span class="line">Build Cache    <span class="number"> 0 </span>       <span class="number"> 0 </span>        0B        0B</span><br><span class="line"></span><br><span class="line"><span class="comment"># -v flag (verbose) - will show the unique image size for each image</span></span><br><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ docker system df -v</span><br><span class="line">Images space usage:</span><br><span class="line"></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED       SIZE      SHARED SIZE   UNIQUE SIZE   CONTAINERS</span><br><span class="line">alpine                latest    bb3de5531c18  <span class="number"> 4 </span>days ago    5.337MB   0B            5.337MB       2</span><br><span class="line">hello-world           latest    bc11b176a293  <span class="number"> 7 </span>weeks ago   9.136kB   0B            9.136kB       1</span><br><span class="line">bahamat/unix-1st-ed   latest    37aa142d2113  <span class="number"> 5 </span>years ago   198.5MB   0B            198.5MB       0</span><br><span class="line"></span><br><span class="line">Containers space usage:</span><br><span class="line"></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND            LOCAL VOLUMES   SIZE      CREATED       STATUS                   NAMES</span><br><span class="line">9023720cdee7   alpine        &quot;sh&quot;              <span class="number"> 0 </span>              2.52MB   <span class="number"> 5 </span>hours ago   Up<span class="number"> 5 </span>hours               upbeat_kepler</span><br><span class="line">9e272ab58362   alpine        &quot;sh -c &#x27;exit 1&#x27;&quot;  <span class="number"> 0 </span>              0B       <span class="number"> 6 </span>hours ago   Exited (1)<span class="number"> 6 </span>hours ago   naughty_blackburn</span><br><span class="line">d95cc7e19d43   hello-world   &quot;/hello&quot;          <span class="number"> 0 </span>              0B       <span class="number"> 7 </span>weeks ago   Exited (0)<span class="number"> 7 </span>weeks ago   nifty_hellman</span><br><span class="line"></span><br><span class="line">Local Volumes space usage:</span><br><span class="line"></span><br><span class="line">VOLUME NAME   LINKS     SIZE</span><br><span class="line">user_my-db   <span class="number"> 0 </span>        0B</span><br><span class="line"></span><br><span class="line">Build cache usage: 0B</span><br><span class="line"></span><br><span class="line">CACHE ID   CACHE TYPE   SIZE      CREATED   LAST USED   USAGE     SHARED</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #20</strong>: Docker Compose Stop vs Down</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose stop</span></span><br><span class="line">&gt; stop container, <span class="keyword">but</span> <span class="keyword">it</span> won&#x27;t remove them</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose down</span></span><br><span class="line">&gt; stop container, removes <span class="keyword">the</span> stopped containers <span class="keyword">as</span> well <span class="keyword">as</span> any networks <span class="keyword">that</span> were created.</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker-compose down -v</span></span><br><span class="line">&gt; add remove all volumes too.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #21</strong>: Difference between Docker Create, Start and Run</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create:</span></span><br><span class="line">  adds a writeable container <span class="keyword">on</span> top <span class="keyword">of</span> your image <span class="keyword">and</span> sets <span class="keyword">it</span> up <span class="keyword">for</span> <span class="built_in">running</span> whatever command you specified <span class="keyword">in</span> you CMD. The container ID <span class="keyword">is</span> reported <span class="keyword">back</span> <span class="keyword">but</span> <span class="keyword">it</span>&#x27;s <span class="keyword">not</span> started.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start:</span></span><br><span class="line">  will start any stopped container.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run:</span></span><br><span class="line">  combination <span class="keyword">of</span> create <span class="keyword">and</span> start, It creates <span class="keyword">the</span> container <span class="keyword">and</span> starts <span class="keyword">it</span>.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #22</strong>: Docker Mem Limit</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">默认情况下容器使用的资源不受限制，可以使用主机内核调度器所允许的最大资源</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">限制容器不能过多的使用主机的内存，一旦内存检测到没有足够的内存可以分配，就会出现OOM(Out Of Memory Exception). 并开始随机Kill一些进程用于释放内存空间，docker尝试调整docker daemon 的OOM优先级进行缓解，内核在选择杀死的进程时会对所有的进程打分，直接杀死得分最高的进程，docker daemon的OOM优先级被降低</span></span><br></pre></td></tr></table></figure>
<ul>
<li><a href="/misc/code/script/show_process_score.sh">show_process_score.sh</a><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本输出得分最高的10个进程,并排序</span></span><br><span class="line">  ➜ ./show_process_score.sh</span><br><span class="line">  <span class="number">672</span>  <span class="number">1510</span> <span class="regexp">/usr/</span>bin/gnome-shell</span><br><span class="line">  <span class="number">669</span>  <span class="number">1811</span> <span class="regexp">/usr/</span>libexec/gnome-initial-setup --existing-user</span><br><span class="line">  <span class="number">668</span>  <span class="number">1010</span> <span class="regexp">/usr/</span>lib<span class="regexp">/xorg/</span>Xorg vt2 -displayfd <span class="number">3</span> -auth <span class="regexp">/run/u</span>se</span><br><span class="line">  <span class="number">667</span>  <span class="number">2062</span> update-notifier</span><br><span class="line">  <span class="number">667</span>  <span class="number">1760</span> <span class="regexp">/usr/</span>libexec<span class="regexp">/evolution-data-server/</span>evolution-alarm</span><br><span class="line">  <span class="number">667</span>  <span class="number">1128</span> <span class="regexp">/usr/</span>libexec/goa-daemon</span><br><span class="line">  <span class="number">666</span>   <span class="number">996</span> <span class="regexp">/usr/</span>libexec/tracker-miner-fs</span><br><span class="line">  <span class="number">666</span>   <span class="number">994</span> <span class="regexp">/usr/</span>bin/pulseaudio --daemonize=no --log-target=jo</span><br><span class="line">  <span class="number">666</span>   <span class="number">988</span> (sd-pam)</span><br><span class="line">  <span class="number">666</span>   <span class="number">987</span> <span class="regexp">/lib/</span>systemd/systemd --user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 降低OOM风险:</span></span><br><span class="line">  - 通过测试掌握应用对内存的需求</span><br><span class="line">  - 保证运行容器的主机有充足的内存</span><br><span class="line">  - 限制容器可以使用的内存</span><br><span class="line">  - 为主机配置Swap</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>压力测试工具 stress<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># stress</span></span><br><span class="line">&gt; a tool for generating workload. <span class="keyword">It</span> can produce CPU, memory, I/O, <span class="keyword">and</span> disk stress.</span><br></pre></td></tr></table></figure></li>
<li><a href="/misc/code/devops/benchmark/stress.Dockerfile">stress.Dockerfile</a><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建镜像</span></span><br><span class="line">➜ docker build -f stress.Dockerfile -t chyiyaqing/u-stress:latest .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制内存使用上限(memory-swap值包含容器可用内存和可用swap;)</span></span><br><span class="line">➜ docker run -it -m 300M --memory-swap -1 --name con1 chyiyaqing/u-stress /bin/bash</span><br><span class="line">root@1a3df043e956:/<span class="comment"># stress --vm 1 --vm-bytes 500M</span></span><br><span class="line">stress: info: [9] dispatching hogs:<span class="number"> 0 </span>cpu,<span class="number"> 0 </span>io,<span class="number"> 1 </span>vm,<span class="number"> 0 </span>hdd</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker stats 查看</span></span><br><span class="line">$ docker stats</span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT   MEM %     NET I/O       BLOCK I/O     PIDS</span><br><span class="line">1a3df043e956   con1      71.85%    300MiB / 300MiB     100.00%   6.71kB / 0B   3.45GB / 0B   3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Top命令查看stress进程内存实际情况</span></span><br><span class="line">chyiyaqing in ~ at chyiyaqing-PowerEdge-R720 took 5s</span><br><span class="line"><span class="comment"># pgrep 命令查询stress命令相关进程</span></span><br><span class="line">➜ pgrep stress</span><br><span class="line">48622</span><br><span class="line">48623</span><br><span class="line"></span><br><span class="line">chyiyaqing in ~ at chyiyaqing-PowerEdge-R720</span><br><span class="line">➜ top -p 48623</span><br><span class="line">top - 22:40:23 up<span class="number"> 2 </span>days,  5:40, <span class="number"> 4 </span>users,  load average: 0.95, 0.47, 0.18</span><br><span class="line">Tasks:  <span class="number"> 1 </span>total,  <span class="number"> 1 </span>running,  <span class="number"> 0 </span>sleeping,  <span class="number"> 0 </span>stopped,  <span class="number"> 0 </span>zombie</span><br><span class="line">%Cpu(s):  0.1 us,  2.0 sy,  0.0 ni, 97.1 id,  0.8 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">MiB Mem :  32106.2 total,  27283.4 free,   1420.6 used,   3402.2 buff/cache</span><br><span class="line">MiB Swap:   2048.0 total,   1545.3 free,    502.7 used.  30224.1 avail Mem</span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line"> <span class="number"> 48623 </span>root     <span class="number"> 20 </span> <span class="number"> 0 </span><span class="number"> 515868 </span>305460   <span class="number"> 272 </span>R  71.7   0.9   2:02.53 stress</span><br><span class="line"></span><br><span class="line"><span class="comment"># VIRT 进程虚拟内存大小; RES 实际分配物理内存大小</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Docker Tip #23</strong>: Docker CPU Limit</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt; 默认情况下容器可以不受限制的使用CPU/内存资源, 如果不对容器使用进行限制，一旦发生容器程序异常使用CPU/Mem情况，可能会把整个主机CPU/Mem资源耗尽.</span><br><span class="line"></span><br><span class="line"># 限制可用CPU个数</span><br><span class="line">➜ docker run --rm -it --cpus=<span class="number">2</span> chyiyaqing/<span class="keyword">u</span>-stress /bin/bash</span><br><span class="line"></span><br><span class="line">root@f11127fe7c50:/# stress -<span class="keyword">c</span> <span class="number">4</span></span><br><span class="line">stres<span class="variable">s:</span> info: [<span class="number">9</span>] dispatching hog<span class="variable">s:</span> <span class="number">4</span> cpu, <span class="number">0</span> io, <span class="number">0</span> <span class="keyword">vm</span>, <span class="number">0</span> hdd</span><br><span class="line"></span><br><span class="line"># docker stats</span><br><span class="line">CONTAINER ID   NAME                CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O   PIDS</span><br><span class="line">f11127fe7c50   competent_noether   <span class="number">198.98</span>%   <span class="number">1.695</span>MiB / <span class="number">31.35</span>GiB   <span class="number">0.01</span>%     <span class="number">39.7</span>kB / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">6</span></span><br><span class="line"></span><br><span class="line"># Top</span><br><span class="line">Task<span class="variable">s:</span> <span class="number">468</span> total,   <span class="number">5</span> running, <span class="number">463</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie</span><br><span class="line">%Cpu0  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu1  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu2  : <span class="number">50.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni, <span class="number">50.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span>     --</span><br><span class="line">%Cpu3  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu4  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu5  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu6  :  <span class="number">5.0</span> us,  <span class="number">5.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni, <span class="number">90.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu7  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu8  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu9  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu10 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu11 : <span class="number">50.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni, <span class="number">50.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span>     --</span><br><span class="line">%Cpu12 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu13 : <span class="number">47.4</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni, <span class="number">52.6</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span>     --</span><br><span class="line">%Cpu14 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu15 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu16 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu17 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu18 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu19 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu20 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu21 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu22 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu23 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu24 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu25 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu26 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu27 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu28 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu29 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu30 :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu31 : <span class="number">50.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni, <span class="number">50.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span>     --</span><br><span class="line">MiB Mem :  <span class="number">32106.2</span> total,  <span class="number">27901.2</span> free,   <span class="number">1119.0</span> used,   <span class="number">3086.0</span> buff/cache</span><br><span class="line">MiB Swap:   <span class="number">2048.0</span> total,   <span class="number">2044.6</span> free,      <span class="number">3.4</span> used.  <span class="number">30537.0</span> avail Mem</span><br><span class="line"></span><br><span class="line">查看Top真实情况不是两个CPU负载<span class="number">100</span>%, 而是容器消耗CPU总共<span class="number">200</span>%的负载，进程没有CPU数的限制，只能通过进程消耗CPU时间片统计出进程占用CPU的百分比</span><br><span class="line"></span><br><span class="line"># 指定固定CPU</span><br><span class="line">  &gt; 通过--cpuset-cpus设置容器运行在几个固定的CPU上, 因为多核系统每个核心都有自己的缓存,频繁的调度进程在不同的核心上执行会带来缓存失效的开销</span><br><span class="line">  chyiyaqing in ~ at chyiyaqing-PowerEdge-R720</span><br><span class="line">  ➜ docker run --rm -it --cpuset-cpus=<span class="string">&quot;0,1,2,3&quot;</span> chyiyaqing/<span class="keyword">u</span>-stress /bin/bash</span><br><span class="line"></span><br><span class="line"># 启动塔里测试命令</span><br><span class="line">root@<span class="number">95110</span>b6915af:/# stress -<span class="keyword">c</span> <span class="number">10</span></span><br><span class="line">stres<span class="variable">s:</span> info: [<span class="number">12</span>] dispatching hog<span class="variable">s:</span> <span class="number">4</span> cpu, <span class="number">0</span> io, <span class="number">0</span> <span class="keyword">vm</span>, <span class="number">0</span> hdd</span><br><span class="line"></span><br><span class="line"># docker stats</span><br><span class="line">CONTAINER ID   NAME                 CPU %     MEM USAGE / LIMIT    MEM %     NET I/O      BLOCK I/O   PIDS</span><br><span class="line"><span class="number">39</span>b4ce536148   frosty_stonebraker   <span class="number">399.38</span>%   <span class="number">2.43</span>MiB / <span class="number">31.35</span>GiB   <span class="number">0.01</span>%     <span class="number">3.9</span>kB / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">12</span></span><br><span class="line"></span><br><span class="line"># Top</span><br><span class="line">➜ top</span><br><span class="line">top - <span class="number">23</span>:<span class="number">08</span>:<span class="number">19</span> <span class="keyword">up</span> <span class="number">2</span> days,  <span class="number">6</span>:<span class="number">08</span>,  <span class="number">4</span> users,  load average: <span class="number">6.97</span>, <span class="number">3.73</span>, <span class="number">2.01</span></span><br><span class="line">Task<span class="variable">s:</span> <span class="number">496</span> total,  <span class="number">11</span> running, <span class="number">485</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie</span><br><span class="line">%Cpu0  :<span class="number">100.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,  <span class="number">0.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu1  :<span class="number">100.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,  <span class="number">0.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu2  :<span class="number">100.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,  <span class="number">0.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu3  :<span class="number">100.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,  <span class="number">0.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu4  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni, <span class="number">97.7</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">2.3</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line"></span><br><span class="line"># 设置CPU的权重</span><br><span class="line">&gt; 设置CPU权重只有在容器争用CPU资源的情况下，CPU的权重才能让不同的容器分到不同的CPU用量 --cpu-shares 设置CPU权重，默认值为<span class="number">1024</span>,</span><br><span class="line"></span><br><span class="line"># 运行两个容器，指定使用CPU0，分别设置--cpu-shares <span class="number">512</span>,<span class="number">1024</span></span><br><span class="line">  ➜ docker run --rm -it --cpuset-cpus=<span class="string">&quot;0&quot;</span> --cpu-shares=<span class="number">512</span> chyiyaqing/<span class="keyword">u</span>-stress /bin/bash</span><br><span class="line">  ➜ docker run --rm -it --cpuset-cpus=<span class="string">&quot;0&quot;</span> --cpu-shares=<span class="number">1024</span> chyiyaqing/<span class="keyword">u</span>-stress /bin/bash</span><br><span class="line"></span><br><span class="line"># 两个容器都运行stress -<span class="keyword">c</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"># top</span><br><span class="line">➜ top</span><br><span class="line">top - <span class="number">23</span>:<span class="number">14</span>:<span class="number">14</span> <span class="keyword">up</span> <span class="number">2</span> days,  <span class="number">6</span>:<span class="number">14</span>,  <span class="number">5</span> users,  load average: <span class="number">5.30</span>, <span class="number">5.25</span>, <span class="number">3.42</span></span><br><span class="line">Task<span class="variable">s:</span> <span class="number">495</span> total,   <span class="number">9</span> running, <span class="number">486</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie</span><br><span class="line">%Cpu0  :<span class="number">100.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,  <span class="number">0.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line">%Cpu1  :  <span class="number">0.0</span> us,  <span class="number">0.0</span> <span class="keyword">sy</span>,  <span class="number">0.0</span> ni,<span class="number">100.0</span> id,  <span class="number">0.0</span> <span class="keyword">wa</span>,  <span class="number">0.0</span> <span class="keyword">hi</span>,  <span class="number">0.0</span> si,  <span class="number">0.0</span> <span class="keyword">st</span></span><br><span class="line"></span><br><span class="line"># docker stats</span><br><span class="line">CONTAINER ID   NAME                CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O   PIDS</span><br><span class="line">f9c8864fab87   beautiful_neumann   <span class="number">66.39</span>%    <span class="number">1.695</span>MiB / <span class="number">31.35</span>GiB   <span class="number">0.01</span>%     <span class="number">5.23</span>kB / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">6</span></span><br><span class="line"><span class="number">6</span>b69afc7fea5   pensive_vaughan     <span class="number">33.41</span>%    <span class="number">1.676</span>MiB / <span class="number">31.35</span>GiB   <span class="number">0.01</span>%     <span class="number">7.17</span>kB / <span class="number">0</span>B   <span class="number">0</span>B / <span class="number">0</span>B     <span class="number">6</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #24</strong>: Docker import/export vs. load/save</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">➜ docker --help | grep -E <span class="string">&quot;(export|import|load|save)&quot;</span></span><br><span class="line">export      Export a container<span class="comment">&#x27;s filesystem as a tar archive</span></span><br><span class="line">import      Import the contents <span class="keyword">from</span> a tarball <span class="keyword">to</span> create a filesystem image</span><br><span class="line">load        Load an image <span class="keyword">from</span> a tar archive <span class="built_in">or</span> STDIN</span><br><span class="line">save        Save one <span class="built_in">or</span> more images <span class="keyword">to</span> a tar archive (streamed <span class="keyword">to</span> STDOUT <span class="keyword">by</span> <span class="keyword">default</span>)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #25</strong>: Docker网络模式</p>
<table>
<thead>
<tr>
<th align="left">Docker 网络模式</th>
<th align="left">配置</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">host模式</td>
<td align="left">-net=host</td>
<td align="left">容器和宿主机共享Network namespace</td>
</tr>
<tr>
<td align="left">container 模式</td>
<td align="left">-net=container:NAME_or_ID</td>
<td align="left">容器与另外一个容器共享Network namespace, kubernetes中的pod就是多个容器共享一个Network namespace</td>
</tr>
<tr>
<td align="left">none模式</td>
<td align="left">-net=none</td>
<td align="left">容器有独立的Network namespace,但并没有对其进行任何网络设置</td>
</tr>
<tr>
<td align="left">bridge模式</td>
<td align="left">-net=bridge</td>
<td align="left">默认为该模式</td>
</tr>
</tbody></table>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># 实现原理</span><br><span class="line">  &gt; 宿主机虚拟一个<span class="selector-tag">Docker</span>容器网桥(docker0), <span class="selector-tag">Docker</span>启动一个容器时会根据<span class="selector-tag">Docker</span>网桥(docker0)的网段分配给容器一个<span class="selector-tag">IP</span>地址，称为<span class="selector-tag">Container-IP</span>,同时<span class="selector-tag">Docker</span>网桥是每个容器的默认网关.因为同一宿主机内的容器都接入同一网桥，这样容器之间就能够通过容器的<span class="selector-tag">Container-IP</span>直接通信.</span><br><span class="line">  &gt; <span class="selector-tag">Docker</span>网桥是宿主主机虚拟出来的，并不是真是存在的网络设备，外部网络是无法寻址到，如果容器希望外部能够访问到，可以通过映射容器端口到宿主主机(端口映射),访问容器的时候就通过<span class="selector-attr">[宿主主机IP]</span>:<span class="selector-attr">[容器端口]</span>访问容器</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>host模式<br><img src="/misc/images/docker-network-host.png" alt="Host模式"><figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">容器使用host模式将使用宿主主机的IP和端口,容器的其他方面，文件系统、进程列表还是和宿主主机隔离</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">使用host模式的容器可以直接使用宿主主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主主机的端口，不需要进行NAT，host最大优势是网络性能比较好，但是docker host上已经使用的端口就不能再使用,网络隔离型不好</span></span><br></pre></td></tr></table></figure></li>
<li>container模式<br><img src="/misc/images/docker-network-container.png" alt="Container模式"><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">&gt; 新创建的容器和已经存在的一个容器共享一个Network Namespace.新创建的容器不会创建自己的网卡，配置自己的<span class="built_in">IP</span>，而是和指定的容器共享<span class="built_in">IP</span>和端口范围, 两个容器的进程可以通过lo网卡设备通信</span><br></pre></td></tr></table></figure></li>
<li>none模式<br><img src="/misc/images/docker-network-none.png" alt="None模式"><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">None</span>模式,Docker容器拥有自己的Network Namespace,但是，并不为Docker容器进行任何网络配置，Docker容器没有网卡、IP、路由,需要自己对Docker容器添加网卡、配置IP</span><br><span class="line">&gt; <span class="keyword">None</span>模式下只有lo回环网络，没有其他网卡，<span class="keyword">None</span>模式可以在容器创建时通过network=<span class="keyword">None</span>指定，这类网络没办法联网，封闭的网络能很好的保证容器的安全</span><br></pre></td></tr></table></figure></li>
<li>bridge模式<br><img src="/misc/images/docker-network-bridge.png" alt="Bridge模式"><figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">bridge模式是docker默认网络模式,不写--net参数就是bridge模式</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>Docker Tip #26</strong>: Alphine Linux Dockerfile</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">chyiyaqing in core at chyiyaqing-PowerEdge-R720 on  feat/adaptation-kingbases [!?] via 🐹 v1.17.1 on 🐳 v20.10.10</span><br><span class="line">➜ docker run core:BF<span class="string">-9748</span></span><br><span class="line"><span class="keyword">Error </span>relocating /root/core/blocface-core: __vfprintf_chk: symbol not found</span><br><span class="line"><span class="keyword">Error </span>relocating /root/core/blocface-core: __fprintf_chk: symbol not found</span><br><span class="line"></span><br><span class="line">在Alpine Linux上, not found错误是动态链接失败的典型特征，musl的ldd链接器存在一个相当混乱的错误，大多数Linux软件都是与glibc(GNUlibc库)相链接(libc提供了标准的C库和posixapi),大多数Linux发行版本都是基于glibc, alpineLinux是基于muslibc库(这是最小的实现，严格遵守POSIX).</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Docker Tip #27</strong>: 防止容器自动退出</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">&gt; docker容器的生命周期是同容器中的前置进程相关在一起,前置进程运行结束后，容器便自动退出</span><br><span class="line"></span><br><span class="line">下文使用alpine镜像做为基础镜像，创建一个alpine系统小容器,让其可以常驻运行，以便我们登陆交互执行</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 使用alpine系统镜像创建容器</span></span><br><span class="line">  <span class="comment"># -i interactive=true 开启stdin</span></span><br><span class="line">  <span class="comment"># -t tty=true 分配会话终端</span></span><br><span class="line">  <span class="comment"># -d 守护模式 不加就直接进入容器中需要ctrl+p+q切出，</span></span><br><span class="line"></span><br><span class="line">  chyiyaqing in ~ at chyiyaqing-PowerEdge-R720 took 9s</span><br><span class="line">  ➜ docker run -it -d --name my_alpine alpine sh</span><br><span class="line">  Unable to find image &#x27;alpine:latest&#x27; locally</span><br><span class="line">  latest: Pulling from library/alpine</span><br><span class="line">  a0d0a0d46f8b: Pull complete</span><br><span class="line">  Digest: sha256:e1c082e3d3c45cccac829840a25941e679c25d438cc8412c2fa221cf1a824e6a</span><br><span class="line">  Status: Downloaded newer image for alpine:latest</span><br><span class="line">  78c0429dd98fe42addaa2071ffe1ca6c22295ea6d6d465ff1f970644f6234a37</span><br><span class="line"></span><br><span class="line">  <span class="comment"># my_alpine 容器处于运行状态</span></span><br><span class="line">  chyiyaqing in ~ at chyiyaqing-PowerEdge-R720 took 8s</span><br><span class="line">  ➜ docker ps |<span class="string"> grep alpine</span></span><br><span class="line"><span class="string">  78c0429dd98f   alpine                                                          &quot;sh&quot;                     34 seconds ago   Up 34 seconds                                                         my_alpine</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # 登入容器</span></span><br><span class="line"><span class="string">  chyiyaqing in ~ at chyiyaqing-PowerEdge-R720</span></span><br><span class="line"><span class="string">  ➜ docker exec -it my_alpine sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # 查看 sh 会话数量</span></span><br><span class="line"><span class="string">  / # ps</span></span><br><span class="line"><span class="string">  PID   USER     TIME  COMMAND</span></span><br><span class="line"><span class="string">      1 root      0:00 sh</span></span><br><span class="line"><span class="string">      7 root      0:00 sh</span></span><br><span class="line"><span class="string">     13 root      0:00 ps</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  # alpine使用apk做为包管理</span></span><br><span class="line"><span class="string">  / # apk add sl</span></span><br><span class="line"><span class="string">  fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/main/x86_64/APKINDEX.tar.gz</span></span><br><span class="line"><span class="string">  fetch https://dl-cdn.alpinelinux.org/alpine/v3.14/community/x86_64/APKINDEX.tar.gz</span></span><br><span class="line"><span class="string">  (1/3) Installing ncurses-terminfo-base (6.2_p20210612-r0)</span></span><br><span class="line"><span class="string">  (2/3) Installing ncurses-libs (6.2_p20210612-r0)</span></span><br><span class="line"><span class="string">  (3/3) Installing sl (5.02-r0)</span></span><br><span class="line"><span class="string">  Executing busybox-1.33.1-r3.trigger</span></span><br><span class="line"><span class="string">  OK: 6 MiB in 17 packages</span></span><br><span class="line"><span class="string">  / # sl</span></span><br><span class="line"><span class="string">            (@@@@)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          (   )</span></span><br><span class="line"><span class="string">        ====        ________                ___________</span></span><br><span class="line"><span class="string">    _D _</span>|<span class="string">  </span>|<span class="string">_______/        \__I_I_____===__</span>|<span class="string">_________</span>|</span><br><span class="line">     |<span class="string">(_)---  </span>|<span class="string">   H\________/ </span>|<span class="string">   </span>|<span class="string">        =</span>|<span class="string">___ ___</span>|<span class="string">      _________________</span></span><br><span class="line"><span class="string">     /     </span>|<span class="string">  </span>|<span class="string">   H  </span>|<span class="string">  </span>|<span class="string">     </span>|<span class="string">   </span>|<span class="string">         </span>||<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>||<span class="string">     _</span>|<span class="string">                \_____A</span></span><br><span class="line"><span class="string">    </span>|<span class="string">      </span>|<span class="string">  </span>|<span class="string">   H  </span>|<span class="string">__--------------------</span>|<span class="string"> [___] </span>|<span class="string">   =</span>|<span class="string">                        </span>|</span><br><span class="line">    |<span class="string"> ________</span>|<span class="string">___H__/__</span>|<span class="string">_____/[][]~\_______</span>|<span class="string">       </span>|<span class="string">   -</span>|<span class="string">                        </span>|</span><br><span class="line">    |<span class="string">/ </span>|<span class="string">   </span>|<span class="string">-----------I_____I [][] []  D   </span>|<span class="string">=======</span>|<span class="string">____</span>|<span class="string">________________________</span>|_</span><br><span class="line">  __/ =|<span class="string"> o </span>|<span class="string">=-~O=====O=====O=====O\ ____Y___________</span>|<span class="string">__</span>|<span class="string">__________________________</span>|_</span><br><span class="line">   |<span class="string">/-=</span>|<span class="string">___</span>|<span class="string">=    </span>||<span class="string">    </span>||<span class="string">    </span>||<span class="string">    </span>|<span class="string">_____/~\___/          </span>|<span class="string">_D__D__D_</span>|<span class="string">  </span>|<span class="string">_D__D__D_</span>|</span><br><span class="line">    \_/      \__/  \__/  \__/  \__/      \_/               \_/   \_/    \_/   \_/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交容器变更生成新的镜像</span></span><br><span class="line">chyiyaqing in ~ at chyiyaqing-PowerEdge-R720 took 2m 57s</span><br><span class="line">➜ docker commit -m <span class="string">&quot;alpine with sl cmd&quot;</span> -a <span class="string">&quot;big_cat&quot;</span> my_alpine chyiyaqing/alpine_sl</span><br><span class="line">sha256:79981bb43b0e638cc193570456ad93793a8cb481c8940e4fd899a0cc60a8bd46</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布到Docker Hub</span></span><br><span class="line">chyiyaqing in ~ at chyiyaqing-PowerEdge-R720 took 10s</span><br><span class="line">➜ docker push chyiyaqing/alpine_sl</span><br><span class="line">Using default tag: latest</span><br><span class="line">The push refers to repository [docker.io/chyiyaqing/alpine_sl]</span><br><span class="line">102b73ff0977: Pushed</span><br><span class="line">e2eb06d8af82: Mounted from library/alpine</span><br><span class="line">latest: digest: sha256:500e9b9536a4fec460c487867d3cd7084da934ba37151aa122f4be438cc06d57 size: 739</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止/启动容器</span></span><br><span class="line">$ docker stop/start  my_alpine</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Have-a-Fun"><a href="#Have-a-Fun" class="headerlink" title="Have a Fun"></a>Have a Fun</h2><ul>
<li>Run the First Edition of Unix (1972) with Docker<blockquote>
<p>Run a PDP-11 simulator through Docker to interact with Unix as it was back in 1972</p>
</blockquote>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span> --<span class="keyword">rm</span> -it bahamat/unix-1st-<span class="keyword">ed</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next-gitalk</title>
    <url>/2021/09/01/hexo-next-gitalk/</url>
    <content><![CDATA[<h3 id="站点搭建过程"><a href="#站点搭建过程" class="headerlink" title="站点搭建过程"></a>站点搭建过程</h3><ul>
<li><a href="https://hexo.io/zh-cn/">hexo</a> : 快速、简洁且高校的博客框架</li>
<li><a href="https://github.com/next-theme/hexo-theme-next/blob/master/docs/zh-CN/README.md">next</a> : Hexo主题</li>
<li><a href="https://github.com/gitalk/gitalk">gitalk</a> : 依靠GitHub issue的评论系统</li>
</ul>
<span id="more"></span>

<h3 id="Settings-amp-Tips"><a href="#Settings-amp-Tips" class="headerlink" title="Settings &amp; Tips"></a>Settings &amp; Tips</h3><ul>
<li><p><strong>Show descripion</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># 修改themes/next/_config.yml</span><br><span class="line">excerpt_description: true</span><br><span class="line"></span><br><span class="line"># 文章截断</span><br><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>字数统计</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装插件 hexo-symbols-count-time</span></span><br><span class="line"><span class="string">$</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-symbols-count-time</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改hexo配置文件_config.yml</span></span><br><span class="line">  <span class="comment"># Symbols count and time to read of articles for Hexo.</span></span><br><span class="line">  <span class="attr">symbols_count_time:</span></span><br><span class="line">      <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改Next配置文件</span></span><br><span class="line">  <span class="comment"># Post wordcount display settings</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line">  <span class="attr">symbols_count_time:</span></span><br><span class="line">    <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">    <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>micro-services</title>
    <url>/2021/09/01/micro-services/</url>
    <content><![CDATA[<blockquote>
<p>项目工程化、微服务相关介绍</p>
</blockquote>
<span id="more"></span>

<h2 id="项目工程化"><a href="#项目工程化" class="headerlink" title="项目工程化"></a>项目工程化</h2><ul>
<li><p>开源规范</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 开源协议</span></span><br><span class="line"><span class="bullet">  1.</span> GPL - General Public License</span><br><span class="line"><span class="code">    &gt; 衍生代码的分发需要开源并且也要遵守此协议</span></span><br><span class="line"><span class="code">  2. MPL</span></span><br><span class="line"><span class="code">    &gt; 允许免费重发布、免费修改，但要求修改的代码版权归软件发起者，这种授权维护了商业软件的利益，要求基于这种软件的修改无偿贡献版权给该软件</span></span><br><span class="line"><span class="code">  3. LGPL</span></span><br><span class="line"><span class="code">  4. Apache</span></span><br><span class="line"><span class="code">    &gt; Apache 2.0协议除了为用户提供版权许可之外，还有专利许可，适合设计专利内容的项目</span></span><br><span class="line"><span class="code">  5. BSD</span></span><br><span class="line"><span class="code">    &gt;</span></span><br><span class="line"><span class="code">  6. MIT</span></span><br><span class="line"><span class="code">    &gt; MIT 协议是所有开源许可中最宽松的一个，除了细笔包含许可声明之外，再无任何限制</span></span><br></pre></td></tr></table></figure></li>
<li><p>开源规范</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 项目结构:</span><br><span class="line"><span class="bullet">2.</span> 严格遵循代码规范:</span><br><span class="line"><span class="bullet">3.</span> 代码质量:</span><br><span class="line"><span class="bullet">4.</span> 单元测试覆盖率:</span><br><span class="line"><span class="bullet">5.</span> 版本发布规范:</span><br><span class="line"><span class="bullet">6.</span> 向下兼容:</span><br><span class="line"><span class="bullet">7.</span> 详细的文档说明:</span><br><span class="line"><span class="bullet">8.</span> 安全:</span><br></pre></td></tr></table></figure></li>
<li><p>文档规范</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> README文档</span><br><span class="line">  介绍项目功能、安装、部署、使用</span><br><span class="line"><span class="bullet">2.</span> 项目文档</span><br><span class="line">  开发文档: 说明项目的开发流程</span><br><span class="line">  用户文档:</span><br><span class="line"><span class="bullet">3.</span> API接口文档</span><br></pre></td></tr></table></figure></li>
<li><p>版本规范</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">语义化版本规范: SemVer: 主版本号.次版本号.修订号 (<span class="keyword">X</span>.<span class="keyword">Y</span>.<span class="keyword">Z</span>), XYZ为非负的整数，禁止在数字前方补零</span><br><span class="line">  主版本号: MAJOR: 当做了不兼容API修改</span><br><span class="line">  次版本号: MINOR: 当做了向下兼容的功能新增及修改 -- 偶数为稳定版本，奇数为开发版本</span><br><span class="line">  修订号:PATCH: 向下兼容问题修正</span><br><span class="line"></span><br><span class="line"><span class="keyword">X</span>.<span class="keyword">Y</span>.<span class="keyword">Z</span>[-先行版本号][+版本编译元数据]</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 实际开发的时候，使用<span class="number">0</span><span class="number">.1</span><span class="number">.0</span>作为第一开发版本号</span><br><span class="line">fix类型的commit 可以将修订号+<span class="number">1</span></span><br><span class="line">feat类型的commit可以将次版本号+<span class="number">1</span></span><br><span class="line">breaking change的commit将主版本号+<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>Commit 规范</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">Commit Message包含三部分:</span><br><span class="line"><span class="symbol">  Header:</span> <span class="params">&lt;type&gt;</span>[optional scope]: <span class="params">&lt;description&gt;</span></span><br><span class="line"><span class="symbol">    type:</span></span><br><span class="line"><span class="symbol">      feat:</span> 新增功能</span><br><span class="line"><span class="symbol">      fix:</span> Bug修复</span><br><span class="line"><span class="symbol">      perf:</span> 提高代码性能的变更</span><br><span class="line"><span class="symbol">      style:</span> 代码格式类的变更</span><br><span class="line"><span class="symbol">      refactor:</span> 其他代码类的变更，这些变更不属于feat,fix,perf和style. 简化代码，重命名变量、删除冗余代码</span><br><span class="line"><span class="symbol">      test:</span> 新增测试用例或是更新现有测试用例</span><br><span class="line"><span class="symbol">      ci:</span> 持续集成和部署想干改动，</span><br><span class="line"><span class="symbol">      docs:</span> 文档类更新</span><br><span class="line"><span class="symbol">      chore:</span> 其他类型，构建流程、依赖管理或者辅助工具的变动</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    scope:</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    description:</span> 动词开头，使用现在时</span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">  Body:</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">  Footer:</span></span><br><span class="line"></span><br><span class="line">git rebase: 重写历史</span><br><span class="line">  git rebase -i <span class="params">&lt;commit ID&gt;</span> 这里是需要合并commit中最旧commit的父commit ID</span><br><span class="line"></span><br><span class="line">git reset HEAD~<span class="number">3</span>A 撤销过去的commit,重新提交</span><br><span class="line"></span><br><span class="line">git commit --amend: 修改最近一次commit 的 message</span><br><span class="line"></span><br><span class="line">Commit Message是commit数据结构中的一个属性，如果Commit Message有变更，则commit ID一定会变，git commit --amend只会变更最后一次的commit ID, git rebase -i 会变更父commit ID之后的所有提交commit ID.</span><br><span class="line"></span><br><span class="line">如果当前分之有未commit的代码，需要先执行git stash将工作状态进行暂存，当修改完成后在执行git stash pop恢复之前的工作状态</span><br></pre></td></tr></table></figure></li>
<li><p>目录结构设计</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结构化目录结构</span></span><br><span class="line">  /cmd            <span class="comment">-- 组件</span></span><br><span class="line">  /internal       <span class="comment">-- 私有应用和库代码,不希望在其他应用和库中被导入</span></span><br><span class="line">  /pkg            <span class="comment">-- 存放可以被外部应用使用的代码库</span></span><br><span class="line"><span class="comment"># 平铺式目录结构</span></span><br><span class="line">  &gt; 这种方式在很多框架/库中存在,好处式引用路径长度短</span><br></pre></td></tr></table></figure></li>
<li><p>工作流设计</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集中式工作流</span></span><br><span class="line">  &gt; 适用于团队人数少、开发不频繁、不需要同时维护多个版本的小项目</span><br><span class="line"></span><br><span class="line"><span class="comment"># 功能分支工作流</span></span><br><span class="line">  &gt; 不同功能在不同的分支进行开发，最后合并到<span class="literal">master</span>分支</span><br><span class="line">  Merge pull request:</span><br><span class="line">    <span class="number">1</span>. Create a merge commit: git merge --no-ff. feature分支上所有的commit都会加到<span class="literal">master</span>分支上，并且会生成一个merge commit。</span><br><span class="line">    <span class="number">2</span>. Squash <span class="keyword">and</span> merge: git merge --squash. feature分支上所有的commit都合并成一个commit.然后加到<span class="literal">master</span>分支,原来的commit历史会丢失</span><br><span class="line">    <span class="number">3</span>. Rebase <span class="keyword">and</span> merge: git rebase. 将pull request上所有提交历史按照原有顺序依次添加到<span class="literal">master</span>分支的头部HEAD.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Git Flow工作流</span></span><br><span class="line">  &gt; 比较适合大型的项目或者迭代速度快的项目</span><br><span class="line">  <span class="literal">master</span>: 该分支最新代码是发布状态，不能直接在该分支上开发，<span class="literal">master</span>分支每合并一个hotfix/release分支，都会打一个版本标签</span><br><span class="line">  develop: 该分支是开发中的最新代码，该分支只做合并操作，不能直接在该分支上开发</span><br><span class="line">  feature: 功能开发,基于develop分支新建一个feature分支，feature分支合并之前先pull一下develop分支，</span><br><span class="line">  release: 在发布阶段作为版本发布的预发布分支，基于develop分支创建, 测试通过后，将release分支合并到<span class="literal">master</span>和develop，并在<span class="literal">master</span>分支上版本标签，最后删除release版本分支</span><br><span class="line">  hotfix: 在维护阶段做紧急Bug修复分支，hotfix分支合并到<span class="literal">master</span>和develop分支，并在<span class="literal">master</span>分支打上修复后的版本标签,最后删除hotfix分支</span><br><span class="line"></span><br><span class="line"><span class="comment"># Forking 工作流</span></span><br><span class="line">  项目远程仓库和开发者远程仓库完全独立，开发者通过Pull Request的方式给远程仓库贡献代码，项目维护者选择性地接收任何开发者的提交，通过这种方式，可以避免开发者项目远程仓库的权限,从而提高项目远程仓库的安全性</span><br></pre></td></tr></table></figure></li>
<li><p>研发流程</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 需求阶段</span></span><br><span class="line"><span class="bullet">  1.</span> 市场调研 - PDM(Product Manager) 产品经理</span><br><span class="line"><span class="bullet">  2.</span> 需求分析 - PM(Project Manager) 项目经理</span><br><span class="line"><span class="bullet">  3.</span> 需求文档 - 最终产物</span><br><span class="line"><span class="bullet">  4.</span> 需求评审</span><br><span class="line"></span><br><span class="line"><span class="section"># 设计阶段</span></span><br><span class="line"><span class="bullet">  1.</span> 交互设计 - UX(User Experience) 交互设计师</span><br><span class="line"><span class="bullet">  2.</span> 视觉设计 - UI(User Interface) 视觉设计师</span><br><span class="line"><span class="bullet">  3.</span> 技术设计</span><br><span class="line"><span class="bullet">  4.</span> 技术评审 - 最终产物</span><br><span class="line"><span class="bullet">  5.</span> 需求排期</span><br><span class="line"></span><br><span class="line"><span class="section"># 开发阶段</span></span><br><span class="line"><span class="bullet">  -</span> 开发 - Makefile - RD(Research and Development engineer) 研发工程师</span><br><span class="line"><span class="bullet">    1.</span> Git Flow工作流</span><br><span class="line"><span class="bullet">    2.</span> 生成代码 -- 尽可能自动生成代码</span><br><span class="line"><span class="bullet">    3.</span> 版权检查</span><br><span class="line"><span class="bullet">    4.</span> 静态代码检查</span><br><span class="line"><span class="bullet">    5.</span> 单元测试</span><br><span class="line"><span class="bullet">    6.</span> 编译</span><br><span class="line"><span class="bullet">    7.</span> 自测</span><br><span class="line"><span class="bullet">    8.</span> Code Review</span><br><span class="line"><span class="bullet">    9.</span> Merge</span><br><span class="line"><span class="bullet">  -</span> 构建 - CI/CD</span><br><span class="line"><span class="bullet">    1.</span> 代码扫描</span><br><span class="line"><span class="bullet">    2.</span> 单元测试</span><br><span class="line"><span class="bullet">    3.</span> 编译打包</span><br><span class="line"><span class="bullet">    4.</span> 归档[镜像仓库]</span><br><span class="line"></span><br><span class="line"><span class="section"># 测试阶段</span></span><br><span class="line">  &gt; 测试阶段为了不阻塞测试，确保项目按时发布，研发人员应该优先解决测试同学的Bug,至少是阻塞类的Bug</span><br><span class="line"><span class="bullet">  1.</span> 功能测试 - QA(Quality Assurance) 质量管理工程师</span><br><span class="line"><span class="bullet">  2.</span> 性能测试 - QE(Quality Engineering) 质量工程师</span><br><span class="line"><span class="bullet">  3.</span> 集成测试</span><br><span class="line"><span class="bullet">  4.</span> 系统测试</span><br><span class="line"></span><br><span class="line"><span class="section"># 发布阶段</span></span><br><span class="line"><span class="bullet">  -</span> 代码发布</span><br><span class="line"><span class="bullet">    1.</span> 合并到主干 - Master分支</span><br><span class="line"><span class="bullet">    2.</span> 生成版本号</span><br><span class="line"><span class="bullet">    3.</span> 打标签</span><br><span class="line"><span class="bullet">    4.</span> 代码扫描</span><br><span class="line"><span class="bullet">    5.</span> 单元测试</span><br><span class="line"><span class="bullet">    6.</span> 编译</span><br><span class="line"><span class="bullet">    7.</span> 发布构建产物</span><br><span class="line"><span class="bullet">  -</span> 发布审批</span><br><span class="line"><span class="bullet">    1.</span> 资源申请</span><br><span class="line"><span class="bullet">    2.</span> 创建发布计划</span><br><span class="line"><span class="bullet">    3.</span> 创建发布单</span><br><span class="line"><span class="bullet">    4.</span> 发布单审批</span><br><span class="line"><span class="bullet">  -</span> 服务发布</span><br><span class="line"><span class="bullet">    1.</span> 预发部署</span><br><span class="line"><span class="bullet">    2.</span> 预发验证</span><br><span class="line"><span class="bullet">    3.</span> 现网部署</span><br><span class="line"><span class="bullet">    4.</span> 现网验证</span><br><span class="line"></span><br><span class="line"><span class="section"># 运营阶段</span></span><br><span class="line"><span class="bullet">  -</span> 产品运营</span><br><span class="line"><span class="bullet">    1.</span> 技术沙龙</span><br><span class="line"><span class="bullet">    2.</span> 技术推文</span><br><span class="line"><span class="bullet">  -</span> 运维运营 - OP(Operation) 运维工程师</span><br><span class="line"><span class="bullet">    1.</span> 运维工具</span><br><span class="line"><span class="bullet">    2.</span> 日志系统</span><br><span class="line"><span class="bullet">    3.</span> 监控告警</span><br></pre></td></tr></table></figure></li>
<li><p>应用生命周期管理</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 研发模式</span></span><br><span class="line"><span class="bullet">  -</span> 瀑布模式</span><br><span class="line"><span class="bullet">    -</span> 优点:</span><br><span class="line"><span class="bullet">      1.</span> 严格按照研发阶段推进研发进度，流程清晰，适合按项目交付的应用</span><br><span class="line"><span class="bullet">    -</span> 缺点:</span><br><span class="line"><span class="bullet">      1.</span> 变更困难</span><br><span class="line"><span class="bullet">      2.</span> 研发周期长</span><br><span class="line"><span class="bullet">  -</span> 迭代模式</span><br><span class="line"><span class="code">    &gt; 不要求每个阶段的任务做到最完美，而是先把主要功能搭建起来，然后通过客户的反馈信息不断完善</span></span><br><span class="line"><span class="code">  - 敏捷模式</span></span><br><span class="line"><span class="code">    &gt; 敏捷模式把一个大的需求分成多个、可分阶段完成的小迭代，每个迭代交付的都是一个可使用的软件，开发过程中，软件要一致处于可使用状态</span></span><br><span class="line"><span class="code">    - Scrum开发模式</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># CI/CD</span></span><br><span class="line">  CI: Continuous Integration, 持续集成</span><br><span class="line">  CD: Continous Delivery, 持续交付</span><br><span class="line">  CD: Continous Deployment, 持续部署</span><br><span class="line"></span><br><span class="line"><span class="section"># DevOps: 研发运维一体化</span></span><br><span class="line"><span class="bullet">  -</span> AIOps: 职能运维</span><br><span class="line"><span class="bullet">  -</span> ChatOps: 通过聊天窗口的机器人Bot出发任务</span><br><span class="line"><span class="bullet">  -</span> GitOps:</span><br><span class="line"><span class="code">    &gt; 开发人员开发完代码后推送Git仓库，触发CI流程，CI流程通过编译构建出Docker镜像，并将镜像push到Docker镜像仓库，Push动作触发Push事件，通过webhook形式通知Config Updater服务，Config Updater服务从镜像仓库中下载镜像，并更新Git仓库中的kubernetes YAML文件</span></span><br><span class="line"><span class="code">  - NoOps:</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="介绍Web框架"><a href="#介绍Web框架" class="headerlink" title="介绍Web框架"></a>介绍Web框架</h2><ul>
<li>Gin<blockquote>
<p>Go编写的web框架，是一个类似martini性能更好的API框架</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> Engine: 初始化gin对象实例，</span><br><span class="line">  日志</span><br><span class="line">  中间件</span><br><span class="line">  路由控制</span><br><span class="line">  handlercontext</span><br><span class="line"><span class="bullet">2.</span> Router: 定义各种路由规则和条件</span><br><span class="line"><span class="bullet">3.</span> Context: 允许在中间件中共享变量，管理整个流程，验证请求的json以及提供</span><br><span class="line"><span class="bullet">4.</span> Bind:</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="介绍微服务架构设计"><a href="#介绍微服务架构设计" class="headerlink" title="介绍微服务架构设计"></a>介绍微服务架构设计</h2><ul>
<li><p>服务化基础设施技术选型</p>
<ul>
<li>服务间通信中间件<ul>
<li>同步方式: RPC</li>
<li>异步方式: MQ</li>
</ul>
</li>
</ul>
</li>
<li><p>客户端一致性</p>
<blockquote>
<p>共享相同connection可以在同一个事务里</p>
</blockquote>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">1. begin tx 开启本地事务</span><br><span class="line">2. <span class="meta">do</span> work 执行业务操作</span><br><span class="line">3. <span class="meta">insert</span> <span class="meta">message</span> 向同实例消息库插入消息</span><br><span class="line">4. <span class="meta">end</span> tx 事务提交</span><br><span class="line">5. send <span class="meta">message</span> 网络向server发送消息</span><br><span class="line">6. response server 回应消息</span><br><span class="line">7. <span class="meta">delete</span> <span class="meta">message</span> 如果server回复成功则删除消息</span><br><span class="line">8. scan <span class="meta">message</span> 补偿任务扫描未发送消息</span><br><span class="line">9. send <span class="meta">message</span> 补偿任务补偿消息</span><br><span class="line">10. <span class="meta">delete</span> <span class="meta">message</span> 补偿任务删除补偿成功的消息</span><br></pre></td></tr></table></figure></li>
<li><p>服务端存储模型</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"># Kafka RocketMQ基于partition存储模型</span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">每个subject分为一个或多个partition，而Server收到消息后将其分发到某个partition上，而concumer消费的时候与partition对应。合理的分配策略是partition个数与consumer个数成倍数关系.</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">静态绑定关系导致consumer扩容缩容比较麻烦</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">顺序append文件，提供很好的性能</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">顺序消费文件，使用offset表示消费进度，不给给个消息记录消费状态,成本极低</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">将所有subject的消息合并在一起</span></span><br><span class="line"></span><br><span class="line"># 业务使用消息 vs. 数据流处理区别</span><br><span class="line">  &gt; 数据流中消息主题少，每个消息主题的吞吐量极大</span><br><span class="line">  &gt; 业务中消息主题极多，很多主题量级很小</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="BFF-Backend-For-Frontend-服务于前端的后端"><a href="#BFF-Backend-For-Frontend-服务于前端的后端" class="headerlink" title="BFF - Backend For Frontend 服务于前端的后端"></a>BFF - Backend For Frontend 服务于前端的后端</h2><blockquote>
<p>用户体验适配器</p>
</blockquote>
<h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul>
<li>计算中所有文件都可以通过添加一个中间层来解决，一个中间层解决不了就添加两个</li>
</ul>
]]></content>
      <categories>
        <category>计算机科学</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>DDD</tag>
        <tag>分布式</tag>
        <tag>工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>Distributed ID Generator</title>
    <url>/2021/09/02/Distributed-ID-Generator/</url>
    <content><![CDATA[<blockquote>
<p>分布式ID生成器</p>
</blockquote>
<span id="more"></span>

<h1 id="Distributed-ID-Generator"><a href="#Distributed-ID-Generator" class="headerlink" title="Distributed ID Generator"></a>Distributed ID Generator</h1><ul>
<li>UUID<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func BenchmarkUUID(t *testing.B) &#123;</span><br><span class="line">  for i := 0; i &lt; t.N; i++ &#123;</span><br><span class="line">    _ = uuid.New()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~/Downloads/uuid_demo via 🐹 v1.17 took 13s</span><br><span class="line">➜ go test -bench=.</span><br><span class="line"><span class="section">goos: darwin</span></span><br><span class="line"><span class="section">goarch: amd64</span></span><br><span class="line"><span class="section">pkg: uuid_demo</span></span><br><span class="line"><span class="section">cpu: Intel(R) Core(TM) i5-5257U CPU @ 2.70GHz</span></span><br><span class="line">BenchmarkUUID-4   	 1390710	       844.7 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok  	uuid_demo	2.351s</span><br><span class="line"></span><br><span class="line"><span class="comment"># UUIDs are 128-bit hexadecimal numbers that are globally unique</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优点:</span></span><br><span class="line">  1. 生成足够简单，本地生成无网络消耗，具有唯一性</span><br><span class="line"><span class="comment"># 缺点:</span></span><br><span class="line">  1. 无序的字符串，不具备趋势自增特性</span><br><span class="line">  2. 没有具体的业务含义</span><br><span class="line">  3. 长度过长16字节128位,36位长度的字符串,存储以及查询数据库性能消耗较大,数据库建议主键尽量越短越好，作为数据库主键UUID的无序性会导致数据位置频繁变动，严重影响性能</span><br></pre></td></tr></table></figure></li>
<li>基于数据库自增ID<blockquote>
<p>基于数据库的auto_increment自增ID完成可以充当分布式ID</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># 创建数据表</span><br><span class="line">mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SEQUENCE_ID (id <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment, <span class="keyword">value</span> <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>, <span class="keyword">PRIMARY KEY</span> (id)) ENGINE=MyISAM;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> <span class="built_in">warning</span> (<span class="number">0.08</span> sec)</span><br><span class="line"></span><br><span class="line"># MySQL使用存储过程插入数据</span><br><span class="line"><span class="keyword">delimiter</span> $$<span class="pgsql"></span></span><br><span class="line"><span class="pgsql"><span class="keyword">create</span> <span class="keyword">procedure</span> bench_insert(count <span class="type">int</span> unsigned)</span></span><br><span class="line"><span class="pgsql"><span class="keyword">BEGIN</span></span></span><br><span class="line"><span class="pgsql">  <span class="keyword">declare</span> num <span class="type">int</span> unsigned <span class="keyword">default</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="pgsql">  <span class="keyword">declare</span> c <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">default</span> repeat(<span class="string">&#x27;c&#x27;</span>,<span class="number">10</span>);</span></span><br><span class="line"><span class="pgsql">  <span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span></span><br><span class="line"><span class="pgsql">  <span class="keyword">while</span> num &lt;= count <span class="keyword">DO</span></span></span><br><span class="line"><span class="pgsql">    <span class="keyword">insert</span> <span class="keyword">into</span> SEQUENCE_ID(`<span class="keyword">value</span>`) <span class="keyword">values</span>(c);</span></span><br><span class="line"><span class="pgsql">    <span class="keyword">set</span> num=num+<span class="number">1</span>;</span></span><br><span class="line"><span class="pgsql">  <span class="keyword">end</span> <span class="keyword">while</span>;</span></span><br><span class="line"><span class="pgsql"><span class="keyword">COMMIT</span>;</span></span><br><span class="line"><span class="pgsql"><span class="keyword">END</span>$$</span> <span class="keyword">delimiter</span> ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> bench_insert(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">PROCEDURE</span> bench_insert;</span><br><span class="line"></span><br><span class="line"># 当需要ID的时候，向表中插入记录返回主键ID.</span><br><span class="line"></span><br><span class="line"># 优点:</span><br><span class="line">  <span class="number">1.</span> 实现简单、ID单调自增、数值类型查询速度快</span><br><span class="line"></span><br><span class="line">缺点:</span><br><span class="line">  <span class="number">1.</span> DB单点存在宕机风险，无法扛住高并发场景</span><br></pre></td></tr></table></figure></li>
<li>基于数据库集群模式<blockquote>
<p>多数据库实例单独生产自增ID</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 设置启始值和自增布长</span><br><span class="line">  DB1:</span><br><span class="line">    <span class="keyword">set</span> @<span class="variable">@auto</span>_increment_offset <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 起始值</span></span><br><span class="line">    <span class="keyword">set</span> @<span class="variable">@auto</span>_increment_increment <span class="operator">=</span> <span class="number">2</span>; <span class="comment">-- 步长</span></span><br><span class="line">  DB2:</span><br><span class="line">    <span class="keyword">set</span> @<span class="variable">@auto</span>_increment_offset <span class="operator">=</span> <span class="number">2</span>; <span class="comment">-- 起始值</span></span><br><span class="line">    <span class="keyword">set</span> @<span class="variable">@auto</span>_increment_increment <span class="operator">=</span> <span class="number">2</span>; <span class="comment">-- 步长</span></span><br><span class="line"></span><br><span class="line"># 优点:</span><br><span class="line">  解决DB单点问题</span><br><span class="line"></span><br><span class="line"># 缺点:</span><br><span class="line">  不利于后续扩容，而且实际上单个数据库自身压力还是很大，依旧无法满足高并发场景</span><br></pre></td></tr></table></figure></li>
<li>基于数据库的号段模式<blockquote>
<p>号段模式是分布式ID生成器主流实现方式之一，批量获取自增ID，每次从数据库取出一个号段范围，具体业务服务将本号段生成的自增ID加载内存</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">  mysql&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> id_generator (id <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, max_id <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;当前最大id&#x27;</span>, step <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;号段的布长&#x27;</span>, biz_type <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;业务类型&#x27;</span>, <span class="keyword">version</span> <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;版本号&#x27;</span>, <span class="keyword">PRIMARY KEY</span>(`id`));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">5</span> warnings (<span class="number">0.11</span> sec)</span><br><span class="line"></span><br><span class="line">  mysql&gt; describe id_generator;</span><br><span class="line">  +<span class="comment">----------+--------+------+-----+---------+-------+</span></span><br><span class="line">  | Field    | <span class="keyword">Type</span>   | <span class="keyword">Null</span> | Key | <span class="keyword">Default</span> | Extra |</span><br><span class="line">  +<span class="comment">----------+--------+------+-----+---------+-------+</span></span><br><span class="line">  | id       | <span class="type">int</span>    | <span class="keyword">NO</span>   | PRI | <span class="keyword">NULL</span>    |       |</span><br><span class="line">  | max_id   | <span class="type">bigint</span> | <span class="keyword">NO</span>   |     | <span class="keyword">NULL</span>    |       |  <span class="comment">-- 当前最大的可用id</span></span><br><span class="line">  | step     | <span class="type">int</span>    | <span class="keyword">NO</span>   |     | <span class="keyword">NULL</span>    |       |  <span class="comment">-- 代表号段的长度</span></span><br><span class="line">  | biz_type | <span class="type">int</span>    | <span class="keyword">NO</span>   |     | <span class="keyword">NULL</span>    |       |  <span class="comment">-- 不同业务类型</span></span><br><span class="line">  | <span class="keyword">version</span>  | <span class="type">int</span>    | <span class="keyword">NO</span>   |     | <span class="keyword">NULL</span>    |       |  <span class="comment">-- 乐观锁，每次都更新version，保证并发时数据的正确性</span></span><br><span class="line">  +<span class="comment">----------+--------+------+-----+---------+-------+</span></span><br><span class="line">  <span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">update</span> id_generator <span class="keyword">set</span> max_id = #&#123;max_id+step&#125;, version = <span class="keyword">version</span> + <span class="number">1</span> <span class="keyword">where</span> version = # &#123;<span class="keyword">version</span>&#125; <span class="keyword">and</span> biz_type = XXX</span><br></pre></td></tr></table></figure></li>
<li>基于Redis模式<blockquote>
<p>利用redis Incr 原子性自增</p>
</blockquote>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="number">172.30.1.23</span>:<span class="number">6002</span>&gt; set seq_id <span class="number">1</span></span><br><span class="line">  OK</span><br><span class="line">  <span class="number">172.30.1.23</span>:<span class="number">6002</span>&gt; incr seq_id</span><br><span class="line">  (integer) <span class="number">2</span></span><br><span class="line">  <span class="number">172.30.1.23</span>:<span class="number">6002</span>&gt; get seq_id</span><br><span class="line">  &quot;<span class="number">2</span>&quot;</span><br><span class="line">  <span class="number">172.30.1.23</span>:<span class="number">6002</span>&gt;</span><br><span class="line"></span><br><span class="line"># Benchmark</span><br><span class="line">ubuntu in ~ at <span class="number">3</span>BPlus took <span class="number">4</span>s</span><br><span class="line">➜ redis-benchmark -n <span class="number">1000000</span> -t set,get,incr -P <span class="number">16</span> -q -h <span class="number">127.0.0.1</span> -p <span class="number">6001</span> --cluster</span><br><span class="line">Cluster has <span class="number">3</span> master nodes:</span><br><span class="line"></span><br><span class="line">Master <span class="number">0</span>: a733c21d3b735b9d026eb4d462ef6b367d8ebb<span class="number">98 172.30.1</span>.<span class="number">23</span>:<span class="number">6002</span></span><br><span class="line">Master <span class="number">1</span>: <span class="number">9</span>c35a4e211f6534861ed768dba592e<span class="number">85539b1377</span> <span class="number">172.30.1.23</span>:<span class="number">6003</span></span><br><span class="line">Master <span class="number">2</span>: a901e497cb72819cf0765e9e4eb16c36399c437b <span class="number">172.30.1.23</span>:<span class="number">6001</span></span><br><span class="line"></span><br><span class="line">SET: <span class="number">47001.32</span> requests per second, p<span class="number">50=15.199</span> msec</span><br><span class="line">GET: <span class="number">101936.80</span> requests per second, p<span class="number">50=5.679</span> msec</span><br><span class="line">INCR: <span class="number">46496.49</span> requests per second, p<span class="number">50=13.879</span> msec   -- 并发<span class="number">5</span>万/s</span><br></pre></td></tr></table></figure></li>
<li>twitter snowflake<blockquote>
<p>雪花算法 (Snowflake) Twitter内部分布式采用的ID生成算法</p>
</blockquote>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section"># The default Twitter format shown below.</span></span><br><span class="line"><span class="section">+--------------------------------------------------------------------------+</span></span><br><span class="line"><span class="section">| 1 Bit Unused | 41 Bit Timestamp |  10 Bit NodeID  |   12 Bit Sequence ID |</span></span><br><span class="line"><span class="section">+--------------------------------------------------------------------------+</span></span><br><span class="line"></span><br><span class="line">41 bits: store a timestamp with millisecond precision</span><br><span class="line">10 bits: store a node id - a range from 0 through 1023</span><br><span class="line">12 bits: store a sequence number - a range from 0 through 4095</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>ID Generator</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka Tips &amp; Tracks</title>
    <url>/2021/09/02/Kafka-Tips-Tracks/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MySQL Tips &amp; Tracks</title>
    <url>/2021/09/02/MySQL-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="数据库-三大范式"><a href="#数据库-三大范式" class="headerlink" title="数据库-三大范式"></a>数据库-三大范式</h1><ul>
<li>原子性: 字段不可分</li>
<li>唯一性: 有主键(没有主键就没有唯一性)，非主键字段依赖主键</li>
<li>消除冗余: 每列都与主键有直接关系, 非主键字段不能相互依赖</li>
</ul>
<span id="more"></span>

<h2 id="MySQL事务模型-ACID"><a href="#MySQL事务模型-ACID" class="headerlink" title="MySQL事务模型 ACID"></a>MySQL事务模型 ACID</h2><blockquote>
<p>MySQL事务的四个特性中ACD三个特性是通过Redo Log(重做日志)和Undo Log(撤销日志)实现,而I隔离型通过Lock实现</p>
</blockquote>
<ul>
<li><p>事务是可以提交或回滚的原子工作单元</p>
</li>
<li><p>ACID模型是一组数据库设计原则</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">A:</span> atomicity原子性: 事务中一系列的操作，要么全部都执行，要么全部都不执行</span><br><span class="line"><span class="symbol">C:</span> consistency一致性(通过AID保证): 数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性</span><br><span class="line"><span class="symbol">I:</span> isolation 隔离性(事务的隔离级别): 并发环境下，不同事务同时操作相同的数据，每个事务都有各自的完成数据空间</span><br><span class="line"><span class="symbol">D:</span> durability持久性: 只要事务成功结束，对数据库所做的更新就永久保存下来，即使发生系统崩溃，重新启动数据库，数据库还能恢复到事务成功结束时的状态</span><br></pre></td></tr></table></figure></li>
<li><p>InnoDB 存储引擎架构<br><img src="/misc/images/InnoDB-architecture.jpeg" alt="InnoDB Architecture"></p>
</li>
<li><p>并发问题</p>
<ul>
<li>脏读: Drity Read: 读取到未提交的数据</li>
<li>不可重复读: Non-repeatable read: 两次读取结果不同</li>
<li>幻读 Phantom Read: select操作得到的结果所表证的数据状态无法支撑后续的业务操作</li>
</ul>
</li>
<li><p>InnoDB 四种隔离级别</p>
<ul>
<li>READ UNCOMMITED 读未提交 –&gt; 脏读</li>
<li>READ COMMITTED 读已提交 –&gt;  不可重复读</li>
<li>REPEATABLE READ 可重复读 –&gt; 幻读</li>
<li>SERIALIZABLE 串行化</li>
</ul>
</li>
</ul>
<h2 id="数据库日志"><a href="#数据库日志" class="headerlink" title="数据库日志"></a>数据库日志</h2><ul>
<li><p>WAL - Write Ahead Log</p>
<blockquote>
<p>实际写数据前，先把修改的数据记到日志文件中，以便故障时进行修复</p>
</blockquote>
</li>
<li><p>重做日志 - redo log</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> 记录修改后的数据</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 用于异常恢复</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> 循环写文件</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; write Pos: 写入位置</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Check Point: 刷盘位置</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; Check Point -&gt; Write Pos: 待落盘</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt; innodb_flush_log_at_trx_commit: 刷盘时机</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 0 commit 每秒写文件,并刷盘</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; 1 commit 每次提交时写文件，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> MySQL redo-log:</span></span><br><span class="line">  1. 体积小，记录页的修改，比写入页代价低</span><br><span class="line">  2. 末尾追加，随机写变顺序写，发生改变的页不固定</span><br></pre></td></tr></table></figure></li>
<li><p>回滚日志 - Undo Log</p>
<blockquote>
<p>回滚日志记录的集合，包含如何撤销事务对聚集索引记录的最新更新的信息</p>
</blockquote>
<ul>
<li><p>保证事务原子性</p>
</li>
<li><p>实现数据多版本</p>
</li>
<li><p>delete undo log: 用于回滚，提交即清理</p>
</li>
<li><p>update undo log:</p>
</li>
<li><p>undo log如何清理:</p>
<ul>
<li>依据系统活跃的最小活跃事务ID Read view</li>
</ul>
</li>
<li><h2 id="为什么InnoDB-count-这么慢"><a href="#为什么InnoDB-count-这么慢" class="headerlink" title="为什么InnoDB count(*) 这么慢?"></a>为什么InnoDB count(*) 这么慢?</h2></li>
</ul>
</li>
</ul>
<h2 id="MySQl多版本并发控制-MVCC"><a href="#MySQl多版本并发控制-MVCC" class="headerlink" title="MySQl多版本并发控制 - MVCC"></a>MySQl多版本并发控制 - MVCC</h2><blockquote>
<p>使得InnoDB的事务隔离级别下执行一致性读操作有保证, 查询一个被另一个事务更新的行，可以看到被更新之前的值<br>多版本并发控制，解决读写冲突问题</p>
</blockquote>
<ul>
<li>InnoDB MVCC实现<ul>
<li>当前读 – Select for update</li>
<li>快照读 – Select Current_TRX_ID</li>
<li>可见性判断<ul>
<li>创建快照这一刻，还未提交的事务，在此生命周期中无法读取</li>
<li>创建快照之后创建的事务无法读取</li>
</ul>
</li>
<li>Read View<ul>
<li>快照读 活跃事务列表</li>
<li>活跃事务列表中最小事务ID</li>
<li>活跃事务列表中最大事务ID<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">InnoDB</span>向数据库中存储的每一行数据添加三个字段隐藏字段</span><br><span class="line"><span class="attribute">1</span>. DB_TRX_ID: <span class="number">6</span>字节 表示插入或更新最后一个事务的事务标识符 全局递增</span><br><span class="line"><span class="attribute">2</span>. DB_ROLL_PTR: <span class="number">7</span>字节 回滚指针 roll pointer, 指向写入回滚段撤销日志Undo Log</span><br><span class="line"><span class="attribute">3</span>. DB_ROW_ID: <span class="number">6</span>字节 随着新行插入而单调增加的行ID</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>  <img src="/misc/images/mvcc.jpeg" alt="mvcc"></p>
<ul>
<li>InnoDB Locking<ul>
<li>Shared and Exclusive Locks - 共享锁和排他锁<ul>
<li>A Shared Lock 允许持有锁的事务读取该行</li>
<li>An Exclusive Lock 允许持有锁的事务更新和删除该行<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">假设事务T1对数据行r持有共享锁(Shared <span class="keyword">Lock</span>),另一个事务T2对同一数据行r的操作分下面两种情况:</span><br><span class="line">  <span class="number">1.</span> T2对数据行r仅仅是读取请求持有(Shared <span class="keyword">Lock</span>)成功，结果是T1和T2对数据行r都持有共享锁</span><br><span class="line">  <span class="number">2.</span> T2对数据行人需要<span class="keyword">Update</span>请求持有(<span class="keyword">Exclusive</span> <span class="keyword">Lock</span>)会失败</span><br><span class="line"></span><br><span class="line">假设事务T1对数据行r持有排他锁(<span class="keyword">exclusive</span> <span class="keyword">lock</span>),另一个事务T2对同一数据行r的锁请求(共享锁/排他锁)都会失败,事务T2不得不等待事务T1释放锁</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="MySQL-存储引擎"><a href="#MySQL-存储引擎" class="headerlink" title="MySQL 存储引擎"></a>MySQL 存储引擎</h2><ul>
<li><p>Page</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">&gt; 页Page : 16KB, 存储IO的基本单元</span><br><span class="line">Page Header: 页头, 记录页面的控制信息，占用56字节，包括页的左右兄弟页面指针，页面空间使用情况</span><br><span class="line"><span class="section">虚记录:</span></span><br><span class="line">  最大虚记录,比页内最大主键大</span><br><span class="line">  最小虚记录,比页内最小主键小</span><br><span class="line"><span class="section">记录堆: 行记录存储区</span></span><br><span class="line">  有效记录</span><br><span class="line">  已删除记录</span><br><span class="line"><span class="section">自由空间链表: 已删除记录组成的链表</span></span><br><span class="line"><span class="section">未分配空间: 页内未使用的存储空间</span></span><br><span class="line">Slot 区: 连续空间平均分配</span><br><span class="line">Page Tailer: 页尾, 占8字节，存储页面的校验信息</span><br></pre></td></tr></table></figure></li>
<li><p>索引B+树</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 顺序保证</span></span><br><span class="line"><span class="bullet">  -</span> 物理有序: 数组，二分查找, 支持随机读,</span><br><span class="line"><span class="bullet">  -</span> 逻辑有序: 链表, 支持随机写,</span><br><span class="line"><span class="section"># 插入策略</span></span><br><span class="line"><span class="bullet">  -</span> 自由空间链表</span><br><span class="line"><span class="bullet">  -</span> 未使用空间</span><br><span class="line"><span class="bullet">  -</span> 收缩数据库,解决数据库page碎片</span><br><span class="line"><span class="section"># 页内查询</span></span><br><span class="line"><span class="bullet">  -</span> 遍历</span><br><span class="line"><span class="bullet">  -</span> 二分查找</span><br><span class="line"><span class="bullet">  -</span> skip list</span><br></pre></td></tr></table></figure></li>
<li><p>InnoDB内存管理</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"> 预分配内存空间:</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Buffer Pool(预分配内存池)<span class="symbol">:</span>页面加载单位Page</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> <span class="symbol">Page:</span> Buffer Pool 的最小单位</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Free <span class="symbol">List:</span> 空闲Page组成的链表</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Flush <span class="symbol">List:</span> 脏页列表</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Page Hash表: 维护内存Page和文件Page的映射关系</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> <span class="symbol">LRU:</span> 内存淘汰算法- 释放刷盘</span></span><br><span class="line"><span class="ruby"></span>      LRU_new: 存储热数据</span><br><span class="line">      LRU_old: 存储冷数据</span><br><span class="line">      Midpoint:</span><br><span class="line">-<span class="ruby"> 数据页面加载单元:</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 磁盘数据到内存</span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby"> 数据内外存交换:</span></span><br><span class="line"><span class="ruby"></span>-<span class="ruby"> 内存管理的技术点:</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 内存池</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 内存页面管理</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 空闲页</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 数据页</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 脏页: 数据被Update 需要刷盘</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 页面映射</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 页面数据管理</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 数据淘汰:</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> <span class="symbol">LRU:</span> 最经常被访问的数据放在表头，默认删除表尾</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> <span class="symbol">LFU:</span> 使用频率淘汰算法, Redis 使用使用LFU淘汰算法</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 双<span class="symbol">LRU:</span> 热表LRU，冷表LRU</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 全表扫描对内存的影响?</span></span><br><span class="line"><span class="ruby"></span>      &gt; 导致热数据被替换, 缓冲区被污染，导致数据库性能下降</span><br><span class="line">    -<span class="ruby"> 避免全表扫描对热数据的影响</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="MySQL-锁实现原理"><a href="#MySQL-锁实现原理" class="headerlink" title="MySQL 锁实现原理"></a>MySQL 锁实现原理</h2><ul>
<li><p>锁颗粒度</p>
<ul>
<li>行级锁<ul>
<li>作用在索引(聚簇索引、二级索引)行</li>
<li>是否是唯一索引</li>
</ul>
</li>
<li>间隙锁<ul>
<li>解决可重复读模式下的幻读问题</li>
<li>GAP锁不是加载记录上</li>
<li>GAP锁锁住的位置是两条记录之间的GAP</li>
<li>保证两次当前读返回一致的记录</li>
</ul>
</li>
<li>表级锁<ul>
<li>lock tables</li>
<li>元数据锁(meta data lock, MDL)</li>
<li>全表扫描”表锁”</li>
</ul>
</li>
</ul>
</li>
<li><p>类型</p>
<ul>
<li>共享锁S<ul>
<li>读锁，可以同时被多个事务获取，阻止其他事务对记录的修改</li>
</ul>
</li>
<li>排他锁X<ul>
<li>写锁</li>
</ul>
</li>
</ul>
</li>
<li><h2 id="所有当前读加排他锁"><a href="#所有当前读加排他锁" class="headerlink" title="所有当前读加排他锁:"></a>所有当前读加排他锁:</h2></li>
</ul>
<h2 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h2><ul>
<li><p>in, not in, exists, not exists</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">➜ mysql -h 127.0.0.1 -u chyi -P 13306 -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 223</span><br><span class="line">Server version: 8.0.26-0ubuntu0.20.04.2 (Ubuntu)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="emphasis">&#x27;help;&#x27;</span> or <span class="emphasis">&#x27;\h&#x27;</span> for help. Type <span class="emphasis">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; use develop;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; DROP TABLE IF EXISTS <span class="code">`t1`</span>;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE TABLE <span class="code">`t1`</span> (<span class="code">`id`</span> int(11) NOT NULL AUTO_INCREMENT, <span class="code">`name`</span> varchar(255) DEFAULT NULL, <span class="code">`addreee`</span> varchar(255) DEFAULT NULL, PRIMARY KEY(<span class="code">`id`</span>)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO <span class="string">`t1` VALUES (&#x27;</span>1001&#x27;, <span class="emphasis">&#x27;张三&#x27;</span>, <span class="emphasis">&#x27;北京&#x27;</span>), (<span class="emphasis">&#x27;1002&#x27;</span>, <span class="emphasis">&#x27;李四&#x27;</span>, <span class="emphasis">&#x27;天津&#x27;</span>), (<span class="emphasis">&#x27;1003&#x27;</span>, <span class="emphasis">&#x27;王五&#x27;</span>, <span class="emphasis">&#x27;北京&#x27;</span>), (<span class="emphasis">&#x27;1004&#x27;</span>, <span class="emphasis">&#x27;赵六&#x27;</span>, <span class="emphasis">&#x27;河北&#x27;</span>), (<span class="emphasis">&#x27;1005&#x27;</span>, <span class="emphasis">&#x27;杰克&#x27;</span>, <span class="emphasis">&#x27;河南&#x27;</span>), (<span class="emphasis">&#x27;1006&#x27;</span>, <span class="emphasis">&#x27;汤姆&#x27;</span>, <span class="emphasis">&#x27;河南&#x27;</span>), (<span class="emphasis">&#x27;1007&#x27;</span>, <span class="emphasis">&#x27;贝尔&#x27;</span>, <span class="emphasis">&#x27;上海&#x27;</span>), (<span class="emphasis">&#x27;1008&#x27;</span>, <span class="emphasis">&#x27;孙琪&#x27;</span>, <span class="emphasis">&#x27;北京&#x27;</span>);</span><br><span class="line">Query OK, 8 rows affected (0.04 sec)</span><br><span class="line">Records: 8  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; select * from t1;</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line"><span class="section">| id   | name   | addreee |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">| 1001 | 张三   | 北京    |</span><br><span class="line">| 1002 | 李四   | 天津    |</span><br><span class="line">| 1003 | 王五   | 北京    |</span><br><span class="line">| 1004 | 赵六   | 河北    |</span><br><span class="line">| 1005 | 杰克   | 河南    |</span><br><span class="line">| 1006 | 汤姆   | 河南    |</span><br><span class="line">| 1007 | 贝尔   | 上海    |</span><br><span class="line"><span class="section">| 1008 | 孙琪   | 北京    |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">8 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; DROP TABLE IF EXISTS <span class="code">`t2`</span>;</span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE TABLE <span class="code">`t2`</span> (<span class="code">`id`</span> int(11) NOT NULL AUTO_INCREMENT, <span class="code">`name`</span> varchar(255), <span class="code">`address`</span> varchar(255), PRIMARY KEY(<span class="code">`id`</span>)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1001, &#x27;</span>张三<span class="emphasis">&#x27;, &#x27;</span>北京<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.04 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1004, &#x27;</span>赵六<span class="emphasis">&#x27;, &#x27;</span>河北<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.05 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1005, &#x27;</span>杰克<span class="emphasis">&#x27;, &#x27;</span>河南<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.04 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1007, &#x27;</span>贝尔<span class="emphasis">&#x27;, &#x27;</span>上海<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.03 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1008, &#x27;</span>孙琪<span class="emphasis">&#x27;, &#x27;</span>北京<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.04 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1009, &#x27;</span>曹操<span class="emphasis">&#x27;, &#x27;</span>魏国<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.04 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1010, &#x27;</span>刘备<span class="emphasis">&#x27;, &#x27;</span>蜀国<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.04 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1011, &#x27;</span>孙权<span class="emphasis">&#x27;, &#x27;</span>吴国<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.04 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1012, &#x27;</span>诸葛亮<span class="emphasis">&#x27;, &#x27;</span>蜀国<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.04 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1013, &#x27;</span>典韦<span class="emphasis">&#x27;, &#x27;</span>魏国<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.04 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span><span class="section">mysql&gt; select * FROM t1 where name not in (select name from t2);</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line"><span class="section">| id   | name   | addreee |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">| 1002 | 李四   | 天津    |</span><br><span class="line">| 1003 | 王五   | 北京    |</span><br><span class="line"><span class="section">| 1006 | 汤姆   | 河南    |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">3 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; select * from t1 where not exists (select name from t2 where t1.name = t2.name);</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line"><span class="section">| id   | name   | addreee |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">| 1002 | 李四   | 天津    |</span><br><span class="line">| 1003 | 王五   | 北京    |</span><br><span class="line"><span class="section">| 1006 | 汤姆   | 河南    |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">3 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO <span class="string">`t2` VALUES (1014, NULL, &#x27;</span>魏国<span class="emphasis">&#x27;);</span></span><br><span class="line"><span class="emphasis">Query OK, 1 row affected (0.05 sec)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span># not in 需要保证自查询的匹配字段是非空的</span><br><span class="line">mysql&gt; select * FROM t1 where name not in (select name from t2);</span><br><span class="line">Empty set (0.04 sec)</span><br><span class="line"></span><br><span class="line"># exists 返回的结果是一个boolean值 true或者false,而不关心某个结果集</span><br><span class="line"><span class="section">mysql&gt; select * from t1 where not exists (select name from t2 where t1.name = t2.name);</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line"><span class="section">| id   | name   | addreee |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">| 1002 | 李四   | 天津    |</span><br><span class="line">| 1003 | 王五   | 北京    |</span><br><span class="line"><span class="section">| 1006 | 汤姆   | 河南    |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">3 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line"># 自查询中name可以修改为其他任意的字段,执行效率上1&gt;column&gt;*</span><br><span class="line"><span class="section">mysql&gt; select * from t1 where not exists (select 1 from t2 where t1.name = t2.name);</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line"><span class="section">| id   | name   | addreee |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">| 1002 | 李四   | 天津    |</span><br><span class="line">| 1003 | 王五   | 北京    |</span><br><span class="line"><span class="section">| 1006 | 汤姆   | 河南    |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">3 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line"># in, exists 执行流程</span><br><span class="line"># 对于in查询来说，会先执行子查询，然后把查询得到的结果和外表t1做笛卡尔，通过条件进行筛选(name是否相等)</span><br><span class="line"><span class="section">mysql&gt; select * from t1 where name in (select name from t2);</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line"><span class="section">| id   | name   | addreee |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">| 1001 | 张三   | 北京    |</span><br><span class="line">| 1004 | 赵六   | 河北    |</span><br><span class="line">| 1005 | 杰克   | 河南    |</span><br><span class="line">| 1007 | 贝尔   | 上海    |</span><br><span class="line"><span class="section">| 1008 | 孙琪   | 北京    |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">5 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line"># exists,先查询便利外表t1,然后每次遍历时，在检查内标是否符合匹配条件</span><br><span class="line"><span class="section">mysql&gt; select * from t1 where exists (select 1 from t2 where t1.name = t2.name);</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line"><span class="section">| id   | name   | addreee |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">| 1001 | 张三   | 北京    |</span><br><span class="line">| 1004 | 赵六   | 河北    |</span><br><span class="line">| 1005 | 杰克   | 河南    |</span><br><span class="line">| 1007 | 贝尔   | 上海    |</span><br><span class="line"><span class="section">| 1008 | 孙琪   | 北京    |</span></span><br><span class="line"><span class="section">+------+--------+---------+</span></span><br><span class="line">5 rows in set (0.03 sec)</span><br><span class="line"></span><br><span class="line"># 当 in 值多了之后，就不走索引了; 推测MySQL对in查询的成本优化器CBO</span><br><span class="line"><span class="section">mysql&gt; explain select * from t1 where id in (1001, 1002, 1003, 1004, 1005, 1006, 1007);</span></span><br><span class="line"><span class="section">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="section">| id | select_type | table | partitions | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |</span></span><br><span class="line"><span class="section">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="section">|  1 | SIMPLE      | t1    | NULL       | range | PRIMARY       | PRIMARY | 4       | NULL |    7 |   100.00 | Using where |</span></span><br><span class="line"><span class="section">+----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in set, 1 warning (0.03 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; explain select * from t1 where id in (1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010);</span></span><br><span class="line"><span class="section">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="section">| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |</span></span><br><span class="line"><span class="section">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="section">|  1 | SIMPLE      | t1    | NULL       | ALL  | PRIMARY       | NULL | NULL    | NULL |    8 |   100.00 | Using where |</span></span><br><span class="line"><span class="section">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line">1 row in set, 1 warning (0.03 sec)</span><br><span class="line"></span><br><span class="line"># 如果查询的两个表大小相当，用in和exist差别不大，如果两个表中一个较小一个较大，则子查询表大的用exists,子查询表小的用in.</span><br><span class="line"></span><br><span class="line"><span class="section">mysql&gt; explain select * from t1 where id in (select id from t2);</span></span><br><span class="line"><span class="section">+----+-------------+-------+------------+--------+---------------+---------+---------+---------------+------+----------+-------------+</span></span><br><span class="line"><span class="section">| id | select_type | table | partitions | type   | possible_keys | key     | key_len | ref           | rows | filtered | Extra       |</span></span><br><span class="line"><span class="section">+----+-------------+-------+------------+--------+---------------+---------+---------+---------------+------+----------+-------------+</span></span><br><span class="line">|  1 | SIMPLE      | t1    | NULL       | ALL    | PRIMARY       | NULL    | NULL    | NULL          |    8 |   100.00 | NULL        |</span><br><span class="line"><span class="section">|  1 | SIMPLE      | t2    | NULL       | eq_ref | PRIMARY       | PRIMARY | 4       | develop.t1.id |    1 |   100.00 | Using index |</span></span><br><span class="line"><span class="section">+----+-------------+-------+------------+--------+---------------+---------+---------+---------------+------+----------+-------------+</span></span><br><span class="line">2 rows in set, 1 warning (0.05 sec)</span><br><span class="line"></span><br><span class="line"># 本意显示警告信息，但是和explain使用，会显示优化后的sql</span><br><span class="line"><span class="section">mysql&gt; show warnings;</span></span><br><span class="line"><span class="section">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="section">| Level | Code | Message                                                                                                                                                                                                           |</span></span><br><span class="line"><span class="section">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="section">| Note  | 1003 | /* select#1 */ select `develop`.`t1`.`id` AS `id`,`develop`.`t1`.`name` AS `name`,`develop`.`t1`.`addreee` AS `addreee` from `develop`.`t2` join `develop`.`t1` where (`develop`.`t2`.`id` = `develop`.`t1`.`id`) |</span></span><br><span class="line"><span class="section">+-------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"></span><br><span class="line"># 外层大表内存小表，用in, 外层小表内层大表，in和exists效率差不多.</span><br></pre></td></tr></table></figure></li>
<li><p>join 嵌套循环 Nested-Loop Join</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 简单嵌套循环连接 Simple <span class="keyword">Nested</span>-<span class="keyword">Loop</span> <span class="keyword">Join</span></span><br><span class="line">  inner <span class="keyword">join</span> - 内连接 双层循环遍历两张表</span><br><span class="line">  一般sql中会以小表作为驱动表，外层循环，内层循环作为被驱动表</span><br><span class="line"><span class="number">2</span>. 索引嵌套循环连接</span><br><span class="line">  内存表列要有索引</span><br><span class="line"><span class="number">3</span>. 快索引嵌套连接 <span class="keyword">Block</span> <span class="keyword">Nested</span> <span class="keyword">Loop</span> <span class="keyword">Join</span></span><br><span class="line">  &gt; 缓存外层表的数据到<span class="keyword">join</span> buffer中，然后buffer中数据批量和内层表数据进行匹配，从而减少内存循环的次数</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Tips &amp; Tracks</title>
    <url>/2021/09/02/Redis-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><blockquote>
<p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker.</p>
</blockquote>
<span id="more"></span>

<h2 id="Redis知识的全景图"><a href="#Redis知识的全景图" class="headerlink" title="Redis知识的全景图"></a>Redis知识的全景图</h2><p><img src="/misc/images/redis-knowledge.jpg" alt="Redis 知识全景图"></p>
<ul>
<li>应用纬度:<ul>
<li>缓存应用<ul>
<li>内嵌Key过期机制和淘汰策略</li>
</ul>
</li>
<li>集群应用<ul>
<li>主从集群、切片集群</li>
</ul>
</li>
<li>数据结构应用<ul>
<li>String</li>
<li>Hash</li>
<li>List</li>
<li>Set</li>
<li>Sorted Set</li>
</ul>
</li>
</ul>
</li>
<li>系统纬度:<ul>
<li>处理层:<ul>
<li>线程模型</li>
</ul>
</li>
<li>内存层:<ul>
<li>数据结构</li>
</ul>
</li>
<li>存储层:<ul>
<li>AOF</li>
<li>RDB</li>
</ul>
</li>
<li>网络层:<ul>
<li>epool网络框架</li>
</ul>
</li>
</ul>
</li>
<li>高性能主线:<ul>
<li>线程模型</li>
<li>数据结构<ul>
<li>集合类型采用有序索引，可以支持范围操作</li>
<li>考虑不同数据结构的内存效率、设计了压缩列表、整数数组这些精简的底层数据结构、节省内存开销</li>
</ul>
</li>
<li>内存分配器<ul>
<li>jemalloc和tcmalloc比glibc效率高</li>
</ul>
</li>
<li>持久化<ul>
<li>支持RDB、AOF持久化数据，支持主从库集群</li>
</ul>
</li>
<li>网络框架</li>
</ul>
</li>
<li>高可用主线:<ul>
<li>主从复制</li>
<li>哨兵机制</li>
<li>切片集群</li>
</ul>
</li>
<li>高扩展主线:<ul>
<li>数据分片</li>
<li>负载均衡</li>
</ul>
</li>
</ul>
<h2 id="Redis问题画像图"><a href="#Redis问题画像图" class="headerlink" title="Redis问题画像图"></a>Redis问题画像图</h2><p><img src="/misc/images/redis-problems.jpeg" alt="Redis问题画像"></p>
<h2 id="Redis-基础"><a href="#Redis-基础" class="headerlink" title="Redis 基础"></a>Redis 基础</h2><ul>
<li><p>基础架构</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"># 数据模型: key-value</span><br><span class="line">  &gt; Redis能够在实际业务场景中广泛的应用，就是得益于支持多样化类型的value</span><br><span class="line"></span><br><span class="line"># 操作接口:</span><br><span class="line">  -<span class="ruby"> <span class="symbol">PUT:</span></span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> <span class="symbol">GET:</span></span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> <span class="symbol">DELETE:</span></span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> <span class="symbol">SCAN:</span></span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"># 访问框架:</span><br><span class="line">  -<span class="ruby"> 动态库访问</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 网络框架访问<span class="symbol">:</span>包括Socket Server和协议解析</span></span><br><span class="line"><span class="ruby"></span># 操作模块:</span><br><span class="line">  -<span class="ruby"> Redis 键-值映射数据类型</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 哈希表: 就是一个数组，数组的每个元素netry称为一个哈希桶(桶中元素存储的是指向key和value的指针).</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> O(<span class="number">1</span>)时间复杂度快速查找键值对</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 哈希表冲突问题</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> Redis解决哈希冲突使用链式哈希,指向同一个哈希桶中的多个元素用链表保存，之间依次用指针连接</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Rehash操作:</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 装载因子 load factor = 所有entry个数/哈希表的哈希桶个数</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> rehash操作就是增加现有哈希桶数量，让增多的entry元素能在更多的桶之间分散保存，减少单个桶中元素数量,从而减少单个桶中冲突</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> Redis默认采用两个全局哈希表,哈希表<span class="number">1</span>，哈希表<span class="number">2</span>, Rehash过程:</span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> hash2分配更大空间 <span class="number">2</span> * hash1</span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> 将hash1中数据重新映射并拷贝到hash2</span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> 释放hash1空间</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 渐进式<span class="symbol">rehash:</span></span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> 巧妙的把一次性大量拷贝的开销分摊到多次处理请求的过程中，避免耗时操作，保证数据的快速访问</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line">  -<span class="ruby"> Redis值的数据类型:</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 字符串<span class="symbol">String:</span></span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 底层数据类型:</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 简单动态字符串</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 列表List</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 底层数据类型:</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 双向链表</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 压缩列表</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 集合Set</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 底层数据类型</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 压缩列表</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 整数数组</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 有序集合Sorted Set</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 底层数据类型</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 压缩列表</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 跳表</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 哈希Hash</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 底层数据类型</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 压缩列表</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 哈希表</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Redis底层数据结构</span></span><br><span class="line"><span class="ruby"></span>    &gt; Redis之所以采用不同的数据结构，是在性能和内存使用效率之间进行平衡</span><br><span class="line">    -<span class="ruby"> 简单动态字符串</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 双向链表</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 压缩列表<span class="symbol">:</span>类似数组</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 表头:</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> <span class="symbol">zlbytes:</span> 列表长度</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> <span class="symbol">zltail:</span> 列表尾的偏移量</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> <span class="symbol">zllen:</span> 列表中entry个数</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 表尾:</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> <span class="symbol">zlend:</span> 表示结束</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 哈希表</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 跳表: 跳表在链表的基础上增加多级索引，通过索引位置的几个跳转，实现数据的快速定位</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 查找复杂度O(logN)</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 整数数组</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"># 索引模块:</span><br><span class="line">  -<span class="ruby"> 索引的作用是让键值数据库根据Key找到响应value的存储位置，进而执行操作</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 哈希表: redis, mamcached采用</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 内存的高性能随机访问可以很好与哈希表O(<span class="number">1</span>)操作复杂度相匹配</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> B+树</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 字典树</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> skip <span class="symbol">list:</span> RocksDB采用</span></span><br><span class="line"><span class="ruby"></span># 存储模块:</span><br><span class="line">  -<span class="ruby"> 内存分配器</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> <span class="symbol">glibc:</span> malloc/free</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 持久化</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 日志AOF</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 快照RDB</span></span><br><span class="line"><span class="ruby"></span># IO模型设计</span><br><span class="line">  &gt; Redis单线程是指网络IO和键值对读写是由一个线程完成. 其他功能持久化、异步删除、集群数据同步是由额外的线程执行.</span><br><span class="line">  -<span class="ruby"> 多线程编程模式:</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 面临共享资源的并发访问控制问题</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 采用多线程开发会引入同步原语来保护共享资源的并发访问</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 单线程编程模式:</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Redis基本IO模型中，主要是主线程在执行操作，任何耗时的操作，bigkey、全量返回等操作，都是潜在的性能瓶颈</span></span><br></pre></td></tr></table></figure></li>
<li><p>Socker网络模型</p>
<table>
<thead>
<tr>
<th align="left">调用方法</th>
<th align="left">返回套接字类型</th>
<th align="left">非阻塞模式</th>
<th align="left">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="left">socket()</td>
<td align="left">主动套接字</td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">listen()</td>
<td align="left">监听套接字</td>
<td align="left">可设置</td>
<td align="left">accept()非阻塞</td>
</tr>
<tr>
<td align="left">accept()</td>
<td align="left">已连接套接字</td>
<td align="left">可设置</td>
<td align="left">send()/recv()非阻塞</td>
</tr>
</tbody></table>
</li>
<li><p>Redis多路复用IO模型<br><img src="/misc/images/redis-epoll.jpg" alt="基于多路复用的Redis高性能IO模型"></p>
<blockquote>
<p>一个线程处理多个IO流.该机制允许内核中同时存在多个监听套接字和已连接套接字.<br>select/epoll提供基于事件的回调机制，针对不同事件的发生，调用响应的处理函数</p>
</blockquote>
</li>
<li><p>底层数据结构时间复杂度分类</p>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">时间复杂度</th>
</tr>
</thead>
<tbody><tr>
<td align="left">哈希表</td>
<td align="left">O(1)</td>
</tr>
<tr>
<td align="left">跳表</td>
<td align="left">O(logN)</td>
</tr>
<tr>
<td align="left">双向链表</td>
<td align="left">O(N)</td>
</tr>
<tr>
<td align="left">压缩列表</td>
<td align="left">O(N)</td>
</tr>
<tr>
<td align="left">整数数组</td>
<td align="left">O(N)</td>
</tr>
</tbody></table>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 单元素操作是基础</span></span><br><span class="line"><span class="meta"># 范围操作非常耗时</span></span><br><span class="line">  - 范围操作是指集合类型中的遍历操作: O(N)</span><br><span class="line">  - SCAN操作实现渐进式遍历，只返回有限数量的数据.</span><br><span class="line"><span class="meta"># 统计操作通常高校</span></span><br><span class="line">  压缩列表和双向链表都会记录表头和表尾的偏移量</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><ul>
<li>通信协议<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">redis客户端和服务器发送的命令和数据一律以\r\n (CR LF)结尾</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求协议:</span></span><br><span class="line">  *&lt;参数数量&gt; CR LF</span><br><span class="line">  $&lt;参数的字节数量&gt; CR LF</span><br><span class="line">  &lt;参数的数据&gt; CR LF</span><br><span class="line"></span><br><span class="line">  ubuntu <span class="keyword">in</span> /  at 3BPlus took 11s</span><br><span class="line">  ➜ tail appendonly.aof</span><br><span class="line">  <span class="number">*3</span>        - 表示当前命令有单个部分</span><br><span class="line">  <span class="variable">$3</span>        - 字节数</span><br><span class="line">  <span class="builtin-name">set</span></span><br><span class="line">  <span class="variable">$4</span></span><br><span class="line">  name</span><br><span class="line">  <span class="variable">$10</span></span><br><span class="line">  chyiyaqing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回复协议:</span></span><br><span class="line">  &gt; 在回复协议中，可以通过检查第一个字节，确定这个回复是什么类型</span><br><span class="line">  - 状态回复 (status reply) 第一个字节是 <span class="string">&quot;+&quot;</span></span><br><span class="line">  - 错误回复 (<span class="builtin-name">error</span> reply) 第一个字节是 <span class="string">&quot;-&quot;</span></span><br><span class="line">  - 整数回复 (integer reply) 第一个字节是 <span class="string">&quot;.&quot;</span></span><br><span class="line">  - 批量回复 (bulk reply) 第一个字节是 <span class="string">&quot;$&quot;</span></span><br><span class="line">  - 多条批量回复 (multi bulk reply) 第一个字节是 <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><blockquote>
<p>Redis 持久化主要两大机制: AOF (Append Only File) 日志和RDB 快照</p>
</blockquote>
<ul>
<li><p>AOF - Append Only File</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">AOF日志是Redis执行完命令，把数据写入内存，然后才记录日志,避免出现记录错误命令的情况,记录的是Redis收到的每一条命令, 这些命令以文本形式保存</span></span><br></pre></td></tr></table></figure>
<ul>
<li>AOF 潜在的风险<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 执行完命令还没有来得及记日志就宕机，这个命令和相关的数据有丢失的风险?</span><br><span class="line"><span class="bullet">-</span> AOF写日志在主线程中执行，如果磁盘写压力过大，就会导致写盘很慢，进而导致后续的操作无法执行</span><br><span class="line"><span class="section"># 写回磁盘策略 appendfsync</span></span><br><span class="line"><span class="bullet">  1.</span> Always: 同步写回, 每个写命令执行完，立马同步将日志写回磁盘</span><br><span class="line"><span class="code">    &gt; 落盘操作属于慢速，回影响主线程性能</span></span><br><span class="line"><span class="code">  2. Everysec: 每秒写回,每个写命令执行完，先把日志写到AOF文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘</span></span><br><span class="line"><span class="code">    &gt; 在避免影响主线程和避免数据丢失两者之间trade-off方式</span></span><br><span class="line"><span class="code">  3. No: 操作系统控制写回，每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span></span><br><span class="line"><span class="code">    &gt; 落盘时机交给操作系统，只要AOF记录没有写回磁盘，宕机对应的数据就丢失</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">配置项</th>
<th align="left">写回时机</th>
<th align="left">优点</th>
<th align="left">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Always</td>
<td align="left">同步写回</td>
<td align="left">可靠性高，数据基本不丢失</td>
<td align="left">每个写命令都要落盘，性能影响较大</td>
</tr>
<tr>
<td align="left">EverySec</td>
<td align="left">每秒写回</td>
<td align="left">性能适中</td>
<td align="left">宕机时丢失1秒内的数据</td>
</tr>
<tr>
<td align="left">No</td>
<td align="left">操作系统控制写回</td>
<td align="left">性能好</td>
<td align="left">宕机丢失数据较多</td>
</tr>
</tbody></table>
</li>
<li>AOF文件过大的性能问题<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 文件系统本身对文件大小有限制，无法保存过大的文件</span><br><span class="line"><span class="bullet">2.</span> 文件过大，追加命令记录效率变低</span><br><span class="line"><span class="bullet">3.</span> 发生宕机，AOF记录命令要被重新执行，故障恢复比较缓慢，会影响Redis正常使用</span><br></pre></td></tr></table></figure></li>
<li>AOF重写机制:<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">直接根据数据库中数据的最新状态，生成这些数据的插入命令</span><br><span class="line"><span class="quote">&gt; 重写机制可以将旧日志文件中的多条命令，在重写后的新日志中变成一条命令</span></span><br><span class="line"><span class="quote">&gt; AOF重写过程是由后台子进程bgrewriteaof完成，避免阻塞主线程，导致性能下降</span></span><br><span class="line"><span class="bullet">-</span> &quot;一个拷贝，两处日志&quot;</span><br><span class="line"><span class="bullet">  -</span> 一个拷贝: 每次执行重写时，主线程fork出后台的bgrewriteaof子进程，此时，fork会把主线程的内存拷贝一份给bgrewriteaof子进程，然后bgrewriteaof子进程在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志.</span><br><span class="line"><span class="bullet">  -</span> 两处日志: 一个是正在使用的AOF日志，Redis会把操作写到它的缓冲区，第二处日志是新的AOF重写日志，等到拷贝数据的所有操作记录重写完成后，重写日志记录的操作也会写入新的AOF文件，保证数据库最新状态的记录</span><br></pre></td></tr></table></figure>
<img src="/misc/images/bgrewriteaof.jpg" alt="AOF非阻塞重写过程"></li>
</ul>
</li>
<li><p>RDB(Redis DataBase) - 内存快照</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">内存快照：指内存中的数据在某一个时刻的状态记录</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Redis两种命令生成RDB文件<ul>
<li>save: 在主线程执行，会导致阻塞</li>
<li>bgsave: 创建子进程，专门用于写入RDB文件，避免主线程阻塞, 默认配置<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; bgsave子进程由主线程fork生成，共享主线程的所有内存数据，bgsave子进程运行后，开始读取主线程的内存数据，并把数据写入RDB文件</span></span><br><span class="line"><span class="bullet">  1.</span> 频繁将全量数据写入磁盘，会给磁盘带来很大压力.</span><br><span class="line"><span class="bullet">  2.</span> bgsave子进程需要fork操作从主线程创建出来, fork操作会阻塞主线程</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>COW - Copy-On-Write<br><img src="/misc/images/redis-cow.jpg" alt="写时复制机制"><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">写时复制技术具体来说，主线程在有写操作时，才会把这个新写或者修改的数据写入到新的物理地址,并修改自己的页表映射.</span><br><span class="line">保证快照的完整性，也允许主线程同时对数据进行修改，避免对正常业务的影响</span><br></pre></td></tr></table></figure></li>
<li>Redis 4.0 混合AOF+RDB<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 增量快照:</span></span><br><span class="line"><span class="quote">&gt; 做一次全量快照后，后续的快照支队修改的数据进行快照记录，可以避免每次全量快照的开销</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 混合使用AOF日志和内存快照</span></span><br><span class="line"><span class="quote">&gt; 内存快照以一定的频率执行，两次快照之间，使用AOF日志记录这期间的所有命令操作</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><ul>
<li>Redis 主从库模式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 主从库采用读写分离方式</span></span><br><span class="line"><span class="bullet">  -</span> 读操作: 主库、从库都可以接收</span><br><span class="line"><span class="bullet">  -</span> 写操作: 首先到主库执行，然后，主库将写操作同步给从库</span><br></pre></td></tr></table></figure>
<ul>
<li>主从库如何进行第一次同步?<br><img src="/misc/images/master-slave-sync.jpg" alt="主从库第一次同步流程"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 三个阶段</span></span><br><span class="line"><span class="bullet">  1.</span> 第一阶段: 建立连接、协商同步</span><br><span class="line"><span class="bullet">    -</span> psync ? -1</span><br><span class="line"><span class="bullet">    -</span> runID: Redis实例自动生成的随机ID</span><br><span class="line"><span class="bullet">    -</span> offset: 复制的偏移量</span><br><span class="line"><span class="bullet">    -</span> FULLRESYNC: 表示第一次复制采用全量复制，主库会把当前所有的数据都复制给从库</span><br><span class="line"><span class="bullet">  2.</span> 第二阶段: 主库同步数据给从库</span><br><span class="line"><span class="bullet">    -</span> 主库将所有数据同步给从库,从库收到数据后，在本地完成数据加载</span><br><span class="line"><span class="bullet">    -</span> replication buffer: 主从库在进行全量复制时，主库上用于和从库连接的客户端buffer</span><br><span class="line"><span class="bullet">  3.</span> 第三阶段: 主库发送新写命令给从库</span><br><span class="line"><span class="bullet">    -</span> 主库把replication buffer 操作发给从库</span><br><span class="line"><span class="bullet">    -</span> 主库会给每个从库建立一个客户端，所以replication buffer不是共享的，而是每个从库都有一个对应的客户端</span><br><span class="line"></span><br><span class="line"><span class="section"># 主从库复制采用RDB,不采用AOF?</span></span><br><span class="line"><span class="bullet">  1.</span> RDB 文件是二进制文件，无论要把RDB写入磁盘还是通过网络传输RDB，IO效率比记录的纯文本AOF高</span><br><span class="line"><span class="bullet">  2.</span> 在从库进行恢复时，用RDB的恢复效率比AOF高</span><br></pre></td></tr></table></figure></li>
<li>主 - 从 - 从<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">通过“主-从-从”模式将主库生成RDB和传输RDB的压力，以级联的方式分散到从库中</span></span><br></pre></td></tr></table></figure></li>
<li>基于长连接的命令传播<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># repl_backlog_size:</span></span><br><span class="line"><span class="meta"># repl_backlog_buffer: 为了支持从库增量复制，主库上用于持续保持写操作的一块专用buffer, 所有从库共享</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>哨兵机制<br><img src="/misc/images/redis-sentinel.jpg" alt="哨兵机制任务"><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">  &gt; Redis主从集群中，哨兵机制实现主从库自动切换, 解决主从复制模式下故障转移</span><br><span class="line">  # 哨兵集群:</span><br><span class="line">    &gt; 采用多实例组成的集群模式进行部署, 引入多哨兵判断避免单个哨兵自身网络状态不好，误判主库下线</span><br><span class="line">    &gt; N个哨兵实例，最好要有N/2+1实例判断主库为&quot;主观下线&quot;, 最终判定主库为“客观下线”</span><br><span class="line"></span><br><span class="line">  # 哨兵负责的任务:</span><br><span class="line">    -<span class="ruby"> 监控</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 周期性向所有的主从库发送PING命令</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 哨兵对主库下线判断:</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 主观下线: 哨兵进程使用PING命令检测自己和主、从库的网络连接情况，判断实例的状态</span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> 误判: 发生在集群网络压力较大、网络拥赛，或者主库本身压力较大</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> 客观下线:</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 选主</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 主库挂了之后，哨兵需要从很多从库中选择一个从库实例</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> <span class="string">&quot;筛选&quot;</span> + <span class="string">&quot;打分&quot;</span>:</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> <span class="string">&quot;筛选&quot;</span>: 检查从库的当前在线状态，判断网络连接状态</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> <span class="string">&quot;打分&quot;</span>: 从库优先级、从库复制进度以及从库ID号</span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> replica-priority <span class="number">100</span></span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 通知</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 哨兵会把新主库的连接信息发给其他从库，让他们执行replicaof命令，和新主库建立连接，并进行数据复制,同时哨兵把新主库的连接信息通知给客户端，请求操作发到新主库上.</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"># 基于pub/sub 机制的哨兵集群</span><br><span class="line">  &gt; 哨兵只要和主库建立连接，就可以在主库上发布消息，比如发布自己的连接信息(IP和端口),从主库上订阅消息，获取其他哨兵发布的连接信息</span><br><span class="line"></span><br><span class="line">  -<span class="ruby"> 哨兵获取从库的IP+端口</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 哨兵向主库发送INFO命令,查看从库列表,进而与从库建立连接</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> pub/sub客户端事件通知</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Redis切片集群"><a href="#Redis切片集群" class="headerlink" title="Redis切片集群"></a>Redis切片集群</h2>  <figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">切片集群(分片集群)可以保存大量数据，对Redis主线程阻塞影响较小</span></span><br></pre></td></tr></table></figure>
<ul>
<li>纵向扩展(scale up):</li>
<li>横向扩展(scale out):<ul>
<li>Redis Cluster:<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">&gt; Redis Cluster 采用哈希槽(Hash Slot)处理数据和实例之间的映射关系. <span class="number">2</span>^<span class="number">14</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># key映射哈希slot</span></span><br><span class="line">  <span class="number">1.</span> 根据键值key，按照CRC16算法计算<span class="number">16</span>-bit值，然后对<span class="number">16384</span>取模,每个摸数代表响应编号的哈希槽。</span><br><span class="line"></span><br><span class="line"><span class="meta"># 重定向机制</span></span><br><span class="line">  &gt; 客户端给一个实例发送数据读写操作时，这个实例上并没有相应的数据，客户端要再给一个新实例发送操作命令</span><br><span class="line">  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; <span class="keyword">get</span> name</span><br><span class="line">  -&gt; Redirected to slot [<span class="number">5798</span>] located at <span class="number">172.30</span><span class="number">.1</span><span class="number">.23</span>:<span class="number">6002</span></span><br><span class="line">  <span class="string">&quot;chyiyaqing&quot;</span></span><br><span class="line">  <span class="number">172.30</span><span class="number">.1</span><span class="number">.23</span>:<span class="number">6002</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta"># ASK:</span></span><br><span class="line">  ASK命令并不会更新客户端缓存的哈希槽分配信息</span><br><span class="line"><span class="meta"># MOVED:</span></span><br><span class="line">  更改本地缓存，让后续所有命令都发往新实例</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Redis-应用场景-消息队列"><a href="#Redis-应用场景-消息队列" class="headerlink" title="Redis 应用场景 - 消息队列"></a>Redis 应用场景 - 消息队列</h2>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 消息队列需要满足的功能:</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">  1.</span> 支持阻塞等待拉取消息</span><br><span class="line"><span class="bullet">  2.</span> 支持发布/订阅模式</span><br><span class="line"><span class="bullet">  3.</span> 消费失败，可重新消费，消息不丢失</span><br><span class="line"><span class="bullet">  4.</span> 实例宕机，消息不丢失、数据可持久化</span><br><span class="line"><span class="bullet">  5.</span> 消息可堆积</span><br></pre></td></tr></table></figure>

<ul>
<li><p>List - 队列:</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">ubuntu in ~ at 3BPlus</span><br><span class="line">➜ redis-cli -c -p <span class="number">6001</span></span><br><span class="line"><span class="number">127.0.0.1:6001</span>&gt; ping</span><br><span class="line">PONG</span><br><span class="line"><span class="number">127.0.0.1:6001</span>&gt; LPUSH queue msg1    # 增加消息</span><br><span class="line">-&gt; Redirected to slot <span class="string">[13011]</span> located at <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6003</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; LPUSH queue msg2</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; RPOP queue        # 拉取消息</span><br><span class="line"><span class="string">&quot;msg1&quot;</span></span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; RPOP queue</span><br><span class="line"><span class="string">&quot;msg2&quot;</span></span><br><span class="line"><span class="number">127.0.0.1:6001</span>&gt; RPOP queue          # 队列为空，RPOP返回NULL</span><br><span class="line">-&gt; Redirected to slot <span class="string">[13011]</span> located at <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6003</span></span><br><span class="line">(nil)</span><br><span class="line"><span class="number">127.0.0.1:6001</span>&gt; BRPOP queue <span class="number">5</span>       # BRPOP阻塞式拉取消息，支持传入超时时间</span><br><span class="line">-&gt; Redirected to slot <span class="string">[13011]</span> located at <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6003</span></span><br><span class="line">(nil)</span><br><span class="line">(<span class="number">5</span>.00s)</span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; BRPOP queue <span class="number">0</span>     # 不设置超时，直到有新消息才返回</span><br><span class="line">^C</span><br><span class="line"><span class="number">172.30.1.23:6003</span>&gt; exit</span><br><span class="line"></span><br><span class="line">注意: 如果设置超时时间太长，连接太久没有活跃，有可能会被Redis server判定为无效连接，之后Redis Server会强制把这个客户端踢下线，客户端要有重连机制</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 不支持重复消费：消费者拉取消息后，该消息就从List中删除，无法被其他消费者在此消费，即不支持多个消费者消费同一批数据</span><br><span class="line"><span class="number">2</span>. 消息丢失，消费者拉取到消息后，如果发生异常宕机，这条消息就丢失</span><br><span class="line"></span><br><span class="line"># 单机测评</span><br><span class="line">ubuntu in ~ at 3BPlus took 37s</span><br><span class="line">➜ redis-benchmark -n <span class="number">1000000</span> -t lpush,rpop -P <span class="number">16</span> -q -h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> -p <span class="number">6001</span> --cluster</span><br><span class="line">Cluster has <span class="number">3</span> master nodes:</span><br><span class="line"></span><br><span class="line">Master <span class="number">0</span>: a733c21d3b735b9d026eb4d462ef6b367d8ebb98 <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6002</span></span><br><span class="line">Master <span class="number">1</span>: 9c35a4e211f6534861ed768dba592e85539b1377 <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6003</span></span><br><span class="line">Master <span class="number">2</span>: a901e497cb72819cf0765e9e4eb16c36399c437b <span class="number">172</span>.<span class="number">30</span>.<span class="number">1</span>.<span class="number">23</span>:<span class="number">6001</span></span><br><span class="line"></span><br><span class="line">LPUSH: <span class="number">41529</span>.<span class="number">96</span> requests per second, p50=<span class="number">17</span>.<span class="number">199</span> msec</span><br><span class="line">RPOP: <span class="number">46539</span>.<span class="number">77</span> requests per second, p50=<span class="number">15</span>.<span class="number">463</span> msec</span><br></pre></td></tr></table></figure></li>
<li><p>Pub/Sub - 发布订阅模型</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 消费者1</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ <span class="keyword">at</span> <span class="number">3</span>BPlus</span><br><span class="line">➜ redis-cli -c -p <span class="number">6001</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; SUBSCRIBE queue</span><br><span class="line">Reading messages... (press Ctrl-C <span class="keyword">to</span> quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line"><span class="number">3</span>) (<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;message&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;msg1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者2</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ <span class="keyword">at</span> <span class="number">3</span>BPlus</span><br><span class="line">➜ redis-cli -c -p <span class="number">6001</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; SUBSCRIBE queue</span><br><span class="line">Reading messages... (press Ctrl-C <span class="keyword">to</span> quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line"><span class="number">3</span>) (<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;message&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;msg1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者</span></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ <span class="keyword">at</span> <span class="number">3</span>BPlus</span><br><span class="line">➜ redis-cli -c -p <span class="number">6001</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PUBLISH queue msg1</span><br><span class="line">(<span class="built_in">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PUBLISH queue msg2</span><br><span class="line">(<span class="built_in">integer</span>) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pub/Sub 支持阻塞式拉取消息，满足多组消费者，匹配订阅模式,允许消费者订阅多个队列</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PUBLISH queue.p1 msg1       <span class="comment">-- 生产者</span></span><br><span class="line">(<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PUBLISH queue.p2 msg2</span><br><span class="line">(<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6001</span>&gt; PSUBSCRIBE queue.*          <span class="comment">-- 消费者 匹配订阅</span></span><br><span class="line">Reading messages... (press Ctrl-C <span class="keyword">to</span> quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue.*&quot;</span></span><br><span class="line"><span class="number">3</span>) (<span class="built_in">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue.*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;queue.p1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;msg1&quot;</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;queue.*&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;queue.p2&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;msg2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pub/Sub 实现原理</span></span><br><span class="line">&gt; 没有基于任何数据类型，没有做任何数据存储，只是单纯地为生产者、消费者建立数据转发通道，把符合规则的数据，从一端转发到另一端</span><br><span class="line">&gt; **在使用Pub/Sub时，消费者必须先订阅队列，生产者才能发布消息，否则消息会丢失**</span><br><span class="line">&gt; List属于“拉取模式”, Pub/Sub属于“推模式”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意使用Pub/Sub会丢数据</span></span><br><span class="line"><span class="number">1.</span> 消费者下线,重新上线，只能接收新的消息，在下线期间生产者发布的消息，因为找不到消费者，会被丢弃掉.</span><br><span class="line"><span class="number">2.</span> Redis宕机, Pub/Sub相关操作，不会写入RDB和AOF中，当Redis宕机重启，Pub/Sub的数据会全部丢失</span><br><span class="line"><span class="number">3.</span> 消费堆积, 每个消费者订阅一个队列，Redis都会在Server给消费者分配一个【缓冲区】,这个缓冲区其实就是一块内存，当生产者发布消息时，Redis先把消息写到对应消费者的缓冲区,之后消费者不断从缓冲区读取、处理消息, 缓冲区上线,会被强制下线.</span><br></pre></td></tr></table></figure></li>
<li><p>Stream</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Stream 通过XADD 和 XREAD完成简单的生产、消费模型</span></span><br><span class="line">  XADD: 发布消息</span><br><span class="line">  XREAD: 读取消息</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产者发布消息</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6001</span>&gt; XADD <span class="keyword">queue</span> * name <span class="number">2021</span>      <span class="comment"># * 表示自动生成唯一消息ID</span></span><br><span class="line">-&gt; Redirected <span class="keyword">to</span> slot [<span class="number">13011</span>] located at <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span></span><br><span class="line"><span class="string">&quot;1630886765690-0&quot;</span>                           <span class="comment">#消息ID格式: 时间戳-自增序号</span></span><br><span class="line"><span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XADD <span class="keyword">queue</span> * name <span class="number">09</span>-<span class="number">06</span></span><br><span class="line"><span class="string">&quot;1630886777470-0&quot;</span></span><br><span class="line"><span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消费者消费消息</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6001</span>&gt; XREAD COUNT <span class="number">5</span> STREAMS <span class="keyword">queue</span> <span class="number">0</span>-<span class="number">0</span>   <span class="comment"># 从开头读取5条消息，0-0表示从开头读取</span></span><br><span class="line">-&gt; Redirected <span class="keyword">to</span> slot [<span class="number">13011</span>] located at <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span></span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;1630886765690-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;2021&quot;</span></span><br><span class="line">      <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;1630886777470-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;09-06&quot;</span></span><br><span class="line"><span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XREAD COUNT <span class="number">5</span> STREAMS <span class="keyword">queue</span> <span class="number">1630886777470</span>-<span class="number">0</span>  <span class="comment"># 继续拉取消息,传入上一条消息的ID</span></span><br><span class="line"><span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XREAD COUNT <span class="number">5</span> BLOCK <span class="number">0</span> STREAMS <span class="keyword">queue</span> <span class="number">1630886777470</span>-<span class="number">0</span>  <span class="comment"># BLOCK 阻塞式拉取消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Stream 支持发布/订阅模式</span></span><br><span class="line">  - XGROUP: 创建消费者组</span><br><span class="line">  - XREADGROUP: 在指定消费组下，开启消费者拉取消息</span><br><span class="line"></span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XGROUP CREATE <span class="keyword">queue</span> group1 <span class="number">0</span>-<span class="number">0</span>  <span class="comment"># 创建消费者组1， 0-0表示从头拉取消费</span></span><br><span class="line">  OK</span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XGROUP CREATE <span class="keyword">queue</span> group2 <span class="number">0</span>-<span class="number">0</span>  <span class="comment"># 创建消费者组2，0-0</span></span><br><span class="line">  OK</span><br><span class="line"></span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XREADGROUP GROUP group1 consumer COUNT <span class="number">5</span> STREAMS <span class="keyword">queue</span> &gt;  <span class="comment"># group1 的consumer开始消费，&gt;表示拉取最新数据</span></span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;1630886765690-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;2021&quot;</span></span><br><span class="line">      <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;1630886777470-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;09-06&quot;</span></span><br><span class="line">      <span class="number">3</span>) <span class="number">1</span>) <span class="string">&quot;1630887243865-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;08-14&quot;</span></span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XREADGROUP GROUP group2 consumer COUNT <span class="number">5</span> STREAMS <span class="keyword">queue</span> &gt;</span><br><span class="line"><span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;queue&quot;</span></span><br><span class="line">   <span class="number">2</span>) <span class="number">1</span>) <span class="number">1</span>) <span class="string">&quot;1630886765690-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;2021&quot;</span></span><br><span class="line">      <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;1630886777470-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;09-06&quot;</span></span><br><span class="line">      <span class="number">3</span>) <span class="number">1</span>) <span class="string">&quot;1630887243865-0&quot;</span></span><br><span class="line">         <span class="number">2</span>) <span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line">            <span class="number">2</span>) <span class="string">&quot;08-14&quot;</span></span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.23</span>:<span class="number">6003</span>&gt; XACK <span class="keyword">queue</span> group1 <span class="number">1630887243865</span>-<span class="number">0</span>  <span class="comment"># XACK 命令告知Redis消费者处理完</span></span><br><span class="line">  (integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Stream 数据会写入RDB和AOF做持久化A</span></span><br><span class="line"><span class="comment"># 消息堆积，Stream会只保留固定长度的新消息,当队列长度超过上限，就消息会被删除，只保留固定长度的新消息</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Redis面试"><a href="#Redis面试" class="headerlink" title="Redis面试"></a>Redis面试</h2><ul>
<li>击穿、穿透、雪崩?<ul>
<li>击穿<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 击穿发生的原因?</span></span><br><span class="line">  - <span class="built_in">Key</span>过期</span><br><span class="line">    &gt; <span class="built_in">Key</span>有过期时间，如果某一个时刻<span class="built_in">Key</span>失效，那么之后的查询请求将全部压倒数据库上，导致数据库崩溃.</span><br><span class="line">  - <span class="built_in">Key</span>被页面置换淘汰</span><br><span class="line">    &gt; 内存有限，要时刻缓存新的数据，淘汰旧的数据</span><br><span class="line"></span><br><span class="line"><span class="meta"># 应对击穿的处理思路?</span></span><br><span class="line">  &gt; 由于<span class="built_in">Key</span>过期在所难免，大流量来到Redis时，根据Redis的单线程特性，可以认为任务是在队列里一次执行，当请求到达redis发现<span class="built_in">key</span>过期，进行一个操作: 设置锁</span><br><span class="line">    <span class="number">1.</span>请求到达Redis，发现Redis <span class="built_in">Key</span>过期，查看有没有锁，没有锁的话回到队列后面排队</span><br><span class="line">    <span class="number">2.</span>设置锁，注意，这儿应该是<span class="built_in">setnx</span>(),而不是<span class="built_in">set</span>(),因为可能有其他县城已经设置锁了</span><br><span class="line">    <span class="number">3.</span>获取锁，拿到就去数据库取数据，请求返回后释放锁</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li><p>穿透</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">穿透主要原因是很多请求都在访问数据库不存在的数据，应对这种请求的处理办法对访问请求加一层过滤器(布隆过滤器、增强版布隆过滤器、布谷鸟过滤器)</span></span><br></pre></td></tr></table></figure></li>
<li><p>雪崩</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">&gt; 雪崩和击穿类似，不同的是击穿是一个热点<span class="built_in">Key</span>某时刻失效，而雪崩是大量的热点<span class="built_in">Key</span>在一瞬间失效</span><br><span class="line"></span><br><span class="line"><span class="meta"># 处理思路?</span></span><br><span class="line">  <span class="number">1.</span> 查看<span class="built_in">Key</span>过期是不是时点性有关，时点性无关的话，可以随机过期时间解决</span><br><span class="line">  <span class="number">2.</span> 如果是时点性有关，利用强依赖击穿方案，单飞策略(先过去的线程更新一下所有<span class="built_in">Key</span>,在后台更新热点<span class="built_in">Key</span>的同时，业务层将进来的请求延时一下)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3>]]></content>
      <tags>
        <tag>缓存</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>echo-go-web-framework</title>
    <url>/2021/09/02/echo-go-web-framework/</url>
    <content><![CDATA[<h1 id="Echo"><a href="#Echo" class="headerlink" title="Echo"></a>Echo</h1><blockquote>
<p>高性能、可扩展、精简的Go Web框架</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">➜ go run main.go</span><br><span class="line"></span><br><span class="line">   <span class="strong">____</span>    <span class="strong">__</span></span><br><span class="line"><span class="strong">  / __</span>/<span class="strong">__<span class="emphasis">_/ /  <span class="strong">__<span class="emphasis">_</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong"> / _</span>// __</span>/ _</span> \/ <span class="emphasis">_ \</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">/<span class="strong">__<span class="emphasis">_/\<span class="strong">__/<span class="emphasis">_//_</span>/\__</span>_</span>/ v4.5.0</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">High performance, minimalist Go web framework</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">https://echo.labstack.com</span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"><span class="strong">__</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">____</span><span class="strong">__O/__</span><span class="strong">____</span>_</span></span></span><br><span class="line"><span class="strong">                                    O\</span></span><br><span class="line"><span class="strong">⇨ http server started on [::]:8080</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="功能概述"><a href="#功能概述" class="headerlink" title="功能概述"></a>功能概述</h2><ul>
<li>Optimized HTTP router which smartly prioritize routes</li>
<li>Build robust and scalable RESTful APIs</li>
<li>Group APIs</li>
<li>Extensible middleware framework</li>
<li>Define middleware at root, group or route level</li>
<li>Data binding for JSON, XML and form payload</li>
<li>Handy functions to send variety of HTTP response</li>
<li>Centralized HTTP error handling</li>
<li>Template rendering with any template engine</li>
<li>Define your format for the logger</li>
<li>Highly customizable</li>
<li>Automatic TLS via Let’s Encrypt</li>
<li>HTTP/2 support</li>
</ul>
]]></content>
      <tags>
        <tag>框架</tag>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Distribute Scraping for Gophers</title>
    <url>/2021/09/03/Distribute-Scraping-for-Gophers/</url>
    <content><![CDATA[<h1 id="分布式爬虫"><a href="#分布式爬虫" class="headerlink" title="分布式爬虫"></a>分布式爬虫</h1><blockquote>
<p>分布式爬虫是一套任务分发和执行系统，常见的任务分发，因为上下游存在速度不匹配问题，需要借助消息队列</p>
</blockquote>
<span id="more"></span>

<h2 id="分布式消息队列"><a href="#分布式消息队列" class="headerlink" title="分布式消息队列"></a>分布式消息队列</h2><ul>
<li>nats<blockquote>
<p>nats是Go实现的高性能分布式消息队列，适用于高并发吞吐量的消息分发场景.</p>
</blockquote>
</li>
</ul>
]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Dev-Ops Tips &amp; Tracks</title>
    <url>/2021/09/03/Dev-Ops-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="DevOps-BOOTCAMP"><a href="#DevOps-BOOTCAMP" class="headerlink" title="DevOps BOOTCAMP"></a>DevOps BOOTCAMP</h1><span id="more"></span>

<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><ul>
<li>Pipeline<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">C<span class="function"><span class="title">ollaborate</span> -&gt;</span> B<span class="function"><span class="title">uild</span> -&gt;</span> T<span class="function"><span class="title">est</span> -&gt;</span> D<span class="function"><span class="title">eploy</span> -&gt;</span> R<span class="function"><span class="title">un</span> -&gt;</span> C<span class="function"><span class="title">onfigure</span> -&gt;</span> Monitor</span><br></pre></td></tr></table></figure></li>
<li>Tradition: Development vs Operations<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Development</span></span><br><span class="line"><span class="bullet">  -</span> programming languages</span><br><span class="line"><span class="bullet">  -</span> test frameworks</span><br><span class="line"><span class="bullet">  -</span> databases</span><br><span class="line"><span class="bullet">  -</span> version control</span><br><span class="line"></span><br><span class="line"><span class="section"># Operations</span></span><br><span class="line"><span class="bullet">  -</span> OS, mostly Linux</span><br><span class="line"><span class="bullet">  -</span> command-line</span><br><span class="line"><span class="bullet">  -</span> scripting</span><br><span class="line"><span class="bullet">  -</span> monitoring tools</span><br></pre></td></tr></table></figure></li>
<li>DevOps culture<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> DevOps was just a way <span class="keyword">of</span> working <span class="keyword">between</span> DEV<span class="string">&#x27;s and OP&#x27;</span>s</span><br><span class="line"><span class="number">2.</span> Common <span class="keyword">language</span> <span class="keyword">to</span> communicate</span><br></pre></td></tr></table></figure></li>
<li>Waterfall vs. Agile<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Waterfall: 瀑布开发</span></span><br><span class="line">  &gt; ineffective process</span><br><span class="line">  &gt; over time new requirements may arise</span><br><span class="line">  &gt; many places of failure and miscommunication</span><br><span class="line"><span class="bullet">  -</span> Requirements:</span><br><span class="line"><span class="bullet">    -</span> plan everything beforehend</span><br><span class="line"><span class="bullet">  -</span> Development:</span><br><span class="line"><span class="bullet">    -</span> developers code complete app</span><br><span class="line"><span class="bullet">  -</span> Testing:</span><br><span class="line"><span class="bullet">    -</span> testing after everything has developed</span><br><span class="line"><span class="bullet">  -</span> Operations:</span><br><span class="line"><span class="bullet">    -</span> huge preparation</span><br><span class="line"></span><br><span class="line"><span class="section"># Agile: 敏捷开发</span></span><br><span class="line">  &gt; speed of development, testing and development cycles</span><br><span class="line">  &gt; each feature gets tested, deployed</span><br><span class="line">  &gt; immediate feedback</span><br><span class="line">  &gt; fast development and deployment process</span><br><span class="line"><span class="bullet">  -</span> Continuous Integration:</span><br><span class="line"><span class="bullet">  -</span> Continuous Delivery:</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Operating-Systems"><a href="#Operating-Systems" class="headerlink" title="Operating Systems"></a>Operating Systems</h2><ul>
<li>OS &amp; Linux<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"># Intro Operating Systems</span><br><span class="line">  -<span class="ruby"> Hardware of <span class="symbol">Computer:</span></span></span><br><span class="line"><span class="ruby"></span>    &gt; CPU + Memory + Storage + I/O devices</span><br><span class="line">  -<span class="ruby"> Operating <span class="symbol">System:</span></span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Translator</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Manages Resources</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> CPU <span class="symbol">Management:</span></span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Memory Management (RAM = Rapid Access Memory)</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> Memory Swape (Swap-out/Swap-<span class="keyword">in</span>)</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Storage <span class="symbol">Management:</span></span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> Manage File <span class="symbol">System:</span></span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> stored <span class="keyword">in</span> a structured way</span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> <span class="keyword">in</span> Unix <span class="symbol">systems:</span> tree file system</span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> <span class="keyword">in</span> Windows <span class="symbol">OS:</span> multiple root folders (Called drives, uses backslashes <span class="keyword">for</span> paths)</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Management I/O Devices</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Security &amp; Networking</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> <span class="symbol">Security:</span></span></span><br><span class="line"><span class="ruby"></span>          -<span class="ruby"> managing users <span class="keyword">and</span> permissions</span></span><br><span class="line"><span class="ruby"></span>        -<span class="ruby"> <span class="symbol">Networking:</span></span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Isolates(隔离) content of application</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Operating system <span class="symbol">Components:</span></span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> <span class="symbol">kernel:</span></span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> kernel is a program</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Consists of device drivers, dispatcher, scheduler, File System etc.</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> <span class="symbol">POSIX:</span> Portable Operating System Interface</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Linux <span class="keyword">and</span> MacOS both POSIX compliant</span></span><br></pre></td></tr></table></figure></li>
<li>Windows &amp; Linux CLI</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Windows</th>
<th align="left">Linux</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">dir</td>
<td align="left">ls -l</td>
<td align="left">Directory Listing</td>
</tr>
<tr>
<td align="left">ren</td>
<td align="left">mv</td>
<td align="left">rename a files</td>
</tr>
<tr>
<td align="left">copy</td>
<td align="left">cp</td>
<td align="left">Copying a file</td>
</tr>
<tr>
<td align="left">move</td>
<td align="left">mv</td>
<td align="left">Moving a file</td>
</tr>
<tr>
<td align="left">cls</td>
<td align="left">clear</td>
<td align="left">Clear Screen</td>
</tr>
<tr>
<td align="left">del</td>
<td align="left">rm</td>
<td align="left">Delete file</td>
</tr>
<tr>
<td align="left">chdir</td>
<td align="left">pwd</td>
<td align="left">returns your current directory location</td>
</tr>
<tr>
<td align="left">time</td>
<td align="left">date</td>
<td align="left">displays the time</td>
</tr>
<tr>
<td align="left">cd</td>
<td align="left">cd</td>
<td align="left">Change the current directory</td>
</tr>
<tr>
<td align="left">md</td>
<td align="left">mkdir</td>
<td align="left">To create a new directory/folder</td>
</tr>
<tr>
<td align="left">echo</td>
<td align="left">echo</td>
<td align="left">To print something on the screen</td>
</tr>
</tbody></table>
<ul>
<li><p>Virtualization虚拟化</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># VirtualBox:</span></span><br><span class="line">  &gt; VirtualBox takes<span class="built_in"> hardware </span>resources <span class="keyword">from</span> Host OS.</span><br><span class="line">  &gt; Creates virtual CPU, virtual RAM, virtual storage <span class="keyword">for</span> each virtual machine.</span><br><span class="line">  &gt;<span class="built_in"> Hardware </span>resources are shared</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bare Metal(for server): Hardware -&gt; Hypervisor -&gt; Guest OS</span></span><br><span class="line">  - wmware ESXi</span><br><span class="line">  - Microsoft Hyper-v</span><br><span class="line"></span><br><span class="line">  - Efficient usage of<span class="built_in"> hardware </span>resources</span><br><span class="line">    - use all the resources of performant big<span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>    -<span class="built_in"> Users </span>can choose any resources combinations</span><br><span class="line">  - Abstraction of the Operating<span class="built_in"> System </span><span class="keyword">from</span> the<span class="built_in"> hardware</span></span><br><span class="line"><span class="built_in"></span>    - Secure very easily</span><br><span class="line">    - Portable</span><br><span class="line">    - <span class="keyword">Not</span> dependent on physical<span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span><span class="comment"># Sharing things is not good for isolation</span></span><br></pre></td></tr></table></figure></li>
<li><p>Linux File System</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">&gt; Everything in Linux is a File</span><br><span class="line"><span class="comment"># Linux File System</span></span><br><span class="line">  - hierarchical tree structure</span><br><span class="line">  - <span class="number">1</span> root folder</span><br><span class="line">  - multiple users on computer</span><br><span class="line">  - each user has its own space</span><br><span class="line">  - each user can have own configurations</span><br><span class="line">  - programs installed system wide, are avaiable <span class="keyword">for</span> all users</span><br><span class="line"></span><br><span class="line">  ➜ tree / -L <span class="number">1</span></span><br><span class="line">  /</span><br><span class="line">  ├── bin -&gt; usr/bin      -- executables <span class="keyword">for</span> most essential user commands</span><br><span class="line">  ├── boot                -- contains files required <span class="keyword">for</span> booting (Read Only Folders)</span><br><span class="line">  ├── core</span><br><span class="line">  ├── dev                 -- location of device files, like webcam, keyboard, hard drive etc.</span><br><span class="line">  ├── etc                 -- place where configuration <span class="keyword">for</span> system-wide applications is stored</span><br><span class="line">  ├── home</span><br><span class="line">  ├── k8s_data</span><br><span class="line">  ├── lib -&gt; usr/lib      -- Essential shared libraries that executables from /bin or /sbin use</span><br><span class="line">  ├── lost+found</span><br><span class="line">  ├── media               -- contains subdirectories, where removable media devices inserted into the computer are mounted.</span><br><span class="line">  ├── mnt                 -- historically, sys admins mounted temporary <span class="keyword">file</span> systems there</span><br><span class="line">  ├── opt                 -- third-party program you install</span><br><span class="line">  ├── <span class="keyword">proc</span></span><br><span class="line">  ├──<span class="title"> root</span></span><br><span class="line">  ├──<span class="title"> run</span></span><br><span class="line">  ├──<span class="title"> sbin</span> -&gt;<span class="title"> usr/sbin</span>    --<span class="title"> system</span> binaries:<span class="title"> essential</span> system<span class="title"> binaries</span> programs<span class="title"> that</span> admin<span class="title"> would</span> use (need<span class="title"> superuser</span> privilige)</span><br><span class="line">  ├──<span class="title"> snap</span></span><br><span class="line">  ├──<span class="title"> srv</span></span><br><span class="line">  ├──<span class="title"> sys</span></span><br><span class="line">  ├──<span class="title"> tmp</span>                 --<span class="title"> temporary</span> resources<span class="title"> required</span> for<span class="title"> some</span> process,<span class="title"> kept</span> here<span class="title"> temporarily</span></span><br><span class="line">  ├──<span class="title"> usr</span>                 --<span class="title"> this</span> was<span class="title"> used</span> for<span class="title"> user</span> home<span class="title"> directories</span></span><br><span class="line">    ├──<span class="title"> bin</span></span><br><span class="line">    ├──<span class="title"> config</span></span><br><span class="line">    ├──<span class="title"> games</span></span><br><span class="line">    ├──<span class="title"> include</span></span><br><span class="line">    ├──<span class="title"> lib</span></span><br><span class="line">    ├──<span class="title"> libexec</span></span><br><span class="line">    ├──<span class="title"> local</span>             --<span class="title"> Programs</span> that<span class="title"> you</span> install<span class="title"> on</span> the<span class="title"> computer;</span> will<span class="title"> be</span> avaiable<span class="title"> for</span> all<span class="title"> users</span> on<span class="title"> the</span> computer</span><br><span class="line">    ├──<span class="title"> sbin</span></span><br><span class="line">    ├──<span class="title"> share</span></span><br><span class="line">    └──<span class="title"> src</span></span><br><span class="line">  └──<span class="title"> var</span>                 --<span class="title"> contains</span> files<span class="title"> to</span> which<span class="title"> the</span> system<span class="title"> writes</span> data</span><br><span class="line">    ├──<span class="title"> backups</span></span><br><span class="line">    ├──<span class="title"> cache</span>             --<span class="title"> contains</span> cached<span class="title"> data</span> from<span class="title"> application</span> programs</span><br><span class="line">    ├──<span class="title"> crash</span></span><br><span class="line">    ├──<span class="title"> lib</span></span><br><span class="line">    ├──<span class="title"> local</span></span><br><span class="line">    ├──<span class="title"> lock</span> -&gt; /run/lock</span><br><span class="line">    ├──<span class="title"> log</span>               --<span class="title"> contains</span> log<span class="title"> files</span></span><br><span class="line">    ├──<span class="title"> mail</span></span><br><span class="line">    ├──<span class="title"> opt</span></span><br><span class="line">    ├──<span class="title"> run</span> -&gt; /run</span><br><span class="line">    ├──<span class="title"> snap</span></span><br><span class="line">    ├──<span class="title"> spool</span></span><br><span class="line">    ├──<span class="title"> tmp</span></span><br><span class="line">    └──<span class="title"> www</span></span><br><span class="line">  21<span class="title"> directories,</span> 1<span class="title"> file</span></span><br><span class="line"></span><br><span class="line">  - /usr/local<span class="title"> vs.</span> /opt</span><br><span class="line">    - /usr/local:</span><br><span class="line">      -<span class="title"> programs,</span> which<span class="title"> split</span> its<span class="title"> components</span></span><br><span class="line">    - /opt:</span><br><span class="line">      -<span class="title"> programs,</span> which<span class="title"> NOT</span> split<span class="title"> its</span> components</span><br><span class="line"></span><br><span class="line">#<span class="title"> Hidden</span> Files</span><br><span class="line">  -<span class="title"> ls</span> primarily<span class="title"> used</span> to<span class="title"> help</span> prevent<span class="title"> important</span> data<span class="title"> from</span> being<span class="title"> accientally</span> deleted</span><br><span class="line">  -<span class="title"> Automatically</span> generated<span class="title"> by</span> programs<span class="title"> or</span> operating<span class="title"> system</span></span><br><span class="line">  -<span class="title"> File</span> name<span class="title"> starts</span> with<span class="title"> a</span> dot</span><br><span class="line">  -<span class="title"> In</span> UNIX<span class="title"> also</span> called &quot;dotfiles&quot;</span><br><span class="line"></span><br><span class="line">#<span class="title"> Windows</span> File<span class="title"> System</span></span><br><span class="line">  -<span class="title"> multiple</span> root<span class="title"> folders</span></span><br><span class="line">  -<span class="title"> A,B:</span> Removable<span class="title"> Disks</span></span><br><span class="line">  -<span class="title"> C:</span> Local<span class="title"> Disk</span> -<span class="title"> Internal</span> hard<span class="title"> drive</span></span><br></pre></td></tr></table></figure></li>
<li><p>Basic Linux Command</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GUI vs. CLI</span></span><br><span class="line">  - GUI = A graphical user interface</span><br><span class="line">  - CLI = Command Line Interface</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ <span class="keyword">at</span> k8s-node1 via 🐹 v1<span class="number">.16</span><span class="number">.5</span> via 🐍 <span class="number">3.8</span><span class="number">.6</span></span><br><span class="line">➜</span><br><span class="line">  - ubuntu: user name</span><br><span class="line">  - k8s-node1: computer name</span><br><span class="line">  - ~: home <span class="built_in">directory</span></span><br><span class="line">  - $: represents regular user</span><br><span class="line">  - <span class="comment">#: sign for root user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Folder Operations</span></span><br><span class="line">  - pwd: Show current <span class="built_in">directory</span></span><br><span class="line">  - ls: List <span class="built_in">folders</span> <span class="keyword">and</span> <span class="built_in">files</span></span><br><span class="line">    - ls -<span class="keyword">a</span> = Show all (including hidden)</span><br><span class="line">  - cd: Change <span class="built_in">directory</span> <span class="built_in">to</span> [dir]</span><br><span class="line">  - mkdir: Make <span class="built_in">directory</span> [dirname]</span><br><span class="line"></span><br><span class="line"><span class="comment"># File Operations</span></span><br><span class="line">  - touch [filename]: Create [filename]</span><br><span class="line">  - rm [filename]: Delete [filename]</span><br><span class="line">    - rm -r [dirname]: Delete <span class="keyword">a</span> non-<span class="literal">empty</span> <span class="built_in">directory</span> <span class="keyword">and</span> all <span class="keyword">the</span> <span class="built_in">files</span> <span class="keyword">within</span> <span class="keyword">it</span>.</span><br><span class="line">    - rm -d [dirname] <span class="keyword">or</span> rmdir [dirname]: Delete <span class="keyword">an</span> <span class="literal">empty</span> <span class="built_in">directory</span></span><br><span class="line">  - mv [filename] [new_filename] = Rename <span class="keyword">the</span> <span class="built_in">file</span> <span class="built_in">to</span> <span class="keyword">a</span> <span class="built_in">new</span> filename</span><br><span class="line">  - cp -r [dirname] [new_dirname] = Copy dirname <span class="built_in">to</span> new_dirname</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display OS Information</span></span><br><span class="line">  - uname -<span class="keyword">a</span>: Show <span class="keyword">system</span> <span class="keyword">and</span> kernel</span><br><span class="line">  Linux k8s-node1 <span class="number">5.4</span><span class="number">.0</span><span class="number">-1043</span>-raspi <span class="comment">#47-Ubuntu SMP PREEMPT Mon Aug 23 09:41:31 UTC 2021 aarch64 aarch64 aarch64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line">  ➜ cat /etc/os-release</span><br><span class="line">  NAME=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">  VERSION=<span class="string">&quot;20.04.3 LTS (Focal Fossa)&quot;</span></span><br><span class="line">  ID=ubuntu</span><br><span class="line">  ID_LIKE=debian</span><br><span class="line">  PRETTY_NAME=<span class="string">&quot;Ubuntu 20.04.3 LTS&quot;</span></span><br><span class="line">  VERSION_ID=<span class="string">&quot;20.04&quot;</span></span><br><span class="line">  HOME_URL=<span class="string">&quot;https://www.ubuntu.com/&quot;</span></span><br><span class="line">  SUPPORT_URL=<span class="string">&quot;https://help.ubuntu.com/&quot;</span></span><br><span class="line">  BUG_REPORT_URL=<span class="string">&quot;https://bugs.launchpad.net/ubuntu/&quot;</span></span><br><span class="line">  PRIVACY_POLICY_URL=<span class="string">&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span></span><br><span class="line">  VERSION_CODENAME=focal</span><br><span class="line">  UBUNTU_CODENAME=focal</span><br><span class="line"></span><br><span class="line">  - lscpu:</span><br><span class="line">  - lsmem:</span><br><span class="line">  - sudo: Allows regular users <span class="built_in">to</span> run programs <span class="keyword">with</span> <span class="keyword">the</span> security privileges <span class="keyword">of</span> <span class="keyword">the</span> superusere <span class="keyword">or</span> root</span><br><span class="line">  - su - chyi: <span class="keyword">switch</span> user</span><br><span class="line"></span><br><span class="line"><span class="comment"># Some More Useful Commands</span></span><br><span class="line">  - <span class="built_in">clear</span>: Clears <span class="keyword">the</span> terminal</span><br><span class="line">  - history: Gives <span class="keyword">a</span> list <span class="keyword">of</span> all past commands typed <span class="keyword">in</span> <span class="keyword">the</span> current terminal session</span><br><span class="line">  - Ctrl + r: Search history</span><br><span class="line">  - Ctrl + c: Stop current <span class="keyword">command</span></span><br><span class="line">  - cat [filename]: Display <span class="keyword">the</span> <span class="built_in">file</span> content</span><br></pre></td></tr></table></figure></li>
<li><p>Package Manager</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">  <span class="number">1</span>. central plcae to install, upgrade,configure, remove software</span><br><span class="line"></span><br><span class="line"># APT - Advanced <span class="keyword">Package</span> <span class="title">Tool</span></span><br><span class="line">  &gt; Dependencies are shared</span><br><span class="line">  &gt; Only <span class="keyword">for</span> specific Linux distributions (<span class="keyword">package</span> <span class="title">type .deb)</span></span><br><span class="line">  &gt; Manual Updates</span><br><span class="line">  - apt search &lt;package_name&gt; = Search <span class="keyword">for</span> a given <span class="keyword">package</span></span><br><span class="line">  <span class="title">- apt install &lt;package_name&gt; = Install a given <span class="keyword">package</span></span></span><br><span class="line">  - apt remove &lt;package_name&gt; = Remove installed <span class="keyword">package</span></span><br><span class="line">  <span class="title">- apt update = Updates the packages index</span></span><br><span class="line"></span><br><span class="line"># Repositories:</span><br><span class="line">  &gt; storage location, containing thousands <span class="keyword">of</span> programs</span><br><span class="line"></span><br><span class="line"># Snap <span class="keyword">Package</span> <span class="title">Manager:</span></span><br><span class="line">  &gt; A snap <span class="keyword">is</span> a bundle <span class="keyword">of</span> an app <span class="keyword">and</span> its dependencies</span><br><span class="line">  &gt; Supports universal Linux packages (<span class="keyword">package</span> <span class="title">type .snap)</span></span><br><span class="line">  &gt; Automatic Updates</span><br><span class="line">  - Self-contained - dependencies contained <span class="keyword">in</span> the <span class="keyword">package</span></span><br><span class="line"></span><br><span class="line"><span class="title"># Add Repository to official l</span>ist <span class="keyword">of</span> repos (add-apt-repository)</span><br><span class="line"># PPA = Personal <span class="keyword">Package</span> <span class="title">Archive</span></span><br><span class="line">  - PPAs are provided by the community</span><br><span class="line"></span><br><span class="line"># Debian Based:   <span class="comment">-- APT/APT-GET</span></span><br><span class="line">  - Ubuntu</span><br><span class="line">  - Debian</span><br><span class="line">  - Mint</span><br><span class="line"># Red Had Based:  <span class="comment">-- Yum</span></span><br><span class="line">  - RHEL</span><br><span class="line">  - CentOS</span><br><span class="line">  - Fedora</span><br></pre></td></tr></table></figure></li>
<li><p>Vim Editor</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"># Vim Mode:</span><br><span class="line">  - Command Mode:</span><br><span class="line">    - Navigate, Search, <span class="keyword">Delete</span>, Undo etc.</span><br><span class="line">    - Whatever you <span class="built_in">type</span> <span class="keyword">is</span> interpreted <span class="keyword">as</span> a command</span><br><span class="line">  - <span class="keyword">Insert</span> Mode:</span><br><span class="line">#</span><br><span class="line">- Press i <span class="keyword">key</span> = Switch <span class="keyword">to</span> <span class="keyword">insert</span> Mode</span><br><span class="line">- Press esc <span class="keyword">key</span> = Switch <span class="keyword">to</span> Command Mode</span><br><span class="line">- <span class="built_in">Type</span> dd = <span class="keyword">Delete</span> entire line</span><br><span class="line">- <span class="built_in">Type</span> d10 = <span class="keyword">Delete</span> next <span class="number">10</span> lines</span><br><span class="line">- <span class="built_in">Type</span> u = Undo</span><br><span class="line">- <span class="built_in">Type</span> $ = Jump <span class="keyword">to</span> <span class="keyword">end</span> of the line</span><br><span class="line">- <span class="built_in">Type</span> <span class="number">0</span> = Jump <span class="keyword">to</span> <span class="keyword">start</span> of the line</span><br><span class="line">- <span class="built_in">Type</span> /pattern = Search <span class="keyword">for</span> pattern</span><br><span class="line">- <span class="built_in">Type</span> :%s/old/new = <span class="built_in">Replace</span> old <span class="keyword">with</span> new throughout the file</span><br></pre></td></tr></table></figure></li>
<li><p>Users &amp; Permissions</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># User Accounts:</span></span><br><span class="line">  - Superuser Account:</span><br><span class="line">  - <span class="keyword">User</span> <span class="title">Account</span>:</span><br><span class="line">  - Service Account:</span><br><span class="line">    - Don&#x27;t run services with root user!</span><br><span class="line"></span><br><span class="line">  - adduser <span class="tag">&lt;username&gt;</span> = Create a new <span class="keyword">user</span></span><br><span class="line"></span><br><span class="line"><span class="title"># Groups</span> &amp; Ownership</span><br><span class="line">  - <span class="keyword">User</span> <span class="title">Level</span>:</span><br><span class="line">  - <span class="keyword">Group</span> <span class="title">Level</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Access Control Files:</span></span><br><span class="line">  - /etc/passwd:</span><br><span class="line">    - Stores <span class="keyword">user</span> <span class="title">account</span> <span class="literal">inf</span>ormation</span><br><span class="line">    - Everyone can <span class="keyword">read</span> it, but only root <span class="keyword">user</span> <span class="title">can</span> change the file</span><br><span class="line"></span><br><span class="line">    ➜ cat /etc/passwd | grep pi</span><br><span class="line">    pi:x:<span class="number">1000</span>:<span class="number">1000</span>:,,,:/home/pi:/usr/bin/zsh</span><br><span class="line">    USERNAME:PASSWORD:UID:GID:GECOS:HOMEDIR:SHELL</span><br><span class="line">      - PASSWORD(x) means, that encrypted password is stored <span class="keyword">in</span> /etc/shadow file</span><br><span class="line">      - <span class="keyword">User</span> <span class="title">ID</span>(UID): Each <span class="keyword">user</span> <span class="title">has</span> a unique ID. UID <span class="number">0</span> is reserved for root</span><br><span class="line">  - /etc/shadow</span><br><span class="line">  - /etc/<span class="keyword">group</span></span><br><span class="line"></span><br><span class="line"><span class="title"># File</span> Permissions</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux Commands for Managing Users and their permissions</span></span><br><span class="line">  - passwd <span class="tag">&lt;username&gt;</span> = Change password of a <span class="keyword">user</span></span><br><span class="line">  <span class="title">- su</span> - <span class="tag">&lt;username&gt;</span> = Login as username (su = switch user)</span><br><span class="line">  - su - = Login as root</span><br><span class="line">  - groupadd <span class="tag">&lt;groupname&gt;</span> = Create new <span class="keyword">group</span></span><br><span class="line">  <span class="title">- usermod</span> [OPTIONS] <span class="tag">&lt;username&gt;</span> = Modify a <span class="keyword">user</span> <span class="title">account</span></span><br><span class="line">  - useradd [OPTIONS] <span class="tag">&lt;username&gt;</span> = Create a new <span class="keyword">user</span></span><br><span class="line">  <span class="title">- groups</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Different User &amp; Group Commands</span></span><br><span class="line">  - adduser/addgroup/deluser/delgroup:</span><br><span class="line">    - More <span class="keyword">User</span> <span class="title">Friendly</span></span><br><span class="line">  - useradd/groupadd/userdel/groupdel:</span><br><span class="line">    - Low-level utilties</span><br></pre></td></tr></table></figure></li>
<li><p>Shell Scripting</p>
</li>
<li><p>Environmemt Variables</p>
</li>
<li><p>Networking</p>
</li>
<li><p>SSH - Secure Shell</p>
</li>
</ul>
<h2 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a>Version Control</h2><ul>
<li>GUI Git<ul>
<li>github</li>
<li>gitlab<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Git global setup</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git config --global user.name <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git config --global user.email <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Create a new repository</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git <span class="built_in">clone</span> git@gitlab.com:</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Push an existing folder</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> <span class="built_in">cd</span> existing_folder</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git init</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git remote add origin https://gitlab.com/chyiyaqing/my-project.git</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git branch -M main</span></span><br><span class="line"><span class="meta">  $</span><span class="bash"> git push -uf origin main</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用SSH Key</span></span><br><span class="line">  - GitHub/GitLab can authenticate us when pushing/pulling from repository</span><br><span class="line">  - without providing username and password each time.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Git<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Git Stages</span></span><br><span class="line"><span class="bullet">  -</span> Working Directory (git add -&gt; Staging Area)</span><br><span class="line"><span class="bullet">  -</span> Staging Area (git commit -&gt; Local Repository)</span><br><span class="line"><span class="bullet">  -</span> Local Repository</span><br><span class="line"></span><br><span class="line"><span class="section"># Git Command Tools</span></span><br><span class="line"><span class="bullet">  -</span> git status : status of local git repo</span><br><span class="line"><span class="bullet">  -</span> git add:</span><br><span class="line"><span class="bullet">  -</span> git commit:</span><br><span class="line"><span class="bullet">  -</span> git log: history of local repository changes</span><br><span class="line"><span class="bullet">  -</span> git init:</span><br><span class="line"><span class="bullet">  -</span> git pull:</span><br><span class="line"><span class="bullet">  -</span> git checkout <span class="xml"><span class="tag">&lt;<span class="name">branch</span> <span class="attr">name</span>&gt;</span></span> = switch branches</span><br><span class="line"><span class="bullet">  -</span> git checkout -b <span class="xml"><span class="tag">&lt;<span class="name">branch</span> <span class="attr">name</span>&gt;</span></span> = creating and switching to new branch</span><br><span class="line"><span class="section"># Branch</span></span><br><span class="line"><span class="bullet">  -</span> Master branch = main branch is created by default, when initializing a git repo</span><br><span class="line"><span class="bullet">    -</span> best practice: 1 branch per bugfix or feature</span><br><span class="line"><span class="bullet">    -</span> big feature branches long open, increase the chanceee of merge conflicts</span><br><span class="line"><span class="bullet">    -</span> only master branch for continuous integration/delivery</span><br><span class="line"><span class="bullet">    -</span> pipeline is triggered whenever feature/bugfix code is merged into master</span><br><span class="line"><span class="bullet">    -</span> must be stable and ready for production</span><br><span class="line"><span class="bullet">  -</span> Develop Branch</span><br><span class="line"><span class="bullet">    -</span> dev branch: intermediary master</span><br><span class="line"><span class="bullet">  -</span> Avoiding Merge Commits (rebase)</span><br><span class="line"><span class="bullet">    -</span> git pull(git fetch + git merge) vs. git pull --rebase (no merge commit, much cleaner project history)</span><br><span class="line"><span class="bullet">  -</span> Resolving Merge Conflicts</span><br><span class="line"><span class="bullet">  -</span> Don&#x27;t track certain files (.gitignore file)</span><br><span class="line"><span class="bullet">    -</span> .gitignore: to exclude certain folders or files from git to be tracked</span><br><span class="line"><span class="bullet">    -</span> git rm -r --cached : Stop tracking a file</span><br><span class="line"><span class="bullet">  -</span> Save work-in-progress changes (stash)</span><br><span class="line"><span class="bullet">    -</span> git stash (save un-committed (work-in-progress) changes, unfinished changes, which don&#x27;t want to commit yet)</span><br><span class="line"><span class="bullet">    -</span> git stash pop (get the changes back)</span><br><span class="line"><span class="bullet">  -</span> Going back in history</span><br><span class="line"><span class="bullet">    -</span> git checkout <span class="xml"><span class="tag">&lt;<span class="name">commit</span> <span class="attr">hash</span>&gt;</span></span> (go back to a specific project version)</span><br><span class="line"><span class="bullet">    -</span> Each commit: (unique commit hash, commit message, author + date)</span><br><span class="line"><span class="bullet">  -</span> Undoing and changing commits</span><br><span class="line"><span class="bullet">    -</span> git reset --hard <span class="xml">&lt;HEAD~1&gt;</span> (removed old commit)</span><br><span class="line"><span class="bullet">    -</span> git reset --soft (keep the changes in your working directory)</span><br><span class="line"><span class="bullet">    -</span> git revert <span class="xml"><span class="tag">&lt;<span class="name">commit</span> <span class="attr">hash</span>&gt;</span></span> (creates a new commit to revert the old commits changesj)</span><br><span class="line"><span class="bullet">    -</span> git commit --amend (changing the last commit)</span><br><span class="line"><span class="bullet">  -</span> Merging Branches</span><br><span class="line"></span><br><span class="line"><span class="section"># Merge Requests:</span></span><br><span class="line"><span class="bullet">  -</span> Best practice: Other developer reviews code changes before merging</span><br><span class="line"><span class="section"># Git 名词解释</span></span><br><span class="line"><span class="bullet">  -</span> origin = your remote git project/repo</span><br><span class="line"></span><br><span class="line"><span class="section"># Git for DevOps</span></span><br><span class="line"><span class="bullet">  -</span> Infrastructure as Code</span><br><span class="line"><span class="bullet">    -</span> Many Kubernetes Configuration Files (Yaml) (Deployment to Kubernetes)</span><br><span class="line"><span class="bullet">    -</span> Terraform and Ansible Configuration Files</span><br><span class="line"><span class="bullet">    -</span> Bash and Python Python Scripts</span><br><span class="line"><span class="bullet">    -</span> tracked - history of changes</span><br><span class="line"><span class="bullet">    -</span> securely stored in one place</span><br><span class="line"><span class="bullet">  -</span> CI/CD Pipeline and Build Automation</span><br><span class="line"><span class="bullet">    -</span> checkout code, test and build application, etc.</span><br><span class="line"><span class="bullet">    -</span> need integration for the build automation tool with application git repository</span><br></pre></td></tr></table></figure></li>
<li>Databases<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">&gt; Database are used to persist data!</span><br><span class="line">-<span class="ruby"> DB endpoint &amp; credentials should <span class="keyword">not</span> be hardcode</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"># DevOps Engineer</span><br><span class="line">  -<span class="ruby"> how to configure DB</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> hot to setup DB</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> how to manage DB</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"># Database Types</span><br><span class="line">  -<span class="ruby"> Key-Value Database</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Redis</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Memcached</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> etcd from Kubernetes</span></span><br><span class="line"><span class="ruby"></span>    # Best for:</span><br><span class="line">      -<span class="ruby"> Caching</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Message Queue</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Wide Column Database (schema-less, scalable, no joins)</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Cassandra</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> HBase</span></span><br><span class="line"><span class="ruby"></span>    # Best for:</span><br><span class="line">      -<span class="ruby"> TIME-Series</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Iot-Records</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Historical-records</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Document Databases (schema-less)</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> MongoDB</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> DynamoDB</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> CouchDB</span></span><br><span class="line"><span class="ruby"></span>    # Best for:</span><br><span class="line">      -<span class="ruby"> Mobile Apps</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Game Apps</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Cms</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Most Apps</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Relational Databases (schema, structured query language )</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> MySQL</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Postgresql</span></span><br><span class="line"><span class="ruby"></span>    # Best for:</span><br><span class="line">      -<span class="ruby"> ACID (Atomicity, Consistency, Isolation, Durability)</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Graph Database (Nodes <span class="keyword">and</span> Edges)</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Neo4j</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Dgraph</span></span><br><span class="line"><span class="ruby"></span>    # Best for:</span><br><span class="line">      -<span class="ruby"> Graphs</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> Patterns</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> Search Database</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> ElasticSearch</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> Solr</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Build-Tools-amp-Package-Manager"><a href="#Build-Tools-amp-Package-Manager" class="headerlink" title="Build Tools &amp; Package Manager"></a>Build Tools &amp; Package Manager</h2><ul>
<li>artifact<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Building the code:</span></span><br><span class="line"><span class="bullet">  -</span> compiling</span><br><span class="line"><span class="bullet">  -</span> Compress</span><br><span class="line"></span><br><span class="line"><span class="section"># Aritfact repositoy</span></span><br><span class="line">  &gt; Keep artifact in storage</span><br><span class="line">  &gt; to deploy it multiple times, have backup etc.</span><br><span class="line"><span class="bullet">  -</span> Nexus</span><br><span class="line"><span class="bullet">  -</span> JFrog</span><br><span class="line"></span><br><span class="line"><span class="section"># What kind of file is the artifact?</span></span><br><span class="line"><span class="bullet">  -</span> Java artifact (JAR or WAR file includes whole code plus dependencies)</span><br><span class="line"></span><br><span class="line"><span class="section"># Install Java and Build Tools</span></span><br><span class="line"><span class="bullet">  -</span> Install Java</span><br><span class="line"><span class="bullet">  -</span> Install Maven (mvn package)</span><br><span class="line"><span class="bullet">  -</span> Install Gradle (./gradlew build)</span><br><span class="line"><span class="bullet">  -</span> Install Node + npm</span><br><span class="line"></span><br><span class="line"><span class="section"># Build Aritifact</span></span><br><span class="line"><span class="bullet">  -</span> 1. Using a Build Tool (Install dependencies; Compile and compress your code)</span><br><span class="line"><span class="code">    Java: (JAR or WAR file)</span></span><br><span class="line"><span class="code">      - Maven (Using XML)</span></span><br><span class="line"><span class="code">        - mvn install</span></span><br><span class="line"><span class="code">        - mvn package (target/xxx-.jar)</span></span><br><span class="line"><span class="code">      - Gradle (Using Groovy)</span></span><br><span class="line"><span class="code">        - ./gradlew build (build/libs/xxx.jar)</span></span><br><span class="line"><span class="code">        - Note: Gradle-Java Version Compatibility (Change Java version less than 16)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># Managing Dependencies</span></span><br><span class="line">  &gt; Dependencies file = managing the dependencies for a project</span><br><span class="line"><span class="bullet">  -</span> maven (pom.xml)</span><br><span class="line"><span class="bullet">  -</span> gradle (build.gradle)</span><br><span class="line"></span><br><span class="line"><span class="bullet">  -</span> Local Dependency Repository(~/.m2/repository)</span><br><span class="line"></span><br><span class="line"><span class="section"># Run the application</span></span><br><span class="line"><span class="bullet">  -</span> JAR (java -jar <span class="xml"><span class="tag">&lt;<span class="name">name</span> <span class="attr">of</span> <span class="attr">jar</span> <span class="attr">file</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="section"># Build JS Applications</span></span><br><span class="line"><span class="bullet">  -</span> no special artifact type (ZIP/TAR file)</span><br><span class="line"><span class="bullet">  -</span> npm and yarn</span><br><span class="line"><span class="bullet">  -</span> package.json file for dependencies</span><br><span class="line"><span class="bullet">  -</span> package managers and NOT build tools</span><br><span class="line"><span class="bullet">  -</span> install dependencies, but not used for transpiling JS code</span><br><span class="line"><span class="bullet">  -</span> Command Lint Tool - npm</span><br><span class="line"><span class="bullet">    -</span> npm install = install dependencies</span><br><span class="line"><span class="bullet">    -</span> npm start - start the application</span><br><span class="line"><span class="bullet">    -</span> npm stop - stop the application</span><br><span class="line"><span class="bullet">    -</span> npm test - run the tests</span><br><span class="line"><span class="bullet">    -</span> npm publish - publish the artifact</span><br><span class="line"><span class="bullet">    -</span> [ ] npm pack - package</span><br><span class="line"><span class="bullet">  -</span> zip/tar file include?</span><br><span class="line"><span class="bullet">    -</span> application code, but not the dependencies</span><br><span class="line"><span class="bullet">    -</span> must install the dependencies first</span><br><span class="line"><span class="bullet">    -</span> unpack zip/tar</span><br><span class="line"><span class="bullet">    -</span> run the APP (copy artifact &amp; package.json file)</span><br><span class="line"></span><br><span class="line"><span class="section"># Build Tool - Webpack</span></span><br><span class="line">  &gt; transpiles(转译)|minifies(缩小)|bundles(捆绑)|compresses(压缩) the code</span><br><span class="line"></span><br><span class="line"><span class="section"># What are Build Tools for other programming language?</span></span><br><span class="line"><span class="bullet">  -</span> Python (pip)</span><br><span class="line"></span><br><span class="line"><span class="section"># Pattern in all these tools</span></span><br><span class="line"><span class="bullet">  -</span> dependecyfile</span><br><span class="line"><span class="bullet">    -</span> maven (pom.xml)</span><br><span class="line"><span class="bullet">    -</span> gradle (build.gradle)</span><br><span class="line"><span class="bullet">    -</span> npm (package.json)</span><br><span class="line"><span class="bullet">  -</span> repository for dependencies</span><br><span class="line"><span class="bullet">  -</span> command line tool</span><br><span class="line"><span class="bullet">  -</span> package managers</span><br><span class="line"></span><br><span class="line"><span class="section"># Build Tools for DevOps Engineers</span></span><br><span class="line"><span class="bullet">  -</span> Build Docker Image =&gt; Push to Repo =&gt; Run on Server</span><br><span class="line"><span class="bullet">  -</span> Install Dependencies =&gt; run tests =&gt; build/bundle app =&gt; push to repo</span><br><span class="line"></span><br><span class="line">SDK = Software Development Kit</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Cloud-amp-Infrastructure-as-a-Service"><a href="#Cloud-amp-Infrastructure-as-a-Service" class="headerlink" title="Cloud &amp; Infrastructure as a Service"></a>Cloud &amp; Infrastructure as a Service</h2>  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># What is Infrastructure as a Service?</span></span><br><span class="line">  - <span class="keyword">Buys </span>own server</span><br><span class="line">    &gt; manage own server <span class="keyword">and </span>infrastructure</span><br><span class="line">    &gt; if something <span class="keyword">breaks, </span>need to fix it</span><br><span class="line">  - Delegate Infrastructure Management</span><br><span class="line">    &gt; <span class="keyword">Move </span>your physical infrastructure to <span class="keyword">cloud</span></span><br><span class="line"><span class="keyword"></span>    &gt; <span class="keyword">Just </span>rent (租赁) the servers</span><br><span class="line"></span><br><span class="line"><span class="comment"># Infrastructure as a Service Providers?</span></span><br><span class="line">  - Google <span class="keyword">Cloud</span></span><br><span class="line"><span class="keyword"></span>  - aws</span><br><span class="line">  - <span class="keyword">DigitalOcean</span></span><br><span class="line"><span class="keyword"></span>  - Microsoft Azure</span><br><span class="line"></span><br><span class="line">&gt; Inbound = Incoming Requests</span><br><span class="line">&gt; Outbound = outgoing requests from server</span><br></pre></td></tr></table></figure>
<ul>
<li>Create a Linux User (Not use Root)<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Security Best practice</span></span><br><span class="line">  - Create separate <span class="keyword">User</span> <span class="title">for</span> every application</span><br><span class="line">  - Give it only the permission it needs to run that App</span><br><span class="line">  - Don&#x27;t work with the Root <span class="keyword">user</span></span><br><span class="line"></span><br><span class="line">  <span class="title">&gt; create</span> username</span><br><span class="line">  $ adduser <span class="tag">&lt;username&gt;</span></span><br><span class="line"></span><br><span class="line">  &gt; Add <span class="keyword">user</span> <span class="title">to</span> <span class="string">&quot;sudo&quot;</span> <span class="keyword">group</span></span><br><span class="line">  <span class="title">$</span> usermod -aG sudo <span class="tag">&lt;username&gt;</span></span><br><span class="line"></span><br><span class="line">  &gt; switch to username</span><br><span class="line">  $ su - <span class="tag">&lt;username&gt;</span></span><br><span class="line"></span><br><span class="line">  $ = standard Linux <span class="keyword">User</span></span><br><span class="line">  <span class="title"># = Root</span> User</span><br></pre></td></tr></table></figure></li>
<li>Nexus: Artifact Repository<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; Nexus <span class="keyword">is</span> one <span class="keyword">of</span> the most popular</span><br><span class="line">&gt; upload <span class="keyword">and</span> store different built artifacts</span><br><span class="line">&gt; retrieve(download) artifacts later</span><br><span class="line">&gt; central <span class="keyword">storage</span></span><br><span class="line">&gt; host own repositories</span><br><span class="line">&gt; Proxy Repository</span><br><span class="line">&gt; metadata tagging (labelling <span class="keyword">and</span> tagging artifacts)</span><br><span class="line">&gt; cleanup policies</span><br><span class="line">&gt; <span class="keyword">search</span> functionality</span><br><span class="line">&gt; <span class="keyword">user</span> token support <span class="keyword">for</span> <span class="keyword">system</span> <span class="keyword">user</span> authentication</span><br><span class="line"></span><br><span class="line"># What <span class="keyword">is</span> an Artifact Repository?</span><br><span class="line">  - Artifacts = Apps built <span class="keyword">into</span> a **single file**</span><br><span class="line">  - Different Artifact formats (JAR, WAR, ZIP, TAR)</span><br><span class="line">  - Artifact repository = <span class="keyword">storage</span> <span class="keyword">of</span> those artifacts</span><br><span class="line"></span><br><span class="line"># What <span class="keyword">is</span> an Artifact Repository Manager?</span><br><span class="line">  - Repository Formats?</span><br><span class="line">    - APT</span><br><span class="line">    - Composer</span><br><span class="line">    - Conan</span><br><span class="line">    - CPAN</span><br><span class="line">    - Docker</span><br><span class="line">    - ELPA</span><br><span class="line">    - Git LFS</span><br><span class="line">    - Go</span><br><span class="line">    - Helm</span><br><span class="line">    - Maven</span><br><span class="line">    - npm</span><br><span class="line">    - NuGet</span><br><span class="line">    - P2</span><br><span class="line">    - PyPI</span><br><span class="line">    - R</span><br><span class="line">    - Raw</span><br><span class="line">    - RubyGems</span><br><span class="line">    - Yum</span><br><span class="line"></span><br><span class="line">Jenkins <span class="comment">--&gt; push --&gt; Nexus &lt;-- pull &lt;-- Server</span></span><br><span class="line"></span><br><span class="line"># Nexus Install</span><br><span class="line">  &gt; Download Nexus tar file</span><br><span class="line">  $ wget https://download.sonatype.com/nexus/<span class="number">3</span>/latest-unix.tar.gz</span><br><span class="line"></span><br><span class="line">  &gt; Untar file</span><br><span class="line">  $ tar -xvf latest-unix.tar.gz</span><br><span class="line"></span><br><span class="line">  chyi <span class="keyword">in</span> ~/Downloads at k8s-master</span><br><span class="line">  ➜ ll</span><br><span class="line">  total <span class="number">196</span>M</span><br><span class="line">  -rw-r<span class="comment">--r--  1 chyi users 196M Oct 12 19:58 latest-unix.tar.gz</span></span><br><span class="line">  drwxr-xr-x <span class="number">10</span> chyi users <span class="number">4.0</span>K Oct <span class="number">17</span> <span class="number">15</span>:<span class="number">08</span> nexus<span class="number">-3.35</span><span class="number">.0</span><span class="number">-02</span>      <span class="comment">-- Nexus folder: (contains runtime and application of Nexus)</span></span><br><span class="line">  drwxr-xr-x  <span class="number">3</span> chyi users <span class="number">4.0</span>K Oct <span class="number">17</span> <span class="number">15</span>:<span class="number">08</span> sonatype-<span class="keyword">work</span>        <span class="comment">-- Sonatype-work: contains own config for Nexus and data</span></span><br><span class="line">    - subdirectories depending <span class="keyword">on</span> your Nexus <span class="keyword">configuration</span></span><br><span class="line">    - IP address that accessed Nexus</span><br><span class="line">    - Logs <span class="keyword">of</span> Nexus App</span><br><span class="line">    - Your uploaded files <span class="keyword">and</span> metadata</span><br><span class="line"></span><br><span class="line"># Staring Nexus</span><br><span class="line">  - Services should <span class="keyword">not</span> run <span class="keyword">with</span> Root <span class="keyword">User</span> Permissions</span><br><span class="line">  - Best practice: <span class="keyword">Create</span> own <span class="keyword">User</span> <span class="keyword">for</span> Service (e.g. Nexus - <span class="keyword">Only</span> the permission <span class="keyword">for</span> that specific Service)</span><br><span class="line"></span><br><span class="line">  &gt; <span class="keyword">Create</span> <span class="keyword">User</span></span><br><span class="line">  $ adduser nexus</span><br><span class="line"></span><br><span class="line">  &gt; change folder <span class="keyword">owner</span></span><br><span class="line">  &gt; Nexus <span class="keyword">User</span> <span class="keyword">execute</span> nexus executable</span><br><span class="line">  &gt; Nexus <span class="keyword">read</span>/<span class="keyword">write</span> sonatype-<span class="keyword">work</span> folder</span><br><span class="line">  $ chown -R nexus:nexus nexus<span class="number">-3</span></span><br><span class="line">  $ chown -R nexus:nexus sonatype-<span class="keyword">work</span></span><br><span class="line"></span><br><span class="line">  &gt; change run <span class="keyword">user</span></span><br><span class="line">  $ sudo vim nexus<span class="number">-3</span>/bin/nexus.rc</span><br><span class="line">    run_as_user=&quot;nexus&quot;</span><br><span class="line"></span><br><span class="line">  &gt; <span class="keyword">start</span> nexus</span><br><span class="line">  nexus@chyiyaqing-PowerEdge-R720:/opt$ ./nexus<span class="number">-3.35</span><span class="number">.0</span><span class="number">-02</span>/bin/nexus <span class="keyword">start</span></span><br><span class="line">  Starting nexus</span><br><span class="line"></span><br><span class="line">  &gt; <span class="keyword">check</span> nexus status</span><br><span class="line">  nexus@chyiyaqing-PowerEdge-R720:/opt$ netstat -lnpt | grep <span class="number">8081</span></span><br><span class="line">  (<span class="keyword">Not</span> <span class="keyword">all</span> processes could be identified, non-<span class="keyword">owned</span> process <span class="keyword">info</span></span><br><span class="line">   will <span class="keyword">not</span> be shown, you would have <span class="keyword">to</span> be root <span class="keyword">to</span> see it <span class="keyword">all</span>.)</span><br><span class="line">  tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">8081</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:*               <span class="keyword">LISTEN</span>      <span class="number">2732557</span>/java</span><br><span class="line"></span><br><span class="line">  &gt; <span class="keyword">Access</span> Nexus <span class="keyword">from</span> Browser</span><br><span class="line">  $ curl http://localhost:<span class="number">8081</span></span><br><span class="line"></span><br><span class="line">  &gt; <span class="keyword">Create</span> <span class="built_in">new</span> Repository</span><br><span class="line">  &gt; Hosted Repository</span><br><span class="line">  &gt; <span class="keyword">Group</span> Repository</span><br><span class="line"></span><br><span class="line"># Publish artifact <span class="keyword">to</span> Nexus Repository</span><br><span class="line">  &gt; Upload Jar File <span class="keyword">to</span> existing hosted repository <span class="keyword">on</span> Nexus</span><br><span class="line">  &gt; Maven/Gradle command <span class="keyword">for</span> pushing <span class="keyword">to</span> remote repository</span><br><span class="line">  &gt; Configure <span class="keyword">both</span> tools <span class="keyword">to</span> <span class="keyword">connect</span> <span class="keyword">to</span> Nexus (Nexus Repo URL + Credentials)</span><br><span class="line">  &gt; Nexus <span class="keyword">User</span> <span class="keyword">with</span> permission <span class="keyword">to</span> upload</span><br><span class="line"></span><br><span class="line">  - <span class="keyword">Create</span> Nexus <span class="keyword">User</span></span><br><span class="line">  - Gradle Project Configure <span class="keyword">with</span> Nexus</span><br><span class="line"></span><br><span class="line"># Upload Jar File <span class="keyword">to</span> Nexus</span><br><span class="line">  - Upload Jar File <span class="keyword">to</span> existing hosted repository <span class="keyword">on</span> Nexus</span><br><span class="line">  - Maven/Gradle command <span class="keyword">for</span> pushing <span class="keyword">to</span> remote repository</span><br><span class="line">  - Configure <span class="keyword">both</span> tools <span class="keyword">to</span> <span class="keyword">connect</span> <span class="keyword">to</span> Nexus(Nexus Repo URL + Credentials)</span><br><span class="line">  - Nexus <span class="keyword">User</span> <span class="keyword">with</span> permission <span class="keyword">to</span> upload</span><br><span class="line"></span><br><span class="line"># Nexus API</span><br><span class="line">  - Query Nexus Repository <span class="keyword">for</span> different information</span><br><span class="line">    - Use a tool <span class="keyword">like</span> **curl** <span class="keyword">or</span> **wget** <span class="keyword">to</span> <span class="keyword">execute</span> http request</span><br><span class="line">    # List <span class="keyword">all</span> repositories</span><br><span class="line">    $ curl -u <span class="keyword">user</span>:pwd -X <span class="keyword">GET</span> <span class="string">&#x27;http://IP:HOST/service/rest/v1/repositories&#x27;</span></span><br><span class="line">      [ &#123;</span><br><span class="line">        &quot;name&quot; : &quot;nuget-group&quot;,</span><br><span class="line">        &quot;format&quot; : &quot;nuget&quot;,</span><br><span class="line">        &quot;type&quot; : &quot;group&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://172.30.1.12:8081/repository/nuget-group&quot;,</span><br><span class="line">        &quot;attributes&quot; : &#123; &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        &quot;name&quot; : &quot;maven-snapshots&quot;,</span><br><span class="line">        &quot;format&quot; : &quot;maven2&quot;,</span><br><span class="line">        &quot;type&quot; : &quot;hosted&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://172.30.1.12:8081/repository/maven-snapshots&quot;,</span><br><span class="line">        &quot;attributes&quot; : &#123; &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        &quot;name&quot; : &quot;maven-central&quot;,</span><br><span class="line">        &quot;format&quot; : &quot;maven2&quot;,</span><br><span class="line">        &quot;type&quot; : &quot;proxy&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://172.30.1.12:8081/repository/maven-central&quot;,</span><br><span class="line">        &quot;attributes&quot; : &#123;</span><br><span class="line">          &quot;proxy&quot; : &#123;</span><br><span class="line">            &quot;remoteUrl&quot; : &quot;https://repo1.maven.org/maven2/&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        &quot;name&quot; : &quot;nuget.org-proxy&quot;,</span><br><span class="line">        &quot;format&quot; : &quot;nuget&quot;,</span><br><span class="line">        &quot;type&quot; : &quot;proxy&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://172.30.1.12:8081/repository/nuget.org-proxy&quot;,</span><br><span class="line">        &quot;attributes&quot; : &#123;</span><br><span class="line">          &quot;proxy&quot; : &#123;</span><br><span class="line">            &quot;remoteUrl&quot; : &quot;https://api.nuget.org/v3/index.json&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        &quot;name&quot; : &quot;maven-releases&quot;,</span><br><span class="line">        &quot;format&quot; : &quot;maven2&quot;,</span><br><span class="line">        &quot;type&quot; : &quot;hosted&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://172.30.1.12:8081/repository/maven-releases&quot;,</span><br><span class="line">        &quot;attributes&quot; : &#123; &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        &quot;name&quot; : &quot;nuget-hosted&quot;,</span><br><span class="line">        &quot;format&quot; : &quot;nuget&quot;,</span><br><span class="line">        &quot;type&quot; : &quot;hosted&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://172.30.1.12:8081/repository/nuget-hosted&quot;,</span><br><span class="line">        &quot;attributes&quot; : &#123; &#125;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        &quot;name&quot; : &quot;maven-public&quot;,</span><br><span class="line">        &quot;format&quot; : &quot;maven2&quot;,</span><br><span class="line">        &quot;type&quot; : &quot;group&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://172.30.1.12:8081/repository/maven-public&quot;,</span><br><span class="line">        &quot;attributes&quot; : &#123; &#125;</span><br><span class="line">      &#125; ]%</span><br><span class="line"></span><br><span class="line">    # List components</span><br><span class="line">    ➜ curl -u <span class="keyword">admin</span>:xx -X <span class="keyword">GET</span> <span class="string">&#x27;http://172.30.1.12:8081/service/rest/v1/components?repository=maven-snapshots&#x27;</span></span><br><span class="line"></span><br><span class="line"># Blob Stores</span><br><span class="line">  - Nexus <span class="keyword">Storage</span> <span class="keyword">to</span> store <span class="keyword">all</span> the uploaded files</span><br><span class="line">  - <span class="keyword">Storage</span> <span class="keyword">of</span> binary files</span><br><span class="line">  - <span class="keyword">Local</span> <span class="keyword">Storage</span> <span class="keyword">or</span> Cloud <span class="keyword">Storage</span></span><br><span class="line">  - <span class="keyword">Type</span> field = <span class="keyword">Storage</span> Backend</span><br><span class="line">    - File: file <span class="keyword">system</span>-based <span class="keyword">storage</span></span><br><span class="line">    - s3: cloud-based <span class="keyword">storage</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Blob Stores: Configure local and cloud blob storage<br><img src="/misc/images/nexus-blob-stores.png" alt="Nexus Blob Stores"><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; Blob store can&#x27;t be modified</span><br><span class="line">&gt; Blob store used <span class="keyword">by</span> a repository can&#x27;t be deleted!</span><br><span class="line"><span class="comment"># Type:</span></span><br><span class="line"><span class="comment"># State: state of the blob store</span></span><br><span class="line">  - started: indicates <span class="keyword">it</span>&#x27;s <span class="built_in">running</span> <span class="keyword">as</span> expected</span><br><span class="line">  - failed: indicates a configuration issue</span><br><span class="line"><span class="comment"># Blob Count: number of blobs currently stored</span></span><br><span class="line"><span class="comment"># Total Size:</span></span><br><span class="line"><span class="comment"># Available space:</span></span><br></pre></td></tr></table></figure></li>
<li>Component vs Asset<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Component:</span></span><br><span class="line"><span class="bullet">  -</span> abstract</span><br><span class="line"><span class="bullet">  -</span> what we are uploading</span><br><span class="line"><span class="section"># Asset:</span></span><br><span class="line"><span class="bullet">  -</span> actual physical packages/files</span><br><span class="line"><span class="bullet">  -</span> 1 component = 1 or more assets</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Jenkins: Build Automation</li>
<li>LDAP</li>
</ul>
<h2 id="Infrastructure-Privisioning"><a href="#Infrastructure-Privisioning" class="headerlink" title="Infrastructure Privisioning"></a>Infrastructure Privisioning</h2><ul>
<li>Containers with Docker<ul>
<li>What is a Container?<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; A way to package application with all the necessary dependencies and configuration</span></span><br><span class="line"><span class="quote">&gt; Portable artifact, easily shared and moved around</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Container Technologies</span></span><br><span class="line"><span class="bullet">  -</span> Docker</span><br><span class="line"><span class="bullet">  -</span> Containerd</span><br><span class="line"><span class="bullet">  -</span> CRI-O</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Container Vs Image<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker Image:</span></span><br><span class="line">  &gt; <span class="keyword">the</span> actual package</span><br><span class="line">  - artifact, <span class="keyword">that</span> can be moved <span class="keyword">around</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker Container</span></span><br><span class="line">  &gt; actually start <span class="keyword">the</span> <span class="built_in">application</span></span><br><span class="line">  &gt; container environment <span class="keyword">is</span> created</span><br><span class="line">  &gt; <span class="keyword">is</span> a <span class="built_in">running</span> environment <span class="keyword">for</span> Image</span><br><span class="line">  - virtual File system</span><br><span class="line">  - environment configs</span><br><span class="line">  - <span class="built_in">application</span> images</span><br></pre></td></tr></table></figure></li>
<li>Docker vs Virtual Machine<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Operating System have 2 Layers:</span></span><br><span class="line"><span class="bullet">  -</span> OS Kernel</span><br><span class="line"><span class="bullet">  -</span> Application [Docker]</span><br></pre></td></tr></table></figure></li>
<li>Docker Architecture &amp; Components<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Docker Engine:</span></span><br><span class="line"><span class="bullet">  -</span> Server:</span><br><span class="line"><span class="bullet">    -</span> Container Runtime:</span><br><span class="line"><span class="bullet">      -</span> pull images</span><br><span class="line"><span class="bullet">      -</span> managing images &amp; containers</span><br><span class="line"><span class="bullet">    -</span> Volumes:</span><br><span class="line"><span class="bullet">      -</span> persisting data</span><br><span class="line"><span class="bullet">    -</span> Network:</span><br><span class="line"><span class="bullet">      -</span> configuring network for container communication</span><br><span class="line"><span class="bullet">    -</span> build images:</span><br><span class="line"><span class="bullet">      -</span> build own Docker images</span><br><span class="line"><span class="bullet">  -</span> API:</span><br><span class="line"><span class="bullet">    -</span> interacting with Docker Server</span><br><span class="line"><span class="bullet">  -</span> CLI:</span><br><span class="line"><span class="bullet">    -</span> Command Line Interface: client to execute docker commands</span><br></pre></td></tr></table></figure></li>
<li>Main Docker commands<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Images</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Container</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Container Port vs. Host Port</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Debugging Docker Containers</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> docker exec</span><br><span class="line">  - docker exec <span class="literal">-it</span> container_id /bin/bash</span><br><span class="line"><span class="variable">$</span> docker pull</span><br><span class="line"><span class="variable">$</span> docker run</span><br><span class="line">  <span class="literal">-d</span> : daemon</span><br><span class="line">  docker run <span class="literal">-d</span> <span class="literal">-p6000</span>:<span class="number">6379</span> -<span class="literal">-name</span> redis redis:latest</span><br><span class="line"><span class="variable">$</span> docker exec <span class="literal">-it</span></span><br><span class="line"><span class="variable">$</span> docker logs</span><br><span class="line"><span class="variable">$</span> docker images</span><br><span class="line"><span class="variable">$</span> docker <span class="built_in">ps</span> = list running containers</span><br><span class="line">  <span class="literal">-a</span> : lists running and stopped container</span><br><span class="line"><span class="variable">$</span> docker run = starts new container with a command</span><br><span class="line"><span class="variable">$</span> docker <span class="built_in">start</span> = starts the container</span><br><span class="line"><span class="variable">$</span> docker stop = stops the container</span><br><span class="line"><span class="variable">$</span> docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li>
<li>Demo Overview<br><img src="/misc/images/docker-demo.png" alt="Demo Workflow with Docker"><ul>
<li>Develop with Docker<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Demo project</span></span><br><span class="line"><span class="bullet">  -</span> JS and Nodejs application</span><br><span class="line"><span class="bullet">    -</span> localhost:3000/my-app</span><br><span class="line"><span class="bullet">  -</span> MongoDB Docker Container</span><br><span class="line"><span class="bullet">    -</span> localhost:3001/db/my-db</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>Run multiple containers - Docker Compose</li>
<li>Build Docker Image - Dockerfile<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># What is a Dockerfile?</span></span><br><span class="line">  - Blueprint <span class="keyword">for</span> building images</span><br><span class="line"></span><br><span class="line"><span class="comment"># FROM : Start by basing it on another image</span></span><br><span class="line">  <span class="keyword">FROM</span> node</span><br><span class="line"></span><br><span class="line"><span class="comment"># ENV var: Optionally define environment variables</span></span><br><span class="line">  ENV <span class="attribute">MONGO_DB_USERNAME</span>=admin \</span><br><span class="line">      <span class="attribute">MONGO_DB_PWD</span>=password</span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN : execute any linux command</span></span><br><span class="line">  <span class="builtin-name">RUN</span> mkdir -p /home/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># COPY : execute on the HOST machine</span></span><br><span class="line">  COPY . /home/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD : entrypoint command</span></span><br><span class="line">  CMD [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;server.js&quot;</span>]</span><br><span class="line"></span><br><span class="line">$ docker build -t my-app:version-1 .</span><br><span class="line">$ docker <span class="builtin-name">run</span> my-app:version-1</span><br></pre></td></tr></table></figure></li>
<li>Push to private Docker Repository<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker private repository</span></span><br><span class="line">  - Harbar:</span><br><span class="line"></span><br><span class="line"><span class="comment"># build &amp; tag an images</span></span><br><span class="line">  docker tag chyiyaqing<span class="regexp">/alpine_sl harbor.chyidl.com/</span>chyiyaqing/alpine_sl</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker login</span></span><br><span class="line">  ➜ docker login -u admin -p macintosh harbor.chyidl.com</span><br><span class="line">  WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">  WARNING! Your password will be stored unencrypted <span class="keyword">in</span> <span class="regexp">/home/</span>chyiyaqing<span class="regexp">/.docker/</span>config.json.</span><br><span class="line">  Configure a credential helper to remove this warning. See</span><br><span class="line">  https:<span class="regexp">//</span>docs.docker.com<span class="regexp">/engine/</span>reference<span class="regexp">/commandline/</span>login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">  Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker push</span></span><br><span class="line">  ➜ docker push harbor.chyidl.com<span class="regexp">/chyiyaqing/</span>alpine_sl</span><br><span class="line">  Using default tag: latest</span><br><span class="line">  The push refers to repository [harbor.chyidl.com<span class="regexp">/chyiyaqing/</span>alpine_sl]</span><br><span class="line">  <span class="number">102</span>b73ff0977: Pushed</span><br><span class="line">  e2eb06d8af82: Pushed</span><br><span class="line">  latest: digest: sha256:<span class="number">500</span>e9b9536a4fec460c487867d3cd7084da934ba37151aa122f4be438cc06d57 size: <span class="number">739</span></span><br></pre></td></tr></table></figure></li>
<li>Persist data in Docker - Volumes<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># When do we need Docker Volumes?</span></span><br><span class="line">  &gt; For data persistence</span><br><span class="line"></span><br><span class="line"><span class="comment"># What is Docker Volumes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 Volumes Types</span></span><br><span class="line">  - Host Volumes (you decide where on the host file system the reference is made)</span><br><span class="line">    - -v <span class="regexp">/home/m</span>ount<span class="regexp">/data:/</span>var<span class="regexp">/lib/my</span>sql/data</span><br><span class="line"></span><br><span class="line">  - Anonymous Volumes (automatically created by Docker)</span><br><span class="line">    - -v <span class="regexp">/var/</span>lib<span class="regexp">/mysql/</span>data</span><br><span class="line"></span><br><span class="line">  - Named Volumes</span><br><span class="line">    - -v name:<span class="regexp">/var/</span>lib<span class="regexp">/mysql/</span>data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker Volume Locations</span></span><br><span class="line">  - Windows: C:\ProgramData\docker\volumes</span><br><span class="line">  - Linux: <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes</span><br><span class="line">  - MacOS: <span class="regexp">/var/</span>lib<span class="regexp">/docker/</span>volumes</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker for Mac</span></span><br><span class="line">  &gt; creates a Linux virtual machine and stores all the Docker data here</span><br></pre></td></tr></table></figure></li>
<li>Push/Pull Nexus Repository<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docker login to Nexus Docker Repo</span></span><br><span class="line">  chyiyaqing <span class="keyword">in</span> ~ at chyiyaqing-PowerEdge-R720</span><br><span class="line">  ➜ docker login <span class="number">172.30</span>.<span class="number">1.12</span>:<span class="number">8083</span></span><br><span class="line">  Username: chyi</span><br><span class="line">  Password:</span><br><span class="line">  WARNING! Your password will be stored unencrypted <span class="keyword">in</span> <span class="regexp">/home/</span>chyiyaqing<span class="regexp">/.docker/</span>config.json.</span><br><span class="line">  Configure a credential helper to remove this warning. See</span><br><span class="line">  https:<span class="regexp">//</span>docs.docker.com<span class="regexp">/engine/</span>reference<span class="regexp">/commandline/</span>login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">  Login Succeeded</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push Images to Nexus Repo</span></span><br><span class="line">  ➜ docker tag ubuntu:latest <span class="number">172.30</span>.<span class="number">1.12</span>:<span class="number">8083</span>/ubuntu:latest</span><br><span class="line"></span><br><span class="line">  chyiyaqing <span class="keyword">in</span> ~ at chyiyaqing-PowerEdge-R720</span><br><span class="line">  ➜ docker push <span class="number">172.30</span>.<span class="number">1.12</span>:<span class="number">8083</span>/ubuntu:latest</span><br><span class="line">  The push refers to repository [<span class="number">172.30</span>.<span class="number">1.12</span>:<span class="number">8083</span>/ubuntu]</span><br><span class="line">  <span class="number">9</span>f54eef41275: Pushed</span><br><span class="line">  latest: digest: sha256:<span class="number">7</span>cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17 size: <span class="number">529</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fetch Docker Image from Nexus</span></span><br><span class="line">  chyiyaqing <span class="keyword">in</span> ~ at chyiyaqing-PowerEdge-R720 took <span class="number">7</span>s</span><br><span class="line">  ➜ curl -u chyi:macintosh -X GET <span class="string">&#x27;http://172.30.1.12:8081/service/rest/v1/components?repository=docker-hosted&#x27;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;items&quot;</span> : [ &#123;</span><br><span class="line">      <span class="string">&quot;id&quot;</span> : <span class="string">&quot;ZG9ja2VyLWhvc3RlZDo3MWIyYzQyZWUyMjFkZTJlNzZlYTY4YjNmMGY1MTQ4Mw&quot;</span>,</span><br><span class="line">      <span class="string">&quot;repository&quot;</span> : <span class="string">&quot;docker-hosted&quot;</span>,</span><br><span class="line">      <span class="string">&quot;format&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">      <span class="string">&quot;group&quot;</span> : null,</span><br><span class="line">      <span class="string">&quot;name&quot;</span> : <span class="string">&quot;ubuntu&quot;</span>,</span><br><span class="line">      <span class="string">&quot;version&quot;</span> : <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;assets&quot;</span> : [ &#123;</span><br><span class="line">        <span class="string">&quot;downloadUrl&quot;</span> : <span class="string">&quot;http://172.30.1.12:8081/repository/docker-hosted/v2/ubuntu/manifests/latest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;path&quot;</span> : <span class="string">&quot;v2/ubuntu/manifests/latest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;id&quot;</span> : <span class="string">&quot;ZG9ja2VyLWhvc3RlZDoyNjlmOTEwOWZiZmIyMzlmNTc1OTU2MGQ1NmZjZTQ5Nw&quot;</span>,</span><br><span class="line">        <span class="string">&quot;repository&quot;</span> : <span class="string">&quot;docker-hosted&quot;</span>,</span><br><span class="line">        <span class="string">&quot;format&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">        <span class="string">&quot;checksum&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;sha1&quot;</span> : <span class="string">&quot;064d46bcae0d9c485376fbeabeed1f3e4f1c8679&quot;</span>,</span><br><span class="line">          <span class="string">&quot;sha256&quot;</span> : <span class="string">&quot;7cc0576c7c0ec2384de5cbf245f41567e922aab1b075f3e8ad565f508032df17&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;contentType&quot;</span> : <span class="string">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastModified&quot;</span> : <span class="string">&quot;2021-11-13T06:33:59.622+00:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;blobCreated&quot;</span> : <span class="string">&quot;2021-11-13T06:33:59.622+00:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lastDownloaded&quot;</span> : null</span><br><span class="line">      &#125; ]</span><br><span class="line">    &#125; ],</span><br><span class="line">    <span class="string">&quot;continuationToken&quot;</span> : null</span><br><span class="line">  &#125;%</span><br></pre></td></tr></table></figure></li>
<li>Run Nexus as Docker Container<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"># Persistent Data</span><br><span class="line">  $ docker volume create --<span class="keyword">name</span> nexus-<span class="keyword">data</span></span><br><span class="line">  $ docker run -d -p <span class="number">8081</span>:<span class="number">8081</span> --<span class="keyword">name</span> nexus -v nexu-<span class="keyword">data</span>:/nexus-<span class="keyword">data</span> sonatype/nexus3</span><br><span class="line">    -d = detached, run <span class="built_in">in</span> <span class="built_in">background</span></span><br><span class="line">    -p <span class="number">8081</span>:<span class="number">8081</span> = make accessible <span class="built_in">at</span> <span class="number">8081</span></span><br><span class="line">    --<span class="keyword">name</span> = container <span class="keyword">name</span></span><br><span class="line">    -v = volume(named volume here)</span><br><span class="line"></span><br><span class="line">  chyi <span class="built_in">in</span> ~ <span class="built_in">at</span> k8s-master</span><br><span class="line">  ➜ netstat -lnpt | grep <span class="number">8081</span></span><br><span class="line">  (Not all processes could be identified, non-owned process info</span><br><span class="line">   will <span class="built_in">not</span> be shown, you would have to be root to see it all.)</span><br><span class="line">  tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">8081</span>            <span class="number">0.0</span>.<span class="number">0.0</span>:*               LISTEN      -</span><br><span class="line"></span><br><span class="line">  chyi <span class="built_in">in</span> ~ <span class="built_in">at</span> k8s-master</span><br><span class="line">  ➜ docker ps</span><br><span class="line">  CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                    NAMES</span><br><span class="line">  <span class="number">8630</span><span class="function"><span class="title">fd5d8faa</span>   sonatype/nexus3   &quot;sh -c $&#123;SONATYPE_DI…&quot;   26 seconds ago   Up 23 seconds   0.0.0.0:8081-&gt;</span><span class="number">8081</span>/tcp   nexus</span><br><span class="line"></span><br><span class="line">chyi <span class="built_in">in</span> ~ <span class="built_in">at</span> k8s-master</span><br><span class="line">➜ docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     nexus-<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line">chyi <span class="built_in">in</span> ~ <span class="built_in">at</span> k8s-master</span><br><span class="line">➜ docker inspect nexus-<span class="keyword">data</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2021-11-13T15:09:41+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/mnt/INNERDISK/docker/volumes/nexus-data/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;nexus-data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">chyi <span class="built_in">in</span> ~ <span class="built_in">at</span> k8s-master</span><br><span class="line">➜ ls /mnt/INNERDISK/docker/volumes/nexus-<span class="keyword">data</span>/_<span class="keyword">data</span></span><br><span class="line">blobs  db             etc                instances  karaf.pid  lock  orient  restore-from-backup</span><br><span class="line">cache  elasticsearch  generated-bundles  javaprefs  keystores  <span class="built_in">log</span>   port    tmp</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Build-Automation-amp-CI-CD-with-Jenkins"><a href="#Build-Automation-amp-CI-CD-with-Jenkins" class="headerlink" title="Build Automation &amp; CI/CD with Jenkins"></a>Build Automation &amp; CI/CD with Jenkins</h2><ul>
<li><p>Introduction to Build Automation</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"># What is <span class="keyword">Build</span> Automation?</span><br><span class="line">  Test Code -&gt; <span class="keyword">Build</span> Application -&gt; Push <span class="keyword">to</span> Repository -&gt; Deploy <span class="keyword">to</span> Server</span><br><span class="line"></span><br><span class="line"># What <span class="keyword">is</span> Jenkins?</span><br><span class="line"></span><br><span class="line"># What can you <span class="keyword">do</span> <span class="keyword">with</span> Jenkins?</span><br><span class="line">  Run tests</span><br><span class="line">  <span class="keyword">Build</span> artifacts</span><br><span class="line">  Publish artifacts</span><br><span class="line">  Deploy artifacts</span><br><span class="line">  Send notifactions</span><br><span class="line"></span><br><span class="line"># Integration <span class="keyword">with</span> other technologies</span><br><span class="line">  Docker</span><br><span class="line">  Repositories</span><br><span class="line">  <span class="keyword">Build</span> Tools</span><br><span class="line">  Deployment Servers</span><br><span class="line"></span><br><span class="line"># What <span class="keyword">do</span> you need <span class="keyword">to</span> configure?</span><br><span class="line">  Run test -- <span class="keyword">Build</span> Tools need <span class="keyword">to</span> be available</span><br><span class="line">  <span class="keyword">Build</span> Application -- <span class="keyword">Build</span> Tools <span class="keyword">or</span> Docker available</span><br><span class="line">  Publish Docker Image -- Store Credentials <span class="keyword">in</span> Jenkins</span><br></pre></td></tr></table></figure></li>
<li><p>Deploy Jenkins on DigitalOcean server</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"># Install Jenkins directly on OS</span><br><span class="line"># Run Jenkins as Docker container</span><br><span class="line">  $ docker run -p <span class="number">8080</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -d -v jenkins_home:<span class="regexp">/var/</span>jenkins_home jenkins/jenkins:lts</span><br><span class="line"></span><br><span class="line">  chyiyaqing in ~ at chyiyaqing-PowerEdge-R720 took <span class="number">15</span>s</span><br><span class="line">  ➜ docker ps | <span class="keyword">grep</span> jenkins</span><br><span class="line">  e01cdfdb64f1   jenkins<span class="regexp">/jenkins:lts                                             &quot;/</span>sbin<span class="regexp">/tini -- /u</span>sr<span class="regexp">/…&quot;   14 seconds ago       Up 12 seconds                      0.0.0.0:8080-&gt;8080/</span>tcp, :::<span class="number">8080</span>-&gt;<span class="number">8080</span><span class="regexp">/tcp, 0.0.0.0:50000-&gt;50000/</span>tcp, :::<span class="number">50000</span>-&gt;<span class="number">50000</span>/tcp                                    brave_mcnulty</span><br><span class="line"></span><br><span class="line">  chyiyaqing in ~ at chyiyaqing-PowerEdge-R720</span><br><span class="line">  ➜ docker volume <span class="keyword">inspect</span> jenkins_home</span><br><span class="line">  [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2021-11-14T02:04:28+08:00&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Labels&quot;</span>: <span class="keyword">null</span>,</span><br><span class="line">          <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/jenkins_home/_data&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;jenkins_home&quot;</span>,</span><br><span class="line">          <span class="string">&quot;Options&quot;</span>: <span class="keyword">null</span>,</span><br><span class="line">          <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li>
<li><p>Roles of Jenkins</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Jenkins Administrator (Operations or DevOps teams)</span></span><br><span class="line">  - administers <span class="keyword">and </span>manages <span class="keyword">Jenkins</span></span><br><span class="line"><span class="keyword"></span>  - sets up <span class="keyword">Jenkins </span>cluster</span><br><span class="line">  - <span class="keyword">installs </span>plugins</span><br><span class="line">  - <span class="keyword">backup </span><span class="keyword">Jenkins </span>data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Jenkins User (Developer or DevOps teams)</span></span><br><span class="line">  - creating the actual <span class="keyword">jobs </span>to run workflows</span><br></pre></td></tr></table></figure></li>
<li><p>Install and use Build Tools in Jenkins</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">Create</span> <span class="selector-tag">Job</span> <span class="selector-tag">to</span> <span class="selector-tag">automate</span> <span class="selector-tag">your</span> <span class="selector-tag">apps</span> <span class="selector-tag">workflow</span></span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">Java</span> <span class="selector-tag">App</span> (Maven)</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">Java</span> <span class="selector-tag">App</span> <span class="selector-tag">with</span> <span class="selector-tag">Maven</span> <span class="selector-tag">Build</span> <span class="selector-tag">Tool</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">Run</span> <span class="selector-tag">Tests</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">Build</span> <span class="selector-tag">Jar</span> <span class="selector-tag">File</span></span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">JavaScript</span> <span class="selector-tag">App</span> (npm)</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">Node</span> <span class="selector-tag">App</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">Run</span> <span class="selector-tag">Tests</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">Package</span> <span class="selector-tag">and</span> <span class="selector-tag">push</span> <span class="selector-tag">to</span> <span class="selector-tag">Repo</span></span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">2</span> <span class="selector-tag">ways</span> <span class="selector-tag">to</span> <span class="selector-tag">install</span> <span class="selector-tag">and</span> <span class="selector-tag">configure</span> <span class="selector-tag">those</span> <span class="selector-tag">tools</span></span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">Jenkins</span> <span class="selector-tag">Plugins</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">just</span> <span class="selector-tag">install</span> <span class="selector-tag">plugin</span> (via UI) <span class="selector-tag">for</span> <span class="selector-tag">your</span> <span class="selector-tag">tool</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">Install</span> <span class="selector-tag">Tools</span> <span class="selector-tag">directly</span> <span class="selector-tag">on</span> <span class="selector-tag">Server</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">enter</span> <span class="selector-tag">in</span> <span class="selector-tag">remote</span> <span class="selector-tag">server</span> <span class="selector-tag">and</span> <span class="selector-tag">install</span></span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">inside</span> <span class="selector-tag">the</span> <span class="selector-tag">Docker</span> <span class="selector-tag">container</span>, <span class="keyword">when</span> Jenkins runs as container</span><br><span class="line"></span><br><span class="line"># Install npm <span class="keyword">and</span> Node in Jenkins container</span><br><span class="line">  chyiyaqing in ~ at chyiyaqing-PowerEdge-R720 took <span class="number">19s</span></span><br><span class="line">  ➜ docker exec -u <span class="number">0</span> -it e01cdfdb64f1 bash (root user)</span><br><span class="line">  root<span class="variable">@e01cdfdb64f1</span>:/# cat /etc/issue</span><br><span class="line">  Debian GNU/Linux <span class="number">11</span> \n \l</span><br><span class="line"></span><br><span class="line">  root<span class="variable">@e01cdfdb64f1</span>:/# sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list (替换国内源)</span><br><span class="line">  root<span class="variable">@e01cdfdb64f1</span>:/# curl -sL <span class="attribute">https</span>:<span class="comment">//deb.nodesource.com/setup_16.x -o nodesource_setup.sh</span></span><br><span class="line">  root<span class="variable">@e01cdfdb64f1</span>:/# ls</span><br><span class="line">  bin  boot  dev	etc  home  lib	lib64  media  mnt  nodesource_setup.sh	opt  proc  root  run  sbin  srv  sys  tmp  usr	var</span><br><span class="line">  root<span class="variable">@e01cdfdb64f1</span>:/# bash nodesource_setup.sh</span><br><span class="line"></span><br><span class="line">  ## Installing the NodeSource Node.js <span class="number">16</span>.x repo...</span><br></pre></td></tr></table></figure></li>
<li><p>Create Freestyle Job</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> Plugins</span><br><span class="line"><span class="bullet">-</span> Credentials</span><br><span class="line"><span class="bullet">-</span> Configure Git Repository</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Plugin Configuration</span><br><span class="line"><span class="bullet">  1.</span> Install directly on Server: more flexible</span><br><span class="line"><span class="bullet">  2.</span> Plugin: limited to provided input fields</span><br></pre></td></tr></table></figure></li>
<li><p>Docker in Jenkins</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">chyiyaqing in ~/chyi at chyiyaqing-PowerEdge-R720</span><br><span class="line">➜ docker run -p <span class="number">8080</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -d \</span><br><span class="line">➜ -v jenkins_home:/var/jenkins_home \</span><br><span class="line">➜ -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">➜ -v <span class="symbol">$</span>(which docker):/usr/bin/docker jenkins/jenkins:lts</span><br><span class="line"><span class="number">9</span>b9acf0e8c13519d3bc5a96b8e7b2d251374e7112a796d2b9cc55e8ee53361a1</span><br><span class="line"></span><br><span class="line">jenkins@<span class="number">9</span>b9acf0e8c13:/<span class="symbol">$</span> docker pull redis</span><br><span class="line"><span class="keyword">Using</span> default tag: latest</span><br><span class="line">Got permission denied <span class="keyword">while</span> trying to connect to the Docker daemon socket at unix:<span class="comment">///var/run/docker.sock: Post &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/images/create?fromImage=redis&amp;tag=latest&quot;: dial unix /var/run/docker.sock: connect: permission denied</span></span><br><span class="line">jenkins@<span class="number">9</span>b9acf0e8c13:/<span class="symbol">$</span></span><br><span class="line"></span><br><span class="line"># Build Docker Image</span><br><span class="line"></span><br><span class="line"># Push Image to DockerHub</span><br><span class="line">  - Create DockerHub account</span><br><span class="line">  - Configure that credentials in Jenkins</span><br><span class="line"></span><br><span class="line"># Push Docker Image to Nexus Repository</span><br><span class="line"></span><br><span class="line"># Freestyle to Pipeline Job</span><br><span class="line">  - Freestyle Job with multiple Steps</span><br><span class="line">    - Build Java App -&gt; Run Tests -&gt; Build Image -&gt; Push to private Repo</span><br><span class="line"></span><br><span class="line"># Pipeline Job</span><br><span class="line">  - Pipeline script</span><br><span class="line">    - Script is written in Groovy</span><br><span class="line">    - Programming Language similar to Java</span><br><span class="line"></span><br><span class="line">  - Required Fields of Jenkinsfile</span><br><span class="line">    # pipeline must be top-level</span><br><span class="line">    pipeline &#123;</span><br><span class="line">        <span class="comment">// agent where to execute</span></span><br><span class="line">        agent any</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Access Build Tools for your projects</span></span><br><span class="line">        tools &#123;</span><br><span class="line">          <span class="comment">// Only 3 Build tools available: gradle, maven and JDK!</span></span><br><span class="line">        &#125;</span><br><span class="line">        environment &#123;</span><br><span class="line">          NEW_VERSION = <span class="string">&quot;1.0&quot;</span></span><br><span class="line">          SERVER_CREDENTIALS = credential(<span class="string">&#x27;server-credentials&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">parameters</span> &#123;</span><br><span class="line">          string(name: <span class="string">&#x27;VERSION&#x27;</span>, defaultValue: <span class="string">&#x27;&#x27;</span>, description: <span class="string">&#x27;version to deploy on prod&#x27;</span>)</span><br><span class="line">          choice(name: <span class="string">&#x27;VERSION&#x27;</span>, choices: [<span class="string">&#x27;1.1.0&#x27;</span>, <span class="string">&#x27;1.2.0&#x27;</span>], description: <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// stages - where the work happens</span></span><br><span class="line">        stages <span class="comment">&#123;</span></span><br><span class="line">            stage(<span class="string">&quot;build&quot;</span>) &#123;</span><br><span class="line">              when <span class="comment">&#123;</span></span><br><span class="line">                expression <span class="comment">&#123;</span></span><br><span class="line">                  expression <span class="comment">&#123;</span></span><br><span class="line">                    BRANCH_NAME <span class="comment">==</span> <span class="comment">&quot;dev&quot;</span> || <span class="comment">CODE_CHANGES == true</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">                steps <span class="comment">&#123;</span></span><br><span class="line">                  echo <span class="comment">&#x27;building the application...&#x27;</span></span><br><span class="line">                  echo <span class="comment">&quot;building version $&#123;NEW_VERSION&#125;&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stage(<span class="string">&quot;test&quot;</span>) &#123;</span><br><span class="line">              when <span class="comment">&#123;</span></span><br><span class="line">                expression <span class="comment">&#123;</span></span><br><span class="line">                  expression <span class="comment">&#123;</span></span><br><span class="line">                    BRANCH_NAME <span class="comment">==</span> <span class="comment">&quot;dev&quot;</span> || <span class="comment">BRANCH_NAME ==</span> <span class="comment">&quot;master&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              steps <span class="comment">&#123;</span></span><br><span class="line">                  echo <span class="comment">&#x27;building the application...&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            stage(<span class="string">&quot;deploy&quot;</span>) &#123;</span><br><span class="line">                steps <span class="comment">&#123;</span></span><br><span class="line">                  echo <span class="comment">&#x27;building the application...&#x27;</span></span><br><span class="line">                  echo <span class="comment">&quot;deploying with $(SERVER_CREDENTIALS)&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Execute some logic AFTER all stages executed</span></span><br><span class="line">        post <span class="comment">&#123;</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// Conditions</span></span><br><span class="line">          always <span class="comment">&#123;</span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          success <span class="comment">&#123;</span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          failure <span class="comment">&#123;</span></span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># Jenkins <span class="comment">Variables</span></span><br><span class="line">  $ http:<span class="comment">//172.30.1.12:8080/env-vars.html/</span></span><br></pre></td></tr></table></figure></li>
<li><p>Build scripted Pipeline</p>
</li>
<li><p>Henkinsfile in detail</p>
</li>
<li><p>Configure automated versioning</p>
</li>
<li><p>Jenkins Shared Library</p>
</li>
</ul>
<h2 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h2><h2 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h2><h2 id="Container-Orchestration"><a href="#Container-Orchestration" class="headerlink" title="Container Orchestration"></a>Container Orchestration</h2><h2 id="Configuration-Management"><a href="#Configuration-Management" class="headerlink" title="Configuration Management"></a>Configuration Management</h2><h2 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h2><h2 id="Command-Line-Commands"><a href="#Command-Line-Commands" class="headerlink" title="Command Line Commands"></a>Command Line Commands</h2><ul>
<li><p>scp = secure copy</p>
<blockquote>
<p>scp <file locally> <destination></p>
</blockquote>
</li>
<li><p>netstat</p>
<blockquote>
<p>netstat -lpnt</p>
</blockquote>
</li>
</ul>
<h2 id="专业名词"><a href="#专业名词" class="headerlink" title="专业名词"></a>专业名词</h2><ul>
<li>LTS = Long Term Support</li>
</ul>
<h2 id="Wrap-Up-总结"><a href="#Wrap-Up-总结" class="headerlink" title="Wrap Up: 总结"></a>Wrap Up: 总结</h2><ul>
<li>Pipeline<br><img src="/misc/images/devops-pipeline.png" alt="Pipeline 开发流程"></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet">git cheatsheet</a></li>
</ul>
]]></content>
      <tags>
        <tag>DevOps</tag>
        <tag>Bootcamp</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch Tips &amp; Tracks</title>
    <url>/2021/09/03/Elasticsearch-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><blockquote>
<p>Elasticsearch是一个开源的分布式搜索与分析引擎，提供近实时搜索和聚合功能<br>Elastic Stack主要应用于：搜索、日志管理、安全分析、指标分析、业务分析、应用性能监控等多个领域<br>“Search is something that any application should have.”</p>
</blockquote>
<span id="more"></span>

<h2 id="Elastic-Stack-生态圈"><a href="#Elastic-Stack-生态圈" class="headerlink" title="Elastic Stack 生态圈"></a>Elastic Stack 生态圈</h2><ul>
<li><p>解决方案:</p>
<ul>
<li>搜索</li>
<li>日志分析</li>
<li>指标分析</li>
<li>安全分析</li>
</ul>
</li>
<li><p>可视化:</p>
<ul>
<li>Kibana: 可视化分析</li>
</ul>
</li>
<li><p>存储/计算:</p>
<ul>
<li>Elasticsearch: 核心引擎,提供数据存储、搜索和聚合的能力</li>
</ul>
</li>
<li><p>数据抓取:</p>
<ul>
<li>Logstash<blockquote>
<p>开源的服务器端数据处理管道，支持从不同来源采集数据，转换数据，并将数据发送到不同的存储库中</p>
</blockquote>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 特性:</span></span><br><span class="line"><span class="bullet">  1.</span> 实时解析和转换数据</span><br><span class="line"><span class="code">    &gt; 从IP地址破译地理位置</span></span><br><span class="line"><span class="code">    &gt; 从PII数据匿名化，排除敏感字段</span></span><br><span class="line"><span class="code">  2. 可扩展</span></span><br><span class="line"><span class="code">  3. 可靠性安全性</span></span><br><span class="line"><span class="code">    &gt; Logstash 通过持久化队列保证至少将运行中的事件送达一次</span></span><br><span class="line"><span class="code">    &gt; 数据传输加密</span></span><br><span class="line"><span class="code">  4. 加密</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Beats<blockquote>
<p>轻量级别数据采集器</p>
</blockquote>
</li>
</ul>
</li>
<li><p>X-Pack: 商业化套件</p>
</li>
</ul>
<blockquote>
<p>Elasticsearch与数据库的集成</p>
</blockquote>
<p><img src="/misc/images/Elastichsearch.png" alt="Elastichsearch"></p>
<blockquote>
<p>指标分析/日志分析</p>
</blockquote>
<ul>
<li>Data Collection(beats) -&gt; Buffering(redis,Kafkak) -&gt; Data Aggregation &amp; Processing(logstash) -&gt; Indexing &amp; storage(elasticsearch) -&gt; Analysis &amp; visualization(Kbana)</li>
</ul>
<h2 id="Elasticsearch-1"><a href="#Elasticsearch-1" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><ul>
<li><p>Elasticsearch 目录结构</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">ubuntu <span class="keyword">in</span> ~/elasticsearch-<span class="number">7.14</span>.<span class="number">1</span> <span class="keyword">at</span> k8s-node1 took <span class="number">45</span>s</span><br><span class="line">➜ tree -L <span class="number">1</span></span><br><span class="line">.</span><br><span class="line">├── bin                 <span class="comment">-- 脚本文件，包括启动elasticsearch,安装插件，运行统计数据</span></span><br><span class="line">├── config              <span class="comment">-- elasticsearch.yml 集群配置文件，user, role based 相关配置</span></span><br><span class="line">├── jdk                 <span class="comment">-- Java 运行环境</span></span><br><span class="line">├── lib                 <span class="comment">-- Java 类库</span></span><br><span class="line">├── LICENSE.txt</span><br><span class="line">├── logs                <span class="comment">-- path.log 日志文件</span></span><br><span class="line">├── modules             <span class="comment">-- 包含所有ES模块</span></span><br><span class="line">├── NOTICE.txt</span><br><span class="line">├── plugins             <span class="comment">-- 包含所有已安装插件</span></span><br><span class="line">└── README.asciidoc</span><br></pre></td></tr></table></figure></li>
<li><p>JVM 配置</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="attr"># 修改JVM - config/jvm.options</span></span><br><span class="line"><span class="attr">  -Xms和Xms 最小最大内存设置成一样</span></span><br><span class="line"><span class="attr">  -Xmx不超过机器内存的50</span><span class="meta">%</span></span><br></pre></td></tr></table></figure></li>
<li><p>Run</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">$ bin/elasticsearch</span><br><span class="line"><span class="symbol">~ took 11m 31s</span></span><br><span class="line"><span class="symbol">➜ curl http</span>:<span class="comment">//localhost:9200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a714f28827d5&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_name&quot;</span> : <span class="string">&quot;docker-cluster&quot;</span>,</span><br><span class="line">  <span class="string">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;96jmRuNUQxqFsGeWJjIo6g&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;number&quot;</span> : <span class="string">&quot;7.14.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_type&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_hash&quot;</span> : <span class="string">&quot;66b55ebfa59c92c15db3f69a335d500018b3331e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_date&quot;</span> : <span class="string">&quot;2021-08-26T09:01:05.390870785Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build_snapshot&quot;</span> : false,</span><br><span class="line">    <span class="string">&quot;lucene_version&quot;</span> : <span class="string">&quot;8.9.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Plugin 机制对系统扩展</p>
<blockquote>
<p>Discovery Plugin<br>Analysis Plugin<br>Security Plugin<br>Management Plugin<br>Ingest Plugin<br>Mapper Plugin<br>Backup Plugin</p>
</blockquote>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">ubuntu <span class="keyword">in</span> ~ at k8s-node1 via 🐍 <span class="number">3.8</span><span class="number">.6</span></span><br><span class="line">➜ elasticsearch-plugin install analysis-icu  # 分词插件</span><br><span class="line">-&gt; Installing analysis-icu</span><br><span class="line">-&gt; Downloading analysis-icu <span class="keyword">from</span> elastic</span><br><span class="line">[=================================================] <span class="number">100</span>%</span><br><span class="line">-&gt; Installed analysis-icu</span><br><span class="line">-&gt; Please restart Elasticsearch to activate any plugins installed</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at k8s-node1 via 🐍 <span class="number">3.8</span><span class="number">.6</span> took <span class="number">23</span>s</span><br><span class="line">➜ elasticsearch-plugin list</span><br><span class="line">analysis-icu</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at k8s-node1 via 🐍 <span class="number">3.8</span><span class="number">.6</span></span><br><span class="line">➜ curl http:<span class="comment">//localhost:9200/_cat/plugins</span></span><br><span class="line">k8s-node1 analysis-icu <span class="number">7.14</span><span class="number">.1</span></span><br></pre></td></tr></table></figure></li>
<li><p>多集群<br><a href="/misc/code/elasticsearch/docker-compose.yml">docker-compose.yml</a></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">➜ curl -X GET <span class="string">&quot;localhost:9200/_cat/nodes?v=true&amp;pretty&quot;</span></span><br><span class="line">ip         heap.percent ram.percent cpu load_1m load_5m load_15m node.role   master name</span><br><span class="line"><span class="number">172.24.0.2</span>           <span class="number">41</span>          <span class="number">97</span>  <span class="number">85</span>    <span class="number">4</span>.<span class="number">28</span>    <span class="number">1</span>.<span class="number">24</span>     <span class="number">0</span>.<span class="number">43</span> cdfhilmrstw -      es01</span><br><span class="line"><span class="number">172.24.0.3</span>           <span class="number">56</span>          <span class="number">97</span>  <span class="number">85</span>    <span class="number">4</span>.<span class="number">28</span>    <span class="number">1</span>.<span class="number">24</span>     <span class="number">0</span>.<span class="number">43</span> cdfhilmrstw -      es03</span><br><span class="line"><span class="number">172.24.0.4</span>           <span class="number">27</span>          <span class="number">97</span>  <span class="number">85</span>    <span class="number">4</span>.<span class="number">28</span>    <span class="number">1</span>.<span class="number">24</span>     <span class="number">0</span>.<span class="number">43</span> cdfhilmrstw *      es02</span><br></pre></td></tr></table></figure></li>
<li><p>Kibana:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">curl</span> http://localhost:<span class="number">5601</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Kibana Plugins 插件</span></span><br><span class="line"><span class="variable">$</span> kibana<span class="literal">-plugin</span> install</span><br><span class="line"><span class="variable">$</span> kibana<span class="literal">-plugin</span> list</span><br><span class="line"><span class="variable">$</span> kibana remove</span><br></pre></td></tr></table></figure></li>
<li><p>Logstash:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Elasticsearch-基本概念"><a href="#Elasticsearch-基本概念" class="headerlink" title="Elasticsearch 基本概念"></a>Elasticsearch 基本概念</h2><ul>
<li><p>文档 Document</p>
<blockquote>
<p>Elasticsearch 是面向文档的，文档是所有可搜索数据的最小单位<br>文档会被序列化成JSON格式，保存在Elasticsearch中<br>每个文档都有一个Unique ID</p>
</blockquote>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"># 文档元数据<span class="type">Metadata</span> - 标注文档的相关信息</span><br><span class="line">  _index - 文档所属的索引名</span><br><span class="line">  _<span class="keyword">type</span>  - 文档所属类型名</span><br><span class="line">  _id    - 文档唯一<span class="type">ID</span></span><br><span class="line">  _source - 文档原始<span class="type">JSON</span>数据</span><br><span class="line">  _version - 文档的版本信息 <span class="comment">-- 解决并发读写冲突</span></span><br><span class="line">  _score  - 相关性打分</span><br></pre></td></tr></table></figure></li>
<li><p>索引 Index</p>
<blockquote>
<p>将文档写入Elasticsearch的过程叫索引indexing</p>
</blockquote>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Mapping:</span> 定义包含的文档的字段名和字段类型</span><br><span class="line"><span class="symbol">Setting:</span> 定义不同数据分布</span><br><span class="line"><span class="symbol">Shard:</span> 索引中的数据分散在Shards上</span><br></pre></td></tr></table></figure></li>
<li><p>节点 Node</p>
<blockquote>
<p>节点是Elasticsearch 实例</p>
</blockquote>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">-E node.<span class="attr">name=</span>node1</span><br><span class="line">每个节点启动后，会分配一个UID，保存在data目录下</span><br><span class="line"></span><br><span class="line"><span class="comment"># Master-eligible nodes 和 Master Node</span></span><br><span class="line">  <span class="number">1</span>. 节点启动默认是一个<span class="literal">Master</span>-eligible节点, -E node.<span class="literal">master</span>:<span class="literal">false</span> 禁止</span><br><span class="line">  <span class="number">2</span>. <span class="literal">Master</span>-eligible节点可以参加选主流程，称为<span class="literal">Master</span>节点</span><br><span class="line">  <span class="number">3</span>. 每个节点都保存集群状态，只有<span class="literal">master</span>节点才能修改集群状态</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群状态 Cluster State</span></span><br><span class="line">  <span class="number">1</span>. 所有节点信息</span><br><span class="line">  <span class="number">2</span>. 所有的索引和相关Mapping 与 Setting信息</span><br><span class="line">  <span class="number">3</span>. 分片的路由信息</span><br><span class="line"></span><br><span class="line"><span class="comment"># Data Node &amp; Coordinating Node</span></span><br><span class="line">  <span class="number">1</span>. Data <span class="keyword">Node</span><span class="title">: 可以保存数据的节点，保存分片数据</span></span><br><span class="line"><span class="title">  2</span>. Coordinating <span class="keyword">Node</span><span class="title">: 负责接受Client</span>请求，将请求分发到合适的节点，最终把结果汇集到一起</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hot &amp; Warm Node</span></span><br><span class="line"><span class="comment"># Machine Learning Node</span></span><br><span class="line"><span class="comment"># Tribe Node</span></span><br></pre></td></tr></table></figure></li>
<li><p>分片 Primary Shard &amp; Replica Shard</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#主分片: 解决数据水平扩展的问题</span></span><br><span class="line"><span class="bullet">  1.</span> 一个分片是一个运行的Lucene的实例</span><br><span class="line"><span class="bullet">  2.</span> 主分片在索引创建时指定，后续不允许修改,使用 Reindex修改</span><br><span class="line"></span><br><span class="line"><span class="section">#副本: 解决数据高可用的问题</span></span><br><span class="line"><span class="bullet">  1.</span> 副本分片数，可以动态调整</span><br><span class="line"><span class="bullet">  2.</span> 增加副本数，可以在一定程度上提高服务的可用性 (读取的吞吐)</span><br><span class="line"></span><br><span class="line"><span class="section">#分片设定-容量规划</span></span><br><span class="line"><span class="bullet">  1.</span> 分片数设置过小:</span><br><span class="line"><span class="code">    a. 后续无法增加节点实现水平扩展</span></span><br><span class="line"><span class="code">    b. 单个分片的数据量过大，导致数据重新分配耗时</span></span><br><span class="line"><span class="code">  2. 分片设置过大:</span></span><br><span class="line"><span class="code">    a. 影响搜索结果的相关性打分，影响统计结果准确性</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 查看集群状态</span></span><br><span class="line">  Green: 主分片和副片正常</span><br><span class="line">  Yellow: 主分片正常，副片不正常</span><br><span class="line">  Red: 主分片未能分配</span><br></pre></td></tr></table></figure></li>
<li><p>Elasticsearch vs 关系型数据库 抽象与类比</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="left">RDBMS</th>
<th align="left">Elasticsearch</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Table</td>
<td align="left">Index</td>
</tr>
<tr>
<td align="left">Row</td>
<td align="left">Document</td>
</tr>
<tr>
<td align="left">Column</td>
<td align="left">Field</td>
</tr>
<tr>
<td align="left">Schema</td>
<td align="left">Mapping</td>
</tr>
<tr>
<td align="left">SQL</td>
<td align="left">DSL</td>
</tr>
</tbody></table>
<ul>
<li><p>文档Document CRUD</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>create document. 自动生成_id</span><br><span class="line">POST users/_doc</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;Mike&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;trying out Kibana&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>create document. 指定Id, 如果ID已经存在，报错</span><br><span class="line">PUT users<span class="regexp">/_doc/</span><span class="number">1</span>?op_type=create</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;trying out Elasticsearch&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>create document. 指定Id, 如果ID已经存在，报错</span><br><span class="line">PUT users<span class="regexp">/_create/</span><span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;trying out Elasticsearch&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Get the document by ID</span><br><span class="line">GET users<span class="regexp">/_doc/</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Index</span><br><span class="line">PUT users<span class="regexp">/_doc/</span><span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;user&quot;</span>: <span class="string">&quot;Mike&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Update 在原文档上增加字段</span><br><span class="line">POST users<span class="regexp">/_update/</span><span class="number">1</span>/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;doc&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;trying out Elasticsearch 3&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><ul>
<li>Bulk API<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">1. 支持在一次API调用中，对不同的索引进行操作</span><br><span class="line">2. 支持四种类型操作:</span><br><span class="line">  <span class="keyword">Index</span></span><br><span class="line">  <span class="keyword">Create</span></span><br><span class="line">  <span class="keyword">Update</span></span><br><span class="line">  <span class="keyword">Delete</span></span><br><span class="line"><span class="number">3.</span> 操作单条操作失败，不会影响其他操作</span><br><span class="line"><span class="number">4.</span> 返回结果包括每一条操作的执行结果</span><br><span class="line"></span><br><span class="line">//Bulk操作</span><br><span class="line">POST _bulk</span><br><span class="line">&#123;<span class="string">&quot;index&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;field1&quot;</span>: <span class="string">&quot;value1&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;delete&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;test&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;create&quot;</span>: &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;test2&quot;</span>, <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;field1&quot;</span>: <span class="string">&quot;value3&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;update&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;1&quot;</span>, <span class="string">&quot;_index&quot;</span>: <span class="string">&quot;test&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;doc&quot;</span>: &#123;<span class="string">&quot;field2&quot;</span>: <span class="string">&quot;value2&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>mget</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//mg</span>et -- 批量读取</span><br><span class="line"><span class="regexp">//</span>可以减少网络连接，提高性能</span><br><span class="line">GET _mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;docs&quot;</span>: [</span><br><span class="line">    &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;users&quot;</span>, <span class="string">&quot;_id&quot;</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;_index&quot;</span>: <span class="string">&quot;comment&quot;</span>, <span class="string">&quot;_id&quot;</span>:<span class="number">1</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Elasticsearch-原理"><a href="#Elasticsearch-原理" class="headerlink" title="Elasticsearch 原理"></a>Elasticsearch 原理</h2><ul>
<li>图书和搜索引擎类比</li>
</ul>
<table>
<thead>
<tr>
<th align="left">Type</th>
<th align="left">正排索引</th>
<th align="left">倒排索引</th>
</tr>
</thead>
<tbody><tr>
<td align="left">图书</td>
<td align="left">目录页</td>
<td align="left">索引页</td>
</tr>
<tr>
<td align="left">搜索引擎</td>
<td align="left">文档ID-&gt;文档内容和单词的关联</td>
<td align="left">单词到文档ID的关系</td>
</tr>
</tbody></table>
<ul>
<li><p>Elasticsearch 倒排索引</p>
<blockquote>
<p>Elasticsearch的JSON文档中每个字段，都有自己的倒排索引</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 单词词典(Term Dictionary)</span></span><br><span class="line"><span class="quote">&gt; 记录所有文档的单词，记录单词到倒排列表的关联关系</span></span><br><span class="line"><span class="quote">&gt; 通过B+树或哈希链表实现，满足高性能的插入与查询</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 倒排列表(Posting List)</span></span><br><span class="line"><span class="quote">&gt; 记录单词对应的文档结合</span></span><br><span class="line"><span class="bullet">  -</span> 倒排索引项(Posting)</span><br><span class="line"><span class="bullet">    -</span> 文档ID</span><br><span class="line"><span class="bullet">    -</span> 词频TF - 单词在文档出现的次数</span><br><span class="line"><span class="bullet">    -</span> 位置Position - 单词在文档中分词的位置，用于语句搜索 phrase query</span><br><span class="line"><span class="bullet">    -</span> 偏移Offset - 记录单词的开始结束位置，实现高量显示</span><br></pre></td></tr></table></figure></li>
<li><p>Elasticsearch 分词器</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Analysis</span></span><br><span class="line">  - Analysis: 文本分析是把全文本转换一系列单词 term/token的过程</span><br><span class="line">  - Analysis是通过Analyzer实现</span><br><span class="line"></span><br><span class="line"><span class="comment"># Analyzer:</span></span><br><span class="line">  - Character Filters: 针对原始文本处理</span><br><span class="line">    - HTML strip - 去除html标签</span><br><span class="line">    - Mapping - 字符串替换</span><br><span class="line">    - Pattern repalce - 正则匹配替换</span><br><span class="line"></span><br><span class="line">  - Tokenizer: 将原始的文本按照一定的规则，切分为词 term or token</span><br><span class="line">    - whitespace</span><br><span class="line">    - standard</span><br><span class="line">    - uax_url_email</span><br><span class="line">    - pattern</span><br><span class="line">    - keyward</span><br><span class="line">    - path hierarchy</span><br><span class="line"></span><br><span class="line">  - Token Filter: 将切分的单词进行加工，小写，删除stopwords,增加同义词</span><br><span class="line">    - Lowercase</span><br><span class="line">    - stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elasticsearch内置分词器</span></span><br><span class="line"><span class="regexp">//</span>默认分词器 standard</span><br><span class="line"><span class="regexp">//</span> 按词切分，小写处理</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;standard&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Simple Analyzer</span><br><span class="line"><span class="regexp">//</span> 按照非字母切分，非字母被去除</span><br><span class="line"><span class="regexp">//</span> 小写处理</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;simple&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Whitespace Analyzer</span><br><span class="line"><span class="regexp">//</span> 按照空格切分</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;whitespace&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Stop Analyzer</span><br><span class="line"><span class="regexp">//</span> stop filter: 去除the, a, is 修饰性词</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;stop&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>Keyward Analyzer</span><br><span class="line"><span class="regexp">//</span>不分词，直接将输入当输出</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>正则表达式进行分词</span><br><span class="line"><span class="regexp">//</span>默认非字符的符号进行分隔</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;pattern&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>english</span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;english&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="string">&quot;2 running Quick brown-foxes leap over dogs in the summer evening.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> analysis_icu</span><br><span class="line"><span class="regexp">//</span> elasticsearch-plugin install analysis_icu</span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;analyzer&quot;</span>: <span class="string">&quot;icu_analyzer&quot;</span>,</span><br><span class="line">  <span class="string">&quot;text&quot;</span>:<span class="string">&quot;他说的确实在理&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Search API</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URI Search - 通过URI query实现搜索</span></span><br><span class="line">  q: 指定查询语句, 使用Query String Syntax</span><br><span class="line">  df: 默认字段, 不指定会对所有字段进行查询</span><br><span class="line">  Sort: 排序/from 和 size 用于分页</span><br><span class="line">  Profile: 查看查询是如何被执行</span><br><span class="line"></span><br><span class="line">  <span class="number">1</span>. 指定字段 vs. 泛查询</span><br><span class="line">  <span class="regexp">//</span>带profile 普通查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=<span class="number">2012</span>&amp;df=title</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>带profile 泛查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=<span class="number">2012</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>带profile 指定字段</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=title:<span class="number">2012</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>. Term vs. Phrase</span><br><span class="line">    <span class="comment"># Term: Beautiful Mind 等效于 Beautiful OR Mind</span></span><br><span class="line">    <span class="comment"># Phrase: &quot;Beautifuk Mind&quot; 等效于 Beautiful And Mind, 前后顺序保持一致</span></span><br><span class="line">  <span class="regexp">//</span>使用引号 查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=title:<span class="string">&quot;Beautiful Mind&quot;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>:<span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>使用引号 Mind 泛 查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=title:Beautiful Mind</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>:<span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span>使用引号 Bool 泛 查询</span><br><span class="line">  GET <span class="regexp">/movies/</span>_search?q=title:(Beautiful Mind)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;profile&quot;</span>:<span class="string">&quot;true&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>. 布尔操作</span><br><span class="line">    AND <span class="regexp">/ OR /</span> NOT 或者 &amp;&amp; <span class="regexp">/ || /</span> !</span><br><span class="line">    title:(matrix NOT reloaded)</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>. 分组</span><br><span class="line">    + 表示 must</span><br><span class="line">    - 表示 must_not</span><br><span class="line">    title:(+matrix -reloaded)</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>. 范围查询</span><br><span class="line">    []闭区间 &#123;&#125;开区间</span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>. 算数符号</span><br><span class="line">    year:&gt;<span class="number">2010</span></span><br><span class="line"></span><br><span class="line">  <span class="number">7</span>. 通配符查询(通配符查询效率低，占用内存大，不建议使用)</span><br><span class="line">    ? 代表<span class="number">1</span>个字符</span><br><span class="line">    * 代表<span class="number">0</span>或多个字符</span><br><span class="line"></span><br><span class="line">  <span class="number">8</span>. 正则表达式</span><br><span class="line">    title:[bt]oy</span><br><span class="line"></span><br><span class="line">  <span class="number">9</span>. 模糊匹配与近似查询</span><br><span class="line">    title:befutifl~<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Request Body Search</span></span><br><span class="line">  <span class="number">1</span>. 分页:</span><br><span class="line">    from, size</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span>. sort:</span><br><span class="line"></span><br><span class="line">  <span class="number">3</span>. _source filtering: 如果_source没有存储，就只返回匹配的文档的元数据</span><br><span class="line"></span><br><span class="line">  <span class="number">4</span>. 脚本字段:</span><br><span class="line"></span><br><span class="line">  <span class="number">5</span>. 查询表达式 - Match</span><br><span class="line"></span><br><span class="line">  <span class="number">6</span>. Match</span><br><span class="line"></span><br><span class="line"><span class="comment"># Page Rank算法</span></span><br><span class="line">  <span class="number">1</span>. 衡量相关性 Information Retrieval</span><br><span class="line">    a. Precision (查准率) - 尽可能返回较少的无关文档</span><br><span class="line">    b. Recall(查全率)     - 尽量返回较多的相关文档</span><br><span class="line">    c. Ranking            - 是否能够按照相关度进行排序</span><br></pre></td></tr></table></figure></li>
<li><p>Mapping</p>
<blockquote>
<p>类似数据库中的scehma定义</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 定义索引中的字段名称</span><br><span class="line"><span class="number">2.</span> 定义字段的数据类型</span><br><span class="line"><span class="keyword">Mapping</span> 把<span class="type">JSON</span>文档映射成Lucene所需要的扁平格式</span><br><span class="line">一个<span class="keyword">Mapping</span>属于一个索引的<span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"># 四种不同级别的<span class="keyword">Index</span> <span class="keyword">Options</span> - 控制倒排索引记录的内容</span><br><span class="line">  docs - 记录doc id</span><br><span class="line">  freqs - 记录 doc id 和 term frequencies</span><br><span class="line">  positions - 记录 doc id/term frequencies/term position</span><br><span class="line">  offsets - 记录 doc id/term frequencies/term position/<span class="type">character</span> offsets</span><br></pre></td></tr></table></figure></li>
<li><p>数据类型<br>JSON -&gt; Elasticsearch类型</p>
<table>
<thead>
<tr>
<th align="left">JSON类型</th>
<th align="left">Elasticsearch 类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">字符串</td>
<td align="left">匹配日期格式 -&gt; Date</td>
</tr>
<tr>
<td align="left">布尔值</td>
<td align="left">boolean</td>
</tr>
<tr>
<td align="left">浮点数</td>
<td align="left">float</td>
</tr>
<tr>
<td align="left">整数</td>
<td align="left">long</td>
</tr>
<tr>
<td align="left">对象</td>
<td align="left">Object</td>
</tr>
<tr>
<td align="left">数组</td>
<td align="left">由第一个非空数值的类型所决定</td>
</tr>
<tr>
<td align="left">空值</td>
<td align="left">忽略</td>
</tr>
</tbody></table>
</li>
</ul>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 简单类型:</span></span><br><span class="line"><span class="bullet">  1.</span> Text/Keyword</span><br><span class="line"><span class="bullet">  2.</span> Date</span><br><span class="line"><span class="bullet">  3.</span> Integer / Floating</span><br><span class="line"><span class="bullet">  4.</span> Boolean</span><br><span class="line"><span class="bullet">  5.</span> IPv4 &amp; IPv6</span><br><span class="line"></span><br><span class="line"><span class="section"># 复杂类型 - 对象和嵌套对象</span></span><br><span class="line">  对象类型/嵌套类型</span><br><span class="line"></span><br><span class="line"><span class="section"># 特殊类型</span></span><br><span class="line">  geo<span class="emphasis">_point &amp; geo_</span>shape / percolator</span><br></pre></td></tr></table></figure>

<h2 id="Elasticsearch-聚合-Aggregation"><a href="#Elasticsearch-聚合-Aggregation" class="headerlink" title="Elasticsearch 聚合 (Aggregation)"></a>Elasticsearch 聚合 (Aggregation)</h2><blockquote>
<p>Elasticsearch 除了搜索以外还提供针对ES数据进行统计分析</p>
</blockquote>
<ul>
<li>集合分类<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Bucket Aggregation: 满足特定条件的文档集合</span><br><span class="line">  <span class="built_in">group</span> <span class="keyword">by</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Metric Aggregation: 数学运算，对文档字段统计分析</span><br><span class="line">  <span class="built_in">min</span>/<span class="built_in">max</span>/<span class="built_in">sum</span>/<span class="built_in">avg</span>/cardinality</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> Pipeline Aggregation: 对聚合结果进行二次聚合</span><br><span class="line"><span class="number">4.</span> Matrix Aggregation: 支持多个字段的操作并提供结果矩阵</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Elasticsearch-分布式结构"><a href="#Elasticsearch-分布式结构" class="headerlink" title="Elasticsearch 分布式结构"></a>Elasticsearch 分布式结构</h2><ul>
<li><p>高可用</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 服务可用性 - 允许有节点停止服务</span><br><span class="line"><span class="bullet">2.</span> 数据可用性 - 部分节点丢失，不会丢失数据</span><br></pre></td></tr></table></figure></li>
<li><p>可扩展性</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 请求量提升/数据不断增加(将数据分布到所有节点上)</span><br></pre></td></tr></table></figure></li>
<li><p>Elasticsearch分布式架构</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 不同的集群通过不同的名字区分，-E <span class="keyword">cluster</span>.name=geektime</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ELK-大数据分析"><a href="#ELK-大数据分析" class="headerlink" title="ELK 大数据分析"></a>ELK 大数据分析</h2>]]></content>
      <tags>
        <tag>搜索引擎</tag>
        <tag>ES</tag>
      </tags>
  </entry>
  <entry>
    <title>golang pkg Tips &amp; Tracks</title>
    <url>/2021/09/03/golang-pkg-Tips-Tracks/</url>
    <content><![CDATA[<h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><ul>
<li>Goals<blockquote>
<p>The efficientcy of a statically-typed compiled language with the ease of programming of a dynamic language.<br>Safety: type-safe and memory-safe<br>Good support for concurrency and communication.<br>Efficient, latency-free garbage collection.<br>High-speed compilation.</p>
</blockquote>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>Design principles</p>
<blockquote>
<p>Keep concept orthogonal(正交).<br>Keep the grammar regular and simple.<br>Reduce typing. Let the language work things out.<br>Reduce typing. Keep the type system clear.</p>
</blockquote>
</li>
<li><p>The Big Picture</p>
<blockquote>
<p>Fundamentals:</p>
</blockquote>
<ul>
<li>Clean, concise syntax.</li>
<li>Lightweight type system.</li>
<li>No implicit conversions: keep things explicit.</li>
<li>Untyped unsized constants:</li>
<li>Strict separation of interface and implementation.<blockquote>
<p>Run-time:</p>
</blockquote>
</li>
<li>Garbage collection.</li>
<li>Strings, maps, communication channels</li>
<li>Concurrency.<blockquote>
<p>Package model:<br>Explicit dependencies to enable faster builds.</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="Go-Identifiers"><a href="#Go-Identifiers" class="headerlink" title="Go Identifiers"></a>Go Identifiers</h2><h2 id="Go-项目组织"><a href="#Go-项目组织" class="headerlink" title="Go 项目组织"></a>Go 项目组织</h2><ul>
<li><p>Go应用</p>
<blockquote>
<p>编写高质量的Go应用</p>
</blockquote>
<ul>
<li>代码结构<ol>
<li>目录结构</li>
<li>按功能拆分模块</li>
</ol>
<ul>
<li>层次拆分 - MVC</li>
<li>功能拆分 - 实现高内聚低耦合的设计哲学</li>
</ul>
</li>
<li>代码规范 - UBer_Go_Guid</li>
<li>代码质量</li>
<li>编程哲学<ul>
<li>面向接口编程<ol>
<li>代码扩展性更强</li>
<li>解耦上下游的实现</li>
<li>提高代码的可测性</li>
</ol>
</li>
<li>面向“对象”编程<ol>
<li>类、抽象、封装通过结构体来实现</li>
<li>实例通过结构体变量来实现</li>
<li>继承通过组合来实现,一个结构体嵌到另一个结构体，称作组合</li>
<li>多态通过结构来实现<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基类: Bird</span></span><br><span class="line"><span class="keyword">type</span> Bird <span class="keyword">struct</span> &#123;</span><br><span class="line">  Type <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鸟来的类别</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bird *Bird)</span> <span class="title">Class</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> bird.Type</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义鸟类</span></span><br><span class="line"><span class="keyword">type</span> Birds <span class="keyword">interface</span> &#123;</span><br><span class="line">  Name() <span class="keyword">string</span></span><br><span class="line">  Class() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鸟类: 金丝雀</span></span><br><span class="line"><span class="keyword">type</span> Canary <span class="keyword">struct</span> &#123;</span><br><span class="line">  Bird</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Canary)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鸟类: 乌鸦</span></span><br><span class="line"><span class="keyword">type</span> Crow <span class="keyword">struct</span> &#123;</span><br><span class="line">  Bird</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Crow)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> c.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCrow</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">Crow</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;Crow&#123;</span><br><span class="line">    Bird: Bird&#123;</span><br><span class="line">      Type: <span class="string">&quot;Crow&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    name: name,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCanary</span><span class="params">(name <span class="keyword">string</span>)</span> *<span class="title">Canary</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &amp;Canary&#123;</span><br><span class="line">    Bird: Bird&#123;</span><br><span class="line">      Type: <span class="string">&quot;Canary&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    name: name,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BirdInfo</span><span class="params">(birds Birds)</span></span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;I&#x27;m %s, I belong to %s bird class!\n&quot;</span>, birds.Name(), birds.Class())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  canary := NewCanary(<span class="string">&quot;CanaryA&quot;</span>)</span><br><span class="line">  crow := NewCrow(<span class="string">&quot;CrowA&quot;</span>)</span><br><span class="line">  BirdInfo(canary)</span><br><span class="line">  BirdInfo(crow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li>软件设计方法<ul>
<li>设计模式 Design Pattern<blockquote>
<p>针对特定场景总结出来的最佳实现方式，特点是解决场景比较具体，实施起来比较简单</p>
</blockquote>
<ul>
<li>创建型模式 Creational Patterns<blockquote>
<p>提供一种在创建对象的同时隐藏创建逻辑的方式，不使用new运算符直接实例化对象</p>
</blockquote>
<ul>
<li>单例模式 Singleton Pattern<blockquote>
<p>单例模式使全局只有一个实例,并且负责创建自己的对象，比较适合全局共享一个实例，且只需要被初始化一次的场景. [数据库实例、全局配置、全局任务池]</p>
</blockquote>
<ul>
<li>饿汉模式: 全局实例在包被加载时创建<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ins *singleton</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//导入时 初始化静态实例</span></span><br><span class="line">  ins = &amp;singleton&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInsOr</span><span class="params">()</span> *<span class="title">singleton</span></span> &#123;</span><br><span class="line">  <span class="comment">// 返回创建好的初始化实例</span></span><br><span class="line">  <span class="keyword">return</span> ins</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>懒汉模式: 全局实例在包被使用时创建<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="keyword">type</span> singleton <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ins *singleton</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetInsOr</span><span class="params">()</span> *<span class="title">singleton2</span></span> &#123;</span><br><span class="line">  <span class="comment">// Do is intended for initialization that must be run exactly once</span></span><br><span class="line">	once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		ins2 = &amp;singleton&#123;<span class="string">&quot;Chyi&quot;</span>&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> ins</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>简单工厂模式<blockquote>
<p>传入参数并返回一个结构体的实例</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">Greet</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Hi! My name is %s&quot;</span>, p.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂模式确保我们创建的实例具有需要的参数，进而保证实例按照预期执行</span></span><br><span class="line"><span class="comment">// 返回非指针的实例，可以确保实例属性避免属性被意外/任意修改</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> <span class="title">Person</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Person&#123;</span><br><span class="line">		Name: name,</span><br><span class="line">		Age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>抽象工厂模式<blockquote>
<p>与简单工厂模式区别是返回的是接口而不是结构体, 在不公开内部实现的情况下，让调用者使用</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> abstract_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">interface</span> &#123;</span><br><span class="line">	Greet()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">Greet</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Hi!, my name is %s&quot;</span>, p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here, NewPerson returns an interface, and not the person struct iteself</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPerson</span><span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> <span class="title">Person</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> person&#123;</span><br><span class="line">		name: name,</span><br><span class="line">		age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>工厂方法模式<blockquote>
<p>依赖工厂接口，通过实现工厂接口来创建多种工厂，将对象创建从一个对象负责所有集体类的实例化，编程由一群子类负责对具体类的实例化,从而将过程解耦</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> method_factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPersonFactory</span><span class="params">(age <span class="keyword">int</span>)</span> <span class="title">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">Person</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">Person</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> Person&#123;</span><br><span class="line">			name: name,</span><br><span class="line">			age:  age,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>建造者模式</li>
<li>原型模式</li>
</ul>
</li>
<li>结构型模式 Structural Patterns<ul>
<li>访问者模式</li>
<li>模版模式 Template Pattern<blockquote>
<p>将一个类中能够公共使用的方法放置在抽象类中实现，将不能公共使用的方法作为抽象方法，强制子类实现，这样就做到一个类作为模版，让开发者填充需要填充的地方</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> template</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cooker <span class="keyword">interface</span> &#123;</span><br><span class="line">	fire()</span><br><span class="line">	cooke()</span><br><span class="line">	outfire()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似一个抽象类</span></span><br><span class="line"><span class="keyword">type</span> CookMenu <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(CookMenu)</span> <span class="title">fire</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;开火&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 做菜 交给具体的子类实现</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(CookMenu)</span> <span class="title">cooke</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(CookMenu)</span> <span class="title">outfire</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;关火&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装具体步骤</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doCook</span><span class="params">(cook Cooker)</span></span> &#123;</span><br><span class="line">	cook.fire()</span><br><span class="line">	cook.cooke()</span><br><span class="line">	cook.outfire()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> XiHongShi <span class="keyword">struct</span> &#123;</span><br><span class="line">	CookMenu</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*XiHongShi)</span> <span class="title">cooke</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;做西红柿&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ChaoJiDan <span class="keyword">struct</span> &#123;</span><br><span class="line">	CookMenu</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ChaoJiDan)</span> <span class="title">cooke</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;做炒鸡蛋&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTemplate</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"> <span class="comment">// 做西红柿</span></span><br><span class="line"> xihongshi := &amp;XiHongShi&#123;&#125;</span><br><span class="line">  doCook(xihongshi)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 做炒鸡蛋</span></span><br><span class="line">  chaojidan := &amp;ChaoJiDan&#123;&#125;</span><br><span class="line">  doCook(chaojidan)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>策略模式 Strategy Pattern<blockquote>
<p>采用不同策略的场景</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> strategy</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个策略类</span></span><br><span class="line"><span class="keyword">type</span> IStrategy <span class="keyword">interface</span> &#123;</span><br><span class="line">	do(<span class="keyword">int</span>, <span class="keyword">int</span>) <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略实现: 加</span></span><br><span class="line"><span class="keyword">type</span> add <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*add)</span> <span class="title">do</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略实现: 减</span></span><br><span class="line"><span class="keyword">type</span> reduce <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*reduce)</span> <span class="title">do</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体策略的执行者</span></span><br><span class="line"><span class="keyword">type</span> Operator <span class="keyword">struct</span> &#123;</span><br><span class="line">	strategy IStrategy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置策略</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(operator *Operator)</span> <span class="title">setStrategy</span><span class="params">(strategy IStrategy)</span></span> &#123;</span><br><span class="line">	operator.strategy = strategy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用策略中的方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(operator *Operator)</span> <span class="title">calculate</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> operator.strategy.do(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestStrategy</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	operator := Operator&#123;&#125;</span><br><span class="line"></span><br><span class="line">	operator.setStrategy(&amp;add&#123;&#125;)</span><br><span class="line">	result := operator.calculate(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;add:&quot;</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>状态模式</li>
<li>观察者模式</li>
<li>备忘录模式</li>
<li>中介者模式</li>
<li>迭代器模式</li>
<li>解释器模式</li>
<li>命令模式</li>
<li>责任链模式</li>
</ul>
</li>
<li>行为型模式 Behavioral Patterns<blockquote>
<p>关注对象之间的通信</p>
</blockquote>
<ul>
<li>适配器模式</li>
<li>桥接模式</li>
<li>组合模式</li>
<li>装饰模式</li>
<li>外观模式</li>
<li>享元模式</li>
<li>代理模式 Proxy Pattern<blockquote>
<p>可以为另一个对象提供一个替身或者占位符，以控制对这个对象的访问</p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package proxy</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Seller interface &#123;</span><br><span class="line">	sell(name <span class="built_in">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 火车站</span></span><br><span class="line"><span class="keyword">type</span> Station <span class="keyword">struct</span> &#123;</span><br><span class="line">	stock <span class="built_in">int</span> <span class="comment">// 库存</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (station *Station) sell(name <span class="built_in">string</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> station.stock &gt; <span class="number">0</span> &#123;</span><br><span class="line">		station.stock--</span><br><span class="line">		fmt.<span class="constructor">Printf(<span class="string">&quot;代理点中: %s买了一张票，剩余: %d \n&quot;</span>, <span class="params">name</span>, <span class="params">station</span>.<span class="params">stock</span>)</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.<span class="constructor">Println(<span class="string">&quot;票已售空&quot;</span>)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 火车代理点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StationProxy <span class="keyword">struct</span> &#123;</span><br><span class="line">	station *Station <span class="comment">// 持有火车站对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (proxy *StationProxy) sell(name <span class="built_in">string</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> proxy.station.stock &gt; <span class="number">0</span> &#123;</span><br><span class="line">		proxy.station.stock--</span><br><span class="line">		fmt.<span class="constructor">Printf(<span class="string">&quot;代理点中: %s买了一张票,剩余: %d \n&quot;</span>, <span class="params">name</span>, <span class="params">proxy</span>.<span class="params">station</span>.<span class="params">stock</span>)</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.<span class="constructor">Println(<span class="string">&quot;票已售空&quot;</span>)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>选项模式 Options Pattern<blockquote>
<p>结构体参数很多，期望创建一个携带默认值的结构体变量，并选择性修改其中一些参数的值</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> options</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Connection <span class="keyword">struct</span> &#123;</span><br><span class="line">	addr    <span class="keyword">string</span></span><br><span class="line">	cache   <span class="keyword">bool</span></span><br><span class="line">	timeout time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	defaultTimeout = <span class="number">10</span></span><br><span class="line">	defaultCaching = <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> options <span class="keyword">struct</span> &#123;</span><br><span class="line">	timeout time.Duration</span><br><span class="line">	caching <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Option override behavior of Connect</span></span><br><span class="line"><span class="keyword">type</span> Option <span class="keyword">interface</span> &#123;</span><br><span class="line">	apply(*options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> optionFunc <span class="function"><span class="keyword">func</span><span class="params">(*options)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f optionFunc)</span> <span class="title">apply</span><span class="params">(o *options)</span></span> &#123;</span><br><span class="line">	f(o)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTimeout</span><span class="params">(t time.Duration)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> optionFunc(<span class="function"><span class="keyword">func</span><span class="params">(o *options)</span></span> &#123;</span><br><span class="line">		o.timeout = t</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCaching</span><span class="params">(cache <span class="keyword">bool</span>)</span> <span class="title">Option</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> optionFunc(<span class="function"><span class="keyword">func</span><span class="params">(o *options)</span></span> &#123;</span><br><span class="line">		o.caching = cache</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewConnect create a connection.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConnect</span><span class="params">(addr <span class="keyword">string</span>, opts ...Option)</span> <span class="params">(*Connection, error)</span></span> &#123;</span><br><span class="line">	options := options&#123;</span><br><span class="line">		timeout: defaultTimeout,</span><br><span class="line">		caching: defaultCaching,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, o := <span class="keyword">range</span> opts &#123;</span><br><span class="line">		o.apply(&amp;options)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &amp;Connection&#123;</span><br><span class="line">		addr:    addr,</span><br><span class="line">		cache:   options.caching,</span><br><span class="line">		timeout: options.timeout,</span><br><span class="line">	&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestOptions</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"> connect, err := NewConnect(<span class="string">&quot;127.0.0.1&quot;</span>, WithCaching(<span class="literal">true</span>), WithTimeout(<span class="number">5</span>))</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatal(err)</span><br><span class="line"> &#125;</span><br><span class="line"> fmt.Println(connect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>SOLID原则<blockquote>
<p>侧重设计原则,设计代码指导方针</p>
</blockquote>
<ul>
<li>SRP: 单一功能原则, 一个类或者模块只负责完成一个指责</li>
<li>OCP: 开闭原则,软件实体应该对扩展开放，对修改关闭</li>
<li>LSP: 里氏替换原则, 如果S是T的子类型，则类型T的对象可以替换为类型S的对象，而不会破坏程序</li>
<li>DIP: 依赖倒置原则，依赖于抽象而不是一个实例，其本质是要面向接口编程，不要面向实现编程</li>
<li>ISP: 接口分离原则，客户端程序不应该依赖它不需要的方法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>项目管理</p>
</li>
<li><p>项目文档</p>
</li>
</ul>
<h2 id="Go-工具集"><a href="#Go-工具集" class="headerlink" title="Go 工具集"></a>Go 工具集</h2><table>
<thead>
<tr>
<th align="left">工具名</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">golines</td>
<td align="left">格式化长行</td>
</tr>
<tr>
<td align="left">goimports</td>
<td align="left">导入包管理，自动增删依赖包，按照字母排序</td>
</tr>
<tr>
<td align="left">mockgen</td>
<td align="left">接口Mock工具</td>
</tr>
<tr>
<td align="left">gotests</td>
<td align="left">根据Go代码自动生成单元测试模版</td>
</tr>
<tr>
<td align="left">go-junit-report</td>
<td align="left">go test输出转换为junit xml</td>
</tr>
<tr>
<td align="left">richgo</td>
<td align="left">用文本装饰丰富go test的输出</td>
</tr>
<tr>
<td align="left">golangci-lint</td>
<td align="left">静态代码检查工具</td>
</tr>
<tr>
<td align="left">rts</td>
<td align="left">response to struct 根据服务器的响应生成Go结构体</td>
</tr>
<tr>
<td align="left">protoc-go-inject-tag</td>
<td align="left">通过protoc工具生成pb.go文件中注入自定义标签</td>
</tr>
<tr>
<td align="left">db2struct</td>
<td align="left">将数据库表一键转换为go struct,支持自定义Tag和多种命名格式配置</td>
</tr>
<tr>
<td align="left">gsemver</td>
<td align="left">根据git commit规范自动生成语义化版本</td>
</tr>
<tr>
<td align="left">git-chglog</td>
<td align="left">根据git commit 自动生成CHANGELOG</td>
</tr>
<tr>
<td align="left">github-release</td>
<td align="left">命令行工具，创建、修改github release</td>
</tr>
<tr>
<td align="left">go-mod-outdated</td>
<td align="left">检查依赖包是否有更新</td>
</tr>
<tr>
<td align="left">depth</td>
<td align="left">通过分析导入的库，将某个包的依赖关系用树状结构显示出来</td>
</tr>
<tr>
<td align="left">go-callvis</td>
<td align="left">可视化显示Go调用关系</td>
</tr>
<tr>
<td align="left">cfssl</td>
<td align="left">CouldFlare的PKI的TLS工具集</td>
</tr>
<tr>
<td align="left">addllicense</td>
<td align="left">通过扫描指定文件的文件，确保源码文件有版权头</td>
</tr>
<tr>
<td align="left">gothanks</td>
<td align="left">自动在github上Star项目的依赖包所在的github repository</td>
</tr>
<tr>
<td align="left">swagger</td>
<td align="left">自动生成Go Swagger文档</td>
</tr>
</tbody></table>
<h2 id="Go-Guide"><a href="#Go-Guide" class="headerlink" title="Go Guide"></a>Go Guide</h2><h2 id="Golang-Frequently-Asked-Questions-FAQ"><a href="#Golang-Frequently-Asked-Questions-FAQ" class="headerlink" title="Golang Frequently Asked Questions (FAQ)"></a>Golang Frequently Asked Questions (FAQ)</h2><ul>
<li><p>Map access is unsafe only when updates are occurring.</p>
</li>
<li><p>How can I gurantee my type satisfies an interface?</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">    Say(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *T)</span> <span class="title">Say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于触发编译期的接口的合理性检查机制</span></span><br><span class="line"><span class="comment">// 如果T没有实现I，会在编译期报错</span></span><br><span class="line"><span class="comment">// 赋值右边是断言类型的零值，对于指针类型、切片、map是nil，对于结构体类型是空结构</span></span><br><span class="line"><span class="comment">// Ask the compiler to check that the type T implements the interface I by</span></span><br><span class="line"><span class="keyword">var</span> _ I = (*T)(<span class="literal">nil</span>) <span class="comment">// Verify that *T implements I.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := T&#123;&#125;</span><br><span class="line">    t.Say(<span class="string">&quot;Say Hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Should I define methods on values or pointers?</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">func (s *MyStruct) pointerMethod() &#123;&#125;   // <span class="keyword">method</span> <span class="keyword">on</span> pointer</span><br><span class="line">func (s MyStruct) valueMethod() &#123;&#125;      // <span class="keyword">method</span> <span class="keyword">on</span> <span class="keyword">value</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">When</span> defining a <span class="keyword">method</span> <span class="keyword">on</span> a <span class="keyword">type</span>, the receiver behaves exactly <span class="keyword">as</span> <span class="keyword">if</span> it were an argument <span class="keyword">to</span> the <span class="keyword">method</span>. Whether <span class="keyword">to</span> define the receiver <span class="keyword">as</span> a <span class="keyword">value</span> <span class="keyword">or</span> <span class="keyword">as</span> a pointer <span class="keyword">is</span> the same question, <span class="keyword">then</span>, <span class="keyword">as</span> whether a <span class="keyword">function</span> argument should be a <span class="keyword">value</span> <span class="keyword">or</span> poiner.</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> First, <span class="keyword">and</span> most important, does the <span class="keyword">method</span> need <span class="keyword">to</span> modify the receiver?</span><br><span class="line"><span class="number">2.</span> Second <span class="keyword">is</span> the consideration <span class="keyword">of</span> efficiency. <span class="keyword">If</span> the receiver <span class="keyword">is</span> <span class="keyword">large</span>, a big struct <span class="keyword">for</span> instance, it will be much cheaper <span class="keyword">to</span> use a pointer receiver.</span><br></pre></td></tr></table></figure></li>
<li><p>What operations are atomic? What about mutexes?</p>
<blockquote>
<p>Do not communicate by sharing memory. Instead, share memory by communicating.</p>
</blockquote>
</li>
<li><p>How can I control the number of CPUs?</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">The runtime can allocate more threads than the value of GOMAXPROCS to service multiple outstanding I/O requests. GOMAXPROCS only affects how many goroutines can actually<span class="built_in"> execute </span>at once; arbitrarily more may be blocked in<span class="keyword"> system</span> calls.</span><br></pre></td></tr></table></figure></li>
<li><p>Who do I write a unit test?</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Create a <span class="keyword">new</span> file ending <span class="keyword">in</span> <span class="module-access"><span class="module"><span class="identifier">_test</span>.</span></span>go <span class="keyword">in</span> the same directory <span class="keyword">as</span> your package sources. Inside that file, import <span class="string">&quot;testing&quot;</span> <span class="keyword">and</span> write functions <span class="keyword">of</span> the form</span><br><span class="line"></span><br><span class="line">func <span class="constructor">TestFoo(<span class="params">t</span> <span class="operator">*</span><span class="params">testing</span>.T)</span> &#123;</span><br><span class="line">  …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>What compiler technology is used to build the compilers?</p>
<blockquote>
<p>The default compiler, gc, was originally written in C, but since the Go 1.5 release the compiler has been a Go program.</p>
</blockquote>
</li>
<li><p>Why do garbage collection? Won’t it be too expensive?</p>
<figure class="highlight mercury"><table><tr><td class="code"><pre><span class="line">The current <span class="keyword">implementation</span> <span class="keyword">is</span> a mark-and-sweep collector.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="User-Go语言编码规范"><a href="#User-Go语言编码规范" class="headerlink" title="User Go语言编码规范"></a>User Go语言编码规范</h2><ul>
<li><p>指导原则:</p>
<ul>
<li><p>指向interface的指针</p>
<ol>
<li>使用指针传递才能通过接口方法修改基础数据</li>
</ol>
</li>
<li><p>Interface 合理性验证</p>
<ol>
<li>var _ http.Handler = (*Handler)(nil)  // 触发编译期的接口合理性检查机制，如果Handler没有实现Http.Handler 会报错</li>
<li>赋值右边是断言类型的零值，指针类型、切片和映射都是nil,对于结构类型是空结构</li>
</ol>
</li>
<li><p>接收器receiver与接口</p>
<ol>
<li>使用值接收器的方法即可以通过值调用，也可以通过指针调用</li>
<li>带指针接收器的方法只能通过指针调用<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 一个类型可以有值接收器方法集和指针接收器方法集</span><br><span class="line">  一个值接收器方法集是指针接收器方法集的子集</span><br><span class="line"><span class="bullet">2.</span> 值对象只可以使用值接收器方法集,指针对象可以使用值接收器方法集+指针接收器方法集</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>零值 Mutex</p>
<blockquote>
<p>零值sync.Mutex, sync.RWMutx是有效的，指向Mutex的指针基本是不必要的</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 使用结构体指针，mutex应该作为结构体的非指针字段，即使该结构体不被导出，不要将mutex嵌入到结构体中</span><br></pre></td></tr></table></figure></li>
<li><p>边界处拷贝Slices和Maps</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 接收Slices 和 Maps: 当<span class="built_in">map</span>或<span class="built_in">slice</span>作为函数参数传入时，用户可以对其进行修改</span><br><span class="line"><span class="number">2.</span> 注意用户对报漏内部状态的<span class="built_in">map</span>或<span class="built_in">slice</span>的修改</span><br></pre></td></tr></table></figure></li>
<li><p>使用defer释放资源</p>
</li>
<li><p>Channel的size要么是1，要么是无缓冲的</p>
</li>
<li><p>枚举从1开始:</p>
</li>
<li><p>使用time处理时间</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">time</span>.<span class="keyword">Time</span>表示瞬时时间</span><br><span class="line"><span class="number">2.</span> <span class="built_in">time</span>.Duration表示时间段</span><br><span class="line"><span class="number">3.</span> <span class="keyword">Time</span>.<span class="keyword">Add</span>: 某个时刻比前一个时刻晚</span><br><span class="line"><span class="number">4.</span> <span class="keyword">Time</span>.AddDate: 下一个日历日</span><br></pre></td></tr></table></figure></li>
<li><p>错误类型</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> errors.New: 对于简单静态字符串的错误</span><br><span class="line"><span class="bullet">2.</span> fmt.Errorf: 对于格式化的错误字符串</span><br><span class="line"><span class="bullet">3.</span> 实现Error()方法的自定义类型</span><br><span class="line"><span class="bullet">4.</span> errors.Wrap: Wrapped errors</span><br></pre></td></tr></table></figure></li>
<li><p>错误包装 Error Wrapping</p>
</li>
<li><p>处理类型断言失败</p>
</li>
<li><p>追加时优先执行切片容量</p>
</li>
</ul>
</li>
<li><p>性能</p>
<ul>
<li>将原语转换为字符串或从字符串转换时，strconv速度比fmt快</li>
<li>指定容器容量,以便为容器预先分配内存，将在添加元素时最小化后续分配 – 容量提示</li>
<li>指定切片容量,编译器为其提供make()的slice的容量分配足够的内存</li>
</ul>
</li>
<li><p>规范</p>
<ul>
<li><p>包名</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 全部小写，没有大写或下划线</span><br><span class="line"><span class="bullet">2.</span> 不使用复数</span><br><span class="line"><span class="bullet">3.</span> 不要用 common, util, shared, lib</span><br></pre></td></tr></table></figure></li>
<li><p>导入别名</p>
<blockquote>
<p>除非导入之间有直接冲突，否则避免导入别名</p>
</blockquote>
</li>
<li><p>减少嵌套</p>
<blockquote>
<p>代码通过尽可能先处理错误情况/特殊情况今早返回或继续循环减少嵌套，减少嵌套多个级别的代码的代码</p>
</blockquote>
</li>
<li><p>顶层变量声明</p>
</li>
</ul>
</li>
</ul>
<h2 id="Golang-Tips-amp-Tracks"><a href="#Golang-Tips-amp-Tracks" class="headerlink" title="Golang Tips &amp; Tracks"></a>Golang Tips &amp; Tracks</h2><ul>
<li><strong>负载均衡算法对比</strong><blockquote>
<p>负载均衡最重要的就是均衡</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">normal_shuffle</span><span class="params">(slice []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(slice); i++ &#123;</span><br><span class="line">    a := rand.Intn(<span class="built_in">len</span>(slice))</span><br><span class="line">    b := rand.Intn(<span class="built_in">len</span>(slice))</span><br><span class="line">    slice[a], slice[b] = slice[b], slice[a]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shuffle</span><span class="params">(indexes []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="built_in">len</span>(indexes); i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">    lastIdx := i - <span class="number">1</span></span><br><span class="line">    idx := rand.Intn(i)</span><br><span class="line">    indexes[lastIdx], indexes[idx] = indexes[idx], indexes[lastIdx]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> cnt1 = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">var</span> sl = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">    normal_shuffle(sl)</span><br><span class="line">    cnt1[sl[<span class="number">0</span>]]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> cnt2 = <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">var</span> sl = []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">    shuffle(sl)</span><br><span class="line">    cnt2[sl[<span class="number">0</span>]]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">&quot;normal shuffle: &quot;</span>, cnt1)</span><br><span class="line">  fmt.Println(<span class="string">&quot;fisher yates  : &quot;</span>, cnt2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chyi/<span class="keyword">go</span>-awesome-prj/shuffle via 🐹 v1<span class="number">.17</span> took <span class="number">38</span>s</span><br><span class="line">➜ <span class="keyword">go</span> run main.<span class="keyword">go</span></span><br><span class="line">normal shuffle:  <span class="keyword">map</span>[<span class="number">0</span>:<span class="number">224558</span> <span class="number">1</span>:<span class="number">128887</span> <span class="number">2</span>:<span class="number">129201</span> <span class="number">3</span>:<span class="number">129493</span> <span class="number">4</span>:<span class="number">129487</span> <span class="number">5</span>:<span class="number">129202</span> <span class="number">6</span>:<span class="number">129172</span>]</span><br><span class="line">fisher yates  :  <span class="keyword">map</span>[<span class="number">0</span>:<span class="number">142974</span> <span class="number">1</span>:<span class="number">143116</span> <span class="number">2</span>:<span class="number">142768</span> <span class="number">3</span>:<span class="number">142660</span> <span class="number">4</span>:<span class="number">142930</span> <span class="number">5</span>:<span class="number">142505</span> <span class="number">6</span>:<span class="number">143047</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>CS - Basic Introduction</title>
    <url>/2021/09/06/CS-Time/</url>
    <content><![CDATA[<blockquote>
<p>计算机通识介绍</p>
</blockquote>
<span id="more"></span>

<h2 id="Time-时间"><a href="#Time-时间" class="headerlink" title="Time 时间"></a>Time 时间</h2><ul>
<li><p>Universal Time: 世界时</p>
<blockquote>
<p>依靠观测天文现象来测量时间，基于地球自转规律</p>
</blockquote>
</li>
<li><p>International Atomic Time: 国际原子时</p>
<blockquote>
<p>以微观时间铯原子的震荡频率为基准，制造原子钟</p>
</blockquote>
</li>
<li><p>Coordinated Universal Time: 协调世界时</p>
<blockquote>
<p>根据世间时和原子时，最终确立新的时间标准，定义成为全球的时间标准</p>
</blockquote>
</li>
<li><p>NTP Network Time Protocol 同步时间</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. NTP如何同步时间</span><br><span class="line">  &gt; 假设网络来回路径对称，并且延迟相同</span><br><span class="line">  网络延时 = (t4 - t1) - (t3 - t2)</span><br><span class="line">  时间差 = t2 - t1 - 网络延迟<span class="regexp">/2 = ((t2-t1) + (t3-t4))/</span><span class="number">2</span></span><br><span class="line"><span class="number">2</span>. 同步时间时，对正在运行的程序有没有影响</span><br><span class="line">  <span class="comment"># 墙上时钟: 世界协调时UTC，校准时间后，可能发生回拨</span></span><br><span class="line">  <span class="comment"># 单调时钟: 计算机自启动以后的纳秒数，不会回拨</span></span><br><span class="line"></span><br><span class="line">NTP校准时间提供<span class="number">2</span>中方式:</span><br><span class="line">  <span class="number">1</span>. ntpdate: 一切已服务器端时间为准，强制修改本机时间</span><br><span class="line">  <span class="number">2</span>. ntpd: 把时间差均摊到每次小的调整上 -- 避免发生倒流</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>Middleware Tips &amp; Tracks</title>
    <url>/2021/09/06/Middleware-Tips-Tracks/</url>
    <content><![CDATA[<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><blockquote>
<p>面对技术选型时，就是一个关于如何取舍的问题，不要不经过思考就觉得那个方案好，那个方案不好。需要根据具体场景分析<br>技术选型不只是技术问题，还与团队、管理、组织结构有关</p>
</blockquote>
<ul>
<li>业务功能角度</li>
<li>技术资源角度<blockquote>
<p>所处的环境、技术资源能否匹配这些技术方案</p>
</blockquote>
</li>
</ul>
<span id="more"></span>

<h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"># 专业消息中间件需要满足:</span><br><span class="line">  1. 消息不丢失</span><br><span class="line">    a. 生产者会不会丢消息?</span><br><span class="line">      -<span class="ruby"> 消息没发送出去: 网络故障或者其他原因导致发布失败，中间件直接返回失败</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> 不确定是否发送成功: 网络问题导致发布超时，可能数据已发送成功，但是读取响应结果超时</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line">      生产者设置最大重试次数，超过上限依旧失败，需要记录日志报警处理, 生产者会不会丢消息，取决于生产者对于异常情况的处理是否合理, 保证消息不丢，宁可重发，也不能丢弃</span><br><span class="line">    b. 消费者会不会丢消息?</span><br><span class="line">      -<span class="ruby"> 消费者在处理完消息后，必须告知队列中间件，队列中间件才会把标记已处理，否则仍旧把这些数据发给消费者</span></span><br><span class="line"><span class="ruby"></span>    c. 队列中间件会不会丢消息?</span><br><span class="line">      -<span class="ruby"> 生产者在发布消息时，队列中间件通常会写多个节点，以此保证消息的完整性，即便其中一个节点挂，也能保证集群数据不丢失</span></span><br><span class="line"><span class="ruby"></span>  2. 消息可堆积</span><br></pre></td></tr></table></figure>
<ul>
<li>Redis 作为消息中间件<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> Redis本身可能会丢数据</span><br><span class="line"><span class="bullet">2.</span> 面对消息积压，Redis内存资源紧张</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>中间件</tag>
        <tag>Middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>Protocol Buffer Intro</title>
    <url>/2021/09/07/Protocol-Buffer-Intro/</url>
    <content><![CDATA[<h1 id="Protocol-Buffers"><a href="#Protocol-Buffers" class="headerlink" title="Protocol Buffers"></a>Protocol Buffers</h1><blockquote>
<p>Google 开发的一套对数据结构进行序列化的方法，可用作数据通信协议、数据存储格式。</p>
</blockquote>
<ul>
<li>主要特征<ul>
<li>更快的数据传输速度：protobuf传输将数据序列化为二进制数据，JSON文本传输格式 节省大量IO操作，提高数据传输速度</li>
<li>跨平台多语言：protobuf编译工具protoc基于protobuf定义文件，编译出不同语言的客户端或者服务端</li>
<li>良好的扩展性和兼容性:</li>
<li>基于IDL文件定义服务，通过proto3工具生成指定语言的数据结构,服务端和客户端接口</li>
</ul>
</li>
</ul>
<span id="more"></span>


]]></content>
      <tags>
        <tag>Protocol Buffer</tag>
      </tags>
  </entry>
  <entry>
    <title>API Design</title>
    <url>/2021/09/07/RESTful-API-Design/</url>
    <content><![CDATA[<blockquote>
<p>目前业界常用的API风格</p>
</blockquote>
<ul>
<li>RESTful</li>
<li>RPC</li>
<li>GraphQL</li>
</ul>
<span id="more"></span>

<h2 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h2><blockquote>
<p>Representational State Transfer - 表现层状态转移<br>REST是一种软件架构风格，是一组架构约束条件和原则<br>REST规范把所有内容都视为资源<br>REST是一种规范，而RESTful API则是满足这种规范的API接口</p>
</blockquote>
<ul>
<li><p>HTTP动词与REST风格CRUD对应关系</p>
<table>
<thead>
<tr>
<th align="left">HTTP方法</th>
<th align="left">行为</th>
<th align="left">URI</th>
<th align="left">示例说明</th>
<th align="left">是否安全</th>
<th align="left">是否幂等</th>
</tr>
</thead>
<tbody><tr>
<td align="left">GET</td>
<td align="left">获取资源列表</td>
<td align="left">/users</td>
<td align="left">获取用户列表</td>
<td align="left">是</td>
<td align="left">是</td>
</tr>
<tr>
<td align="left">GET</td>
<td align="left">获取一个具体资源</td>
<td align="left">/users/admin</td>
<td align="left">获取admin用户的详细信息</td>
<td align="left">是</td>
<td align="left">是</td>
</tr>
<tr>
<td align="left">POST</td>
<td align="left">创建一个新的资源</td>
<td align="left">/users</td>
<td align="left">创建一个新用户</td>
<td align="left">否</td>
<td align="left">否</td>
</tr>
<tr>
<td align="left">PUT</td>
<td align="left">以整体的方式更新一个资源</td>
<td align="left">/users/admin</td>
<td align="left">更新user为admin的用户</td>
<td align="left">否</td>
<td align="left">是</td>
</tr>
<tr>
<td align="left">DELETE</td>
<td align="left">删除服务器上的一个资源</td>
<td align="left">/users/admin</td>
<td align="left">删除user为admin的用户</td>
<td align="left">否</td>
<td align="left">是</td>
</tr>
</tbody></table>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="keyword">GET</span>,<span class="keyword">PUT</span>,POST操作的资源属性一致</span><br><span class="line"><span class="number">2</span>. 资源进行状态/属性变更，要用<span class="keyword">PUT</span>方法，POST方法用来创建或者批量删除</span><br></pre></td></tr></table></figure>

<ul>
<li><p>核心特点</p>
<ol>
<li>以资源resource为中心, 所有的东西都抽象称资源，所有的行为都应该是在资源上的CRUD操作</li>
<li>资源是有状态的，使用JSON/XML等在HTTP Body里表征资源的状态</li>
<li>客户端通过四个HTTP动词，对服务器资源进行操作, 实现“表现层状态转化”</li>
<li>无状态, 对于服务端的弹性扩容是很重要的</li>
</ol>
</li>
<li><p>RESTful API 设计原则</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URI设计</span></span><br><span class="line">  1. 资源名使用名词而不是动词,并且用名词复数表示</span><br><span class="line">  2. URI结尾不包含/</span><br><span class="line">  3. URI中不能出现下划线,必须使用中杠代替</span><br><span class="line">  4. URI路径shying小写，不使用大写</span><br><span class="line">  5. 避免层级过深的URI，超过2层的资源嵌套会很乱,建议其他资源转换为?参数</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全性: 不会改变资源状态</span></span><br><span class="line"><span class="comment"># 幂等性: 执行1次和执行N次，对资源状态改变的效果是等价的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># API版本管理</span></span><br><span class="line">  1. URL中 <span class="string">/v1/users</span></span><br><span class="line">  2. HTTP Header中, Accept: <span class="keyword">version</span>=1.0</span><br><span class="line">  3. Form参数中, <span class="string">/users</span>?<span class="keyword">version</span>=v1</span><br><span class="line"></span><br><span class="line"><span class="comment"># API命名:</span></span><br><span class="line">  1. 驼峰命名法 serverAddress</span><br><span class="line">  2. 蛇形命名法 server_address</span><br><span class="line">  3. 脊柱命名法 server-address -- GitHub API 使用的脊柱命名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统一分页/过滤/排序/搜索功能</span></span><br><span class="line">  1. 分页: <span class="string">/users</span>?offset=0&amp;limit20</span><br><span class="line">  2. 过滤: <span class="string">/users</span>?fields=email,username,address</span><br><span class="line">  3. 排序: <span class="string">/users</span>?sort=age,desc</span><br><span class="line">  4. 搜索:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 域名</span></span><br><span class="line">  1. https:<span class="string">//chyidl.com/api</span> : 这种方式适合API不会有进一步扩展的情况</span><br><span class="line">  2. https:<span class="string">//storage.api.chyidl.com</span> : chyidl.com域名下会新增另一个系统API</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="RPC-API"><a href="#RPC-API" class="headerlink" title="RPC API"></a>RPC API</h2><blockquote>
<p>RPC (Remote Procedure Call) 远程过程调用</p>
</blockquote>
<ul>
<li><p>RPC调用流程</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="built_in">Client</span> 通过本地调用<span class="built_in">Client</span> Stub --</span><br><span class="line"><span class="number">2.</span> <span class="built_in">Client</span> Stub将参数打包称一个消息，然后发送这个消息</span><br><span class="line"><span class="number">3.</span> <span class="built_in">Client</span>所在的OS将消息发送给<span class="built_in">Server</span></span><br><span class="line"><span class="number">4.</span> <span class="built_in">Server</span>端接收到消息后，将消息传递给<span class="built_in">Server</span> Stub</span><br><span class="line"><span class="number">5.</span> <span class="built_in">Server</span> Stub将消息解包，得到参数</span><br><span class="line"><span class="number">6.</span> <span class="built_in">Server</span> Stub调用服务端的子程序，处理完后，最终结果按照相反的步骤返回给<span class="built_in">Client</span></span><br><span class="line"></span><br><span class="line">Stub: 负责调用参数和返回值的流化serialization、参数的打包和解包、以及网络层的通信.</span><br><span class="line"></span><br><span class="line">google gRPC</span><br><span class="line">Facebook Thrift</span><br></pre></td></tr></table></figure></li>
<li><p>RESTful VS gRPC</p>
<table>
<thead>
<tr>
<th align="left">对比项</th>
<th align="left">RESTful</th>
<th align="left">gRPC</th>
</tr>
</thead>
<tbody><tr>
<td align="left">优点</td>
<td align="left">1. REST更规范、更标准、更通用 无论那种语言都支持HTTP协议，可以对接外部很多系统</td>
<td align="left">1. 屏蔽网络细节，调用远程接口像调用本地方法一样，调用简单、方便</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">2. RESTful接口采用JSON作为数据通信格式，JSON格式可读性强</td>
<td align="left">2. gRPC采用Protocol Buffer作为数据传输格式，效率高</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">3. 客户端和服务端松耦合</td>
<td align="left">3.gRPC基于HTTP/2协议标准，性能更高</td>
</tr>
<tr>
<td align="left">缺点</td>
<td align="left">1.扩展性差，随着需求变化</td>
<td align="left">1.Protobuf数据格式可读性差</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">2.性能相对于gRPC偏低</td>
<td align="left">2.gRPC不支持浏览器调用,调试不方便</td>
</tr>
<tr>
<td align="left">使用场景</td>
<td align="left">1. 接口对外，需要接口规范易懂</td>
<td align="left">1.消息密集型、对系统性能和延时要求比较高</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">2.系统能要求不高</td>
<td align="left">2.偏向内部的API</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">3.提供API天生围绕资源、对象、管理展开</td>
<td align="left">3.提供API很难进行资源、对象抽象</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <tags>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>gRPC Intro</title>
    <url>/2021/09/07/gRPC-Intro/</url>
    <content><![CDATA[<h1 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h1><blockquote>
<p>Google开发共性能、开源、跨编程语言的通用RPC框架，基于HTTP2.0协议开发，默认采用Protocol Buffers数据序列化协议</p>
</blockquote>
]]></content>
      <tags>
        <tag>gRPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Gin Crash Course</title>
    <url>/2021/09/08/Gin-Crash-Course/</url>
    <content><![CDATA[<h1 id="Gin-Web-Framework"><a href="#Gin-Web-Framework" class="headerlink" title="Gin Web Framework"></a>Gin Web Framework</h1><blockquote>
<p>Gin是Go语言编写的Web框架，功能完善，使用简单，性能高，Gin核心的路由功能是通过HttpRouter实现，具有很高的路由性能.</p>
</blockquote>
<span id="more"></span>

<h2 id="Web服务核心功能"><a href="#Web服务核心功能" class="headerlink" title="Web服务核心功能"></a>Web服务核心功能</h2><ul>
<li><p>基础功能</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 通信协议: HTTP/HTTPS/gRPC</span></span><br><span class="line"><span class="meta"># 通信格式: JSON/Protobuf</span></span><br><span class="line"><span class="meta"># 路由匹配</span></span><br><span class="line">  &gt; HTTP方法，请求路径匹配到处理这个请求的函数,最终由改函数处理这次请求，并返回结果</span><br><span class="line"><span class="meta"># 路由分组</span></span><br><span class="line"><span class="meta"># 一进程多服务</span></span><br><span class="line"><span class="meta"># 业务处理</span></span><br><span class="line">  <span class="number">1.</span> 参数解析</span><br><span class="line">  <span class="number">2.</span> 参数校验</span><br><span class="line">  <span class="number">3.</span> 逻辑处理</span><br><span class="line">  <span class="number">4.</span> 返回结果</span><br></pre></td></tr></table></figure></li>
<li><p>高级功能</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中间件</span></span><br><span class="line">  &gt; Gin支持中间件，HTTP请求在转发到实际的处理函数之前，会被一系列加载的中间件进行处理</span><br><span class="line">  gin.Engine.<span class="keyword">Use</span>() 方法加载中间件</span><br></pre></td></tr></table></figure>
<p>gin.Logger(): Logger中间件将日志写到gin.DefaultWriter, gin.DefaultWriter默认为os.Stdout<br>gin.Recovery(): Recovery中间件可以从任何panic恢复，并写入500状态<br>gin.CustomRecovery(handle gin.RecoverFunc):<br>gin.BasicAuth(): HTTP 请求基本认证</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">|<span class="string">中间件   </span>|<span class="string"> 功能                  </span>|</span><br><span class="line">|<span class="string">:--------</span>|<span class="string">:----------------------</span>|</span><br><span class="line">|<span class="string"> gin-jwt </span>|<span class="string"> JWT中间件，实现JWT认证</span>|</span><br><span class="line">|<span class="string"> gin-swagger</span>|<span class="string"> 自动生成Swagger 2.0格式的RESTful API文档</span>|</span><br><span class="line">|<span class="string"> cors</span>|<span class="string"> 实现HTTP请求跨域</span>|</span><br><span class="line">|<span class="string">sessions</span>|<span class="string">会话管理中间件</span>|</span><br><span class="line">|<span class="string">authz</span>|<span class="string"> 基于casbin授权中间件</span>|</span><br><span class="line">|<span class="string">pprof</span>|<span class="string"> gin pprof 中间件</span>|</span><br><span class="line">|<span class="string">go-gin-prometheus</span>|<span class="string">Prometheus metrics exporter</span>|</span><br><span class="line">|<span class="string">gzip</span>|<span class="string"> 支持HTTP请求和响应的gzip压缩</span>|</span><br><span class="line">|<span class="string">gin-limit</span>|<span class="string">HTTP请求并发控制中间件</span>|</span><br><span class="line">|<span class="string">requestid</span>|<span class="string">给每个Request生成uuid,并添加在返回的X-Request-ID Header中</span>|</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 认证</span></span><br></pre></td></tr></table></figure>
<p>认证: Authentication: 用来验证某个用户是否具有访问系统的权限 – 证明你是谁<br>授权: Authorization: 用来验证某个用户是否具有访问某个资源的权限 – 决定你能做什么</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> Basic: 基础认证</span><br></pre></td></tr></table></figure>
<p>   用户名:密码: base64编码后，放到HTTP Authorization Header<br>  github.com/chyidl/noone via 🐹 v1.17<br>  ➜ basic=<code>echo -n &#39;admin:Admin@2021&#39;|base64</code></p>
<p>  github.com/chyidl/noone via 🐹 v1.17<br>  ➜ echo $basic<br>  YWRtaW46QWRtaW5AMjAyMQ==</p>
<p>  github.com/chyidl/noone via 🐹 v1.17<br>  ➜ echo $basic | base64 –decode<br>  admin:Admin@2021%</p>
<p>Basic认证简单,但是不安全, 使用Basic认证+SSL配合使用确保整个认证过程安全</p>
<blockquote>
<p>不要再请求参数中使用明文密码，不要在任何存储中保存明文密码</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">2.</span> Digest</span><br><span class="line"><span class="bullet">3.</span> OAuth</span><br><span class="line"><span class="bullet">4.</span> Bearer</span><br><span class="line"><span class="quote">&gt; Bearer认证称为令牌认证。是一种HTTP身份验证方式. Bearer认证的核心是bearer token.</span></span><br></pre></td></tr></table></figure>
<p>bearer token: 是一个加密字符串，由服务端根据密钥生成, 客户端在请求服务端时，必须在请求头包含Authorization: Bearer <token>. 服务端收到请求头，解析出<token>.校验<token>合法性，Bearer认证配合HTTPS使用，保证认证安全性</p>
<p>JSON Web Token: JWT<br>JWT是Bearer Token一个具体实现，由JSON数据格式组成, 通过HASH散列算法生成字符串.</p>
<h1 id="JWT-认证流程"><a href="#JWT-认证流程" class="headerlink" title="JWT 认证流程:"></a>JWT 认证流程:</h1><blockquote>
<p>不要存放敏感信息到Token中<br>Payload exp值不要设置太大，一般开发版本2小时，上线版本7天</p>
</blockquote>
<ol>
<li>客户端使用用户名和密码请求登陆</li>
<li>服务端收到请求后，会验证用户名和密码，如果用户名和密码验证成功，服务端签发Token返回给客户端</li>
<li>客户端收到请求后将Token缓存起来 Cookie中或者LocalStorage,之后每次请求都会携带该Token</li>
<li>服务端收到请求后，验证请求中的Token,验证通过则进行业务逻辑处理，处理完返回处理结果</li>
</ol>
<h1 id="JWT格式"><a href="#JWT格式" class="headerlink" title="JWT格式:"></a>JWT格式:</h1><p>  1.Header</p>
<pre><code>- 类型声明 JWT
- 声明加密算法 HMAC SHA256
- 密钥ID 可选
  &#123;
    &quot;typ&quot;: &quot;JWT&quot;,
    &quot;alg&quot;: &quot;HS256&quot;
    &quot;kid&quot;: &quot;youknowwhoami&quot;
  &#125;
  Header进行base64编码
  github.com/chyidl/noone via 🐹 v1.17
  ➜ echo -n &#39;&#123;&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;,&quot;kid&quot;:&quot;youknowwhoami&quot;&#125;&#39;|base64
  eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6InlvdWtub3d3aG9hbWkifQ==
</code></pre>
<p>  2.Payload</p>
<pre><code>- JWT标准中注册的声明
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">iss</span><span class="params">(Issuer)</span></span>: JWT Token的签发者</span><br><span class="line"><span class="function"><span class="title">sub</span><span class="params">(Subject)</span></span>: 主题</span><br><span class="line"><span class="function"><span class="title">exp</span><span class="params">(Expiration Time)</span></span>: JWT Token过期时间</span><br><span class="line"><span class="function"><span class="title">aud</span><span class="params">(Audience)</span></span>: 接受JWT Token的一方</span><br><span class="line"><span class="function"><span class="title">iat</span><span class="params">(Issued At)</span></span>: JWT Token签发时间</span><br><span class="line"><span class="function"><span class="title">nbf</span><span class="params">(Not Before)</span></span>: JWT Token生效时间</span><br><span class="line"><span class="function"><span class="title">jti</span><span class="params">(JWT ID)</span></span>: JWT Token ID,令牌的唯一标识符</span><br></pre></td></tr></table></figure>
- 公共的声明
  &gt; 添加用户相关信息或者其他业务需要信息
- 私有的声明
  &gt; 客户端和服务端共同定义的声明，base64是对称加密，不建议存放敏感信息
</code></pre>
<p>  3.Signature 签名</p>
<pre><code>- header(base64后的)
- payload(base64后)
- secretKey: 密钥，保存在服务器中，通过配置文件保存
- Salt(加密盐)
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">服务端收到<span class="built_in">Token</span>后会解析出header.payload 然后用相同的加密算法和密钥对header.payload在进行一次加密，并对加密后的<span class="built_in">Token</span>和收到的<span class="built_in">Token</span>是否相同，如果相同则验证通过，不相同返回HTTP <span class="number">401</span> Unauthrozied</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h1 id="RequestID"><a href="#RequestID" class="headerlink" title="RequestID"></a>RequestID</h1><pre><code>&gt; 定于和跟踪RequestID
</code></pre>
<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><pre><code>&gt; 当前软件架构中采用前后端分离，前端访问地址和后端方法地址不同，Web服务需要处理浏览器跨域请求
</code></pre>
<h1 id="优雅关停"><a href="#优雅关停" class="headerlink" title="优雅关停"></a>优雅关停</h1>  <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="comment">// main.go</span></span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;golang.org/x/sync/errgroup&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Product struct &#123;</span><br><span class="line">	Username    string    `json:<span class="string">&quot;username&quot;</span> binding:<span class="string">&quot;required&quot;</span>`</span><br><span class="line">	Name        string    `json:<span class="string">&quot;name&quot;</span> binding:<span class="string">&quot;required&quot;</span>`</span><br><span class="line">	Category    string    `json:<span class="string">&quot;category&quot;</span> binding:<span class="string">&quot;required&quot;</span>`</span><br><span class="line">	Price       int       `json:<span class="string">&quot;price&quot;</span> binding:<span class="string">&quot;gte=0&quot;</span>`</span><br><span class="line">	Description string    `json:<span class="string">&quot;description&quot;</span>`</span><br><span class="line">	CreatedAt   time.Time `json:<span class="string">&quot;createdAt&quot;</span>`</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> productHandler struct &#123;</span><br><span class="line">	sync.RWMutex</span><br><span class="line">	products map[string]Product</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func newProductHandler() *productHandler &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;productHandler&#123;</span><br><span class="line">		products: make(map[string]Product),</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">u</span> *productHandler) Create(c *gin.Context) &#123;</span><br><span class="line">	<span class="keyword">u</span>.Lock()</span><br><span class="line">	defer <span class="keyword">u</span>.Unlock()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1. 参数解析</span></span><br><span class="line">	<span class="keyword">var</span> product Product</span><br><span class="line">  <span class="comment">// 将Body中JSON格式数据解析到指定的Struct中</span></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := c.ShouldBindJSON(&amp;product); <span class="keyword">err</span> != nil &#123;</span><br><span class="line">    <span class="comment">// 返回JSON格式数据</span></span><br><span class="line">		c.JSON(http.StatusBadRequest, gin.<span class="keyword">H</span>&#123;<span class="string">&quot;error&quot;</span>: <span class="keyword">err</span>.<span class="keyword">Error</span>()&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 参数校验</span></span><br><span class="line">	<span class="keyword">if</span> _, ok := <span class="keyword">u</span>.products[product.Name]; ok &#123;</span><br><span class="line">		c.JSON(http.StatusBadRequest, gin.<span class="keyword">H</span>&#123;<span class="string">&quot;error&quot;</span>: fmt.Sprintf(<span class="string">&quot;product %s already exist&quot;</span>, product.Name)&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	product.CreatedAt = time.Now()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. 逻辑处理</span></span><br><span class="line">	<span class="keyword">u</span>.products[product.Name] = product</span><br><span class="line">	<span class="keyword">log</span>.Printf(<span class="string">&quot;Register product %s success&quot;</span>, product.Name)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4. 返回结果</span></span><br><span class="line">	c.JSON(http.StatusOK, product)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (<span class="keyword">u</span> *productHandler) <span class="built_in">Get</span>(c *gin.Context) &#123;</span><br><span class="line">	<span class="keyword">u</span>.Lock()</span><br><span class="line">	defer <span class="keyword">u</span>.Unlock()</span><br><span class="line"></span><br><span class="line">	product, ok := <span class="keyword">u</span>.products[c.Param(<span class="string">&quot;name&quot;</span>)]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line"></span><br><span class="line">		c.JSON(http.StatusNotFound, gin.<span class="keyword">H</span>&#123;<span class="string">&quot;error&quot;</span>: fmt.Errorf(<span class="string">&quot;can not found product %s&quot;</span>, c.Param(<span class="string">&quot;name&quot;</span>))&#125;)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	c.JSON(http.StatusOK, product)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func router() http.Handler &#123;</span><br><span class="line">	router := gin.Default()</span><br><span class="line">	productHandler := newProductHandler()</span><br><span class="line">	<span class="comment">// 路由分组/中间件/认证</span></span><br><span class="line">	v1 := router.<span class="built_in">Group</span>(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">	productv1 := v1.<span class="built_in">Group</span>(<span class="string">&quot;/products&quot;</span>)</span><br><span class="line">	productv1.<span class="keyword">POST</span>(<span class="string">&quot;&quot;</span>, productHandler.Create)</span><br><span class="line">  <span class="comment">// Gin支持两种路由匹配规则</span></span><br><span class="line">  <span class="comment">//  /products/:name 精确匹配</span></span><br><span class="line">  <span class="comment">//  /products/*name 模糊匹配</span></span><br><span class="line">	productv1.<span class="built_in">GET</span>(<span class="string">&quot;:name&quot;</span>, productHandler.Get)</span><br><span class="line">	<span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	<span class="keyword">var</span> eg errgroup.Group</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 一进程多端口</span></span><br><span class="line">  <span class="comment">// Gin是基于net/http包封装的web框架</span></span><br><span class="line">	insecureServer := &amp;http.Server&#123;</span><br><span class="line">		Addr:         <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">		Handler:      router(),</span><br><span class="line">		ReadTimeout:  5 * time.Second,</span><br><span class="line">		WriteTimeout: 10 * time.Second,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	secureServer := &amp;http.Server&#123;</span><br><span class="line">		Addr:         <span class="string">&quot;:8443&quot;</span>,</span><br><span class="line">		Handler:      router(),</span><br><span class="line">		ReadTimeout:  5 * time.Second,</span><br><span class="line">		WriteTimeout: 10 * time.Second,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	eg.Go(func() <span class="keyword">error</span> &#123;</span><br><span class="line">		<span class="keyword">err</span> := insecureServer.ListenAndServe()</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">err</span> != nil &amp;&amp; <span class="keyword">err</span> != http.ErrServerClosed &#123;</span><br><span class="line">			<span class="keyword">log</span>.Fatal(<span class="keyword">err</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">err</span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	eg.Go(func() <span class="keyword">error</span> &#123;</span><br><span class="line">		path, <span class="keyword">err</span> := os.Getwd()</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">			<span class="keyword">log</span>.Println(<span class="keyword">err</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">log</span>.Println(path)</span><br><span class="line">		<span class="keyword">err</span> = secureServer.ListenAndServeTLS(<span class="string">&quot;./server.pem&quot;</span>, <span class="string">&quot;./server.key&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">err</span> != nil &amp;&amp; <span class="keyword">err</span> != http.ErrServerClosed &#123;</span><br><span class="line">			<span class="keyword">log</span>.Fatal(<span class="keyword">err</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">err</span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">err</span> := eg.Wait(); <span class="keyword">err</span> != nil &#123;</span><br><span class="line">		<span class="keyword">log</span>.Fatal(<span class="keyword">err</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul>
<li>支持HTTP方法: GET/POST/PUT/PATCH/DELETE/OPTIONS</li>
<li>支持不同位置的HTTP参数:<ul>
<li>路径参数 path tag uri /user/:name name就是路径参数<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">路径参数: ShouldBindUri, BindUri</span></span><br></pre></td></tr></table></figure></li>
<li>查询字符串参数 query tag form /welcome?firstname=xx firstname就是查询参数<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">查询字符串参数: ShouldBindQuery, BindQuery</span></span><br></pre></td></tr></table></figure></li>
<li>表单参数 form tag form curl -X POST -F ‘username=colins’ <a href="http://mydomain.com/login">http://mydomain.com/login</a>, username就是表单参数<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">表单参数: ShouldBind</span></span><br></pre></td></tr></table></figure></li>
<li>HTTP头参数 header tag header curl -X POST -H ‘Content-Type:application/json’ <a href="http://mydomain.com/login">http://mydomain.com/login</a> Content-Type就是HTTP头参数<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HTTP头参数</span>: ShouldBindHeader, BindHeader</span><br></pre></td></tr></table></figure></li>
<li>消息体参数 body tag json/xml curl -X POST -H ‘Content-Type:application/json’ -d ‘{“username”:”colins”}’ <a href="http://mydomain.com/login">http://mydomain.com/login</a>, username就是消息体参数<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">消息体参数: ShouldBindJSON, BindJSON</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>支持HTTP路由和路由分组</li>
<li>支持自定义Log</li>
<li>支持binding和validation,</li>
<li>支持重定向</li>
<li>支持basic auth middleware</li>
<li>支持自定义HTTP配置</li>
<li>支持优雅关闭</li>
<li>支持HTTP2</li>
<li>支持设置获取cookie</li>
</ul>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul>
<li><p>ping-pong</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := gin.Default()</span><br><span class="line">	r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>启动 &amp; 运行<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">➜ go run main.go</span><br><span class="line">[GIN-<span class="keyword">debug</span>] [<span class="built_in">WARNING</span>] Creating an Engine instance <span class="keyword">with</span> the Logger <span class="keyword">and</span> Recovery middleware already attached.</span><br><span class="line"></span><br><span class="line">[GIN-<span class="keyword">debug</span>] [<span class="built_in">WARNING</span>] Running <span class="keyword">in</span> &quot;debug&quot; mode. Switch <span class="keyword">to</span> &quot;release&quot; mode <span class="keyword">in</span> production.</span><br><span class="line"> - <span class="keyword">using</span> env:	export GIN_MODE=<span class="keyword">release</span></span><br><span class="line"> - <span class="keyword">using</span> code:	gin.SetMode(gin.ReleaseMode)</span><br><span class="line"></span><br><span class="line">[GIN-<span class="keyword">debug</span>] <span class="keyword">GET</span>    /ping                     <span class="comment">--&gt; main.main.func1 (3 handlers)</span></span><br><span class="line">[GIN-<span class="keyword">debug</span>] Environment variable PORT <span class="keyword">is</span> undefined. <span class="keyword">Using</span> port :<span class="number">8080</span> <span class="keyword">by</span> <span class="keyword">default</span></span><br><span class="line">[GIN-<span class="keyword">debug</span>] Listening <span class="keyword">and</span> serving HTTP <span class="keyword">on</span> :<span class="number">8080</span></span><br><span class="line"></span><br><span class="line"># 调用</span><br><span class="line">➜ curl -X <span class="keyword">GET</span> http://localhost:<span class="number">8080</span>/ping</span><br><span class="line">&#123;&quot;message&quot;:&quot;pong&quot;&#125;%</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>源码分析</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># gin.Default</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default returns an Engine instance with the Logger and Recovery middleware already attached.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Default</span><span class="params">()</span> *<span class="title">Engine</span></span> &#123;</span><br><span class="line">	debugPrintWARNINGDefault()  <span class="comment">// 检查Go版本是否达到Gin最低要求</span></span><br><span class="line">	engine := New()</span><br><span class="line">	engine.Use(Logger(), Recovery()) <span class="comment">// 引入中间件</span></span><br><span class="line">	<span class="keyword">return</span> engine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># gin.New</span><br><span class="line"><span class="comment">// New returns a new blank Engine instance without any middleware attached.</span></span><br><span class="line"><span class="comment">// By default the configuration is:</span></span><br><span class="line"><span class="comment">// - RedirectTrailingSlash:  true</span></span><br><span class="line"><span class="comment">// - RedirectFixedPath:      false</span></span><br><span class="line"><span class="comment">// - HandleMethodNotAllowed: false</span></span><br><span class="line"><span class="comment">// - ForwardedByClientIP:    true</span></span><br><span class="line"><span class="comment">// - UseRawPath:             false</span></span><br><span class="line"><span class="comment">// - UnescapePathValues:     true</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">Engine</span></span> &#123;</span><br><span class="line">	debugPrintWARNINGNew()</span><br><span class="line">	engine := &amp;Engine&#123; <span class="comment">// 初始化</span></span><br><span class="line">		RouterGroup: RouterGroup&#123; <span class="comment">// 路由组</span></span><br><span class="line">			Handlers: <span class="literal">nil</span>,</span><br><span class="line">			basePath: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">			root:     <span class="literal">true</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">		FuncMap:                template.FuncMap&#123;&#125;,</span><br><span class="line">		RedirectTrailingSlash:  <span class="literal">true</span>,</span><br><span class="line">		RedirectFixedPath:      <span class="literal">false</span>,</span><br><span class="line">		HandleMethodNotAllowed: <span class="literal">false</span>,</span><br><span class="line">		ForwardedByClientIP:    <span class="literal">true</span>,</span><br><span class="line">		RemoteIPHeaders:        []<span class="keyword">string</span>&#123;<span class="string">&quot;X-Forwarded-For&quot;</span>, <span class="string">&quot;X-Real-IP&quot;</span>&#125;,</span><br><span class="line">		TrustedProxies:         []<span class="keyword">string</span>&#123;<span class="string">&quot;0.0.0.0/0&quot;</span>&#125;,</span><br><span class="line">		AppEngine:              defaultAppEngine,</span><br><span class="line">		UseRawPath:             <span class="literal">false</span>,</span><br><span class="line">		RemoveExtraSlash:       <span class="literal">false</span>,</span><br><span class="line">		UnescapePathValues:     <span class="literal">true</span>,</span><br><span class="line">		MaxMultipartMemory:     defaultMultipartMemory, <span class="comment">// const defaultMultipartMemory = 32 &lt;&lt; 20 // 32 MB</span></span><br><span class="line">		trees:                  <span class="built_in">make</span>(methodTrees, <span class="number">0</span>, <span class="number">9</span>),</span><br><span class="line">		delims:                 render.Delims&#123;Left: <span class="string">&quot;&#123;&#123;&quot;</span>, Right: <span class="string">&quot;&#125;&#125;&quot;</span>&#125;, <span class="comment">// HTML 模版左右定界符</span></span><br><span class="line">		secureJSONPrefix:       <span class="string">&quot;while(1);&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	engine.RouterGroup.engine = engine</span><br><span class="line">	engine.pool.New = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">		<span class="keyword">return</span> engine.allocateContext()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> engine</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># r.GET()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span> <span class="title">handle</span><span class="params">(httpMethod, relativePath <span class="keyword">string</span>, handlers HandlersChain)</span> <span class="title">IRoutes</span></span> &#123;</span><br><span class="line">    absolutePath := group.calculateAbsolutePath(relativePath) <span class="comment">// 计算路由的绝对路径</span></span><br><span class="line">    handlers = group.combineHandlers(handlers)</span><br><span class="line">    group.engine.addRoute(httpMethod, absolutePath, handlers) <span class="comment">// 追加到树</span></span><br><span class="line">    <span class="keyword">return</span> group.returnObj()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"># r.Run()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run attaches the router to a http.Server and starts listening and serving HTTP requests.</span></span><br><span class="line"><span class="comment">// It is a shortcut for http.ListenAndServe(addr, router)</span></span><br><span class="line"><span class="comment">// Note: this method will block the calling goroutine indefinitely unless an error happens.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">Run</span><span class="params">(addr ...<span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; debugPrintError(err) &#125;()</span><br><span class="line"></span><br><span class="line">	trustedCIDRs, err := engine.prepareTrustedCIDRs()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	engine.trustedCIDRs = trustedCIDRs</span><br><span class="line">	address := resolveAddress(addr)</span><br><span class="line">	debugPrint(<span class="string">&quot;Listening and serving HTTP on %s\n&quot;</span>, address)</span><br><span class="line">	err = http.ListenAndServe(address, engine)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文池化防止频繁生成上下文对象，提高性能</span></span><br><span class="line"><span class="comment">// ServeHTTP conforms to the http.Handler interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line">	c := engine.pool.Get().(*Context) <span class="comment">// sync.Pool 对象池中获取一个上下文对象</span></span><br><span class="line">	c.writermem.reset(w)</span><br><span class="line">	c.Request = req</span><br><span class="line">	c.reset()</span><br><span class="line"></span><br><span class="line">	engine.handleHTTPRequest(c)</span><br><span class="line"></span><br><span class="line">	engine.pool.Put(c) <span class="comment">// 返回对象池</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Gin</tag>
        <tag>Web框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile Intro</title>
    <url>/2021/09/08/Makefile-Intro/</url>
    <content><![CDATA[<h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><blockquote>
<p>Makefile 关系到整个工程的编译规则(先后顺序)<br>make: 一个解释makefile中指令的命令工具</p>
</blockquote>
<span id="more"></span>

<h2 id="课前小知识"><a href="#课前小知识" class="headerlink" title="课前小知识"></a>课前小知识</h2><ul>
<li>编译(compile)、链接(link)、库文件(Library File)<ul>
<li> 编译: 将源文件编译成中间代码文件(windows .obj文件, Unix下的.o文件)</li>
<li>编译器值检测程序语法和函数、变量是否被声明.</li>
<li> 链接: 将大量的Object File合成执行文件</li>
<li>链接器会在所有的Object File中寻找函数的实现</li>
<li> 库文件: 将编译的中间文件打包(windows .lib文件, Unix .a Archive File)</li>
</ul>
</li>
</ul>
<h2 id="Makefile-1"><a href="#Makefile-1" class="headerlink" title="Makefile"></a>Makefile</h2><ul>
<li>规则<blockquote>
<p>prerequisties中如果有一个以上的文件比target文件要新的话，command所定义的命令就会被执行</p>
</blockquote>
</li>
</ul>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">target <span class="string">...</span> : prerequisities <span class="string">...</span></span><br><span class="line">  <span class="keyword">command</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="string">...</span></span><br></pre></td></tr></table></figure>
<pre><code>- target:
  - object file 目标文件:
  - execute file 可执行文件:
  - label 标签:
- prerequisites:
  - 依赖的文件
- command:
  - 执行的命令
</code></pre>
<ul>
<li>make如何工作<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># makefile</span><br><span class="line"><span class="keyword">edit</span> : main.<span class="keyword">o</span> kbd.<span class="keyword">o</span> <span class="keyword">command</span>.<span class="keyword">o</span> <span class="keyword">display</span>.<span class="keyword">o</span> \</span><br><span class="line">&gt; <span class="keyword">make</span> 会一层层找文件的依赖关系，知道最终编译初第一个目标文件, <span class="keyword">make</span>只关注文件的依赖性.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>[跟我一起写Makefile (PDF重制版)] (<a href="https://seisman.github.io/how-to-write-makefile/Makefile.pdf">https://seisman.github.io/how-to-write-makefile/Makefile.pdf</a>)</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MySQL Index Intro</title>
    <url>/2021/09/08/MySQL-Index-Intro/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>数据结构-Radix-Tree</title>
    <url>/2021/09/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Radix-Tree/</url>
    <content><![CDATA[<h1 id="Radix-Tree-基数树"><a href="#Radix-Tree-基数树" class="headerlink" title="Radix Tree - 基数树"></a>Radix Tree - 基数树</h1><blockquote>
<p>radix tree用于表示一种空间优化的tree. 假如树中的一个节点是父节点的唯一子节点，那么该节点将会与父节点进行合并 radix tree的边沿edges可以是一个或者多个元素<br>元素个数不是太多，但是元素之间通常有很长的相同前缀时很适合采用radix tree存储<br>Golang的web框架gin使用radix tree作为路由查找的算法.</p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># gin/gin.go</span><br><span class="line"></span><br><span class="line">// <span class="keyword">method</span> -&gt; HTTP <span class="keyword">Method</span> &#123;<span class="keyword">GET</span>,PUT,POST,<span class="keyword">DELETE</span>&#125;</span><br><span class="line">func (engine *Engine) addRoute(<span class="keyword">method</span>, <span class="type">path</span> string, handlers HandlersChain) &#123;</span><br><span class="line">	assert1(<span class="type">path</span>[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span>, &quot;path must begin with &#x27;/&#x27;&quot;)</span><br><span class="line">	assert1(<span class="keyword">method</span> != &quot;&quot;, &quot;HTTP method can not be empty&quot;)</span><br><span class="line">	assert1(len(handlers) &gt; <span class="number">0</span>, &quot;there must be at least one handler&quot;)</span><br><span class="line"></span><br><span class="line">	debugPrintRoute(<span class="keyword">method</span>, <span class="type">path</span>, handlers)</span><br><span class="line"></span><br><span class="line">  // 每一个<span class="keyword">method</span>对应一颗radix tree</span><br><span class="line">	root := engine.trees.<span class="keyword">get</span>(<span class="keyword">method</span>)</span><br><span class="line">	<span class="keyword">if</span> root == nil &#123;</span><br><span class="line">    // 如果获取不到<span class="keyword">method</span>对应的树，就创建</span><br><span class="line">		root = <span class="built_in">new</span>(node)</span><br><span class="line">		root.fullPath = &quot;/&quot;</span><br><span class="line">		engine.trees = append(engine.trees, methodTree&#123;<span class="keyword">method</span>: <span class="keyword">method</span>, root: root&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	root.addRoute(<span class="type">path</span>, handlers)</span><br><span class="line"></span><br><span class="line">	// <span class="keyword">Update</span> maxParams</span><br><span class="line">	<span class="keyword">if</span> paramsCount := countParams(<span class="type">path</span>); paramsCount &gt; engine.maxParams &#123;</span><br><span class="line">		engine.maxParams = paramsCount</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>静态代码检查 golangci-lint</title>
    <url>/2021/09/08/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5-golangci-lint/</url>
    <content><![CDATA[<h1 id="静态代码检查"><a href="#静态代码检查" class="headerlink" title="静态代码检查"></a>静态代码检查</h1><span id="more"></span>

<h2 id="golangci-lint"><a href="#golangci-lint" class="headerlink" title="golangci-lint"></a>golangci-lint</h2><blockquote>
<p>golangci-lint is a fast Go linters runner. It runs linters in parallel, uses caching, supports yaml config, has integrations with all major IDE and has dozens of linters included.</p>
</blockquote>
]]></content>
      <tags>
        <tag>golangci-lint</tag>
      </tags>
  </entry>
  <entry>
    <title>Error Code Design Intro</title>
    <url>/2021/09/09/Error-Code-Design-Intro/</url>
    <content><![CDATA[<h1 id="错误码设计"><a href="#错误码设计" class="headerlink" title="错误码设计"></a>错误码设计</h1><ul>
<li>错误码实现方式<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 无论请求成功或失败，始终返回<span class="number">200</span> http status <span class="selector-tag">code</span></span><br><span class="line"> &gt; 每次请求，都需要解析HTTP <span class="selector-tag">Body</span>,从中解析出错误码和错误信息.</span><br><span class="line"><span class="number">2</span>. 返回合适的HTTP <span class="selector-tag">Code</span>. 并在<span class="selector-tag">Body</span>中返回错误信息和自定义业务<span class="selector-tag">Code</span></span><br><span class="line"><span class="number">3</span>. 返回合适的HTTP <span class="selector-tag">Code</span>, 并在<span class="selector-tag">Body</span>中详尽的错误信息</span><br></pre></td></tr></table></figure></li>
<li>业务Code码设计<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>SwaggerAPI intro</title>
    <url>/2021/09/09/SwaggerAPI-intro/</url>
    <content><![CDATA[<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><blockquote>
<p>Swagger是一套围绕OpenAPI规范构建的开源工具,可以设计·构建·编写·使用RESTAPI</p>
</blockquote>
<ul>
<li>Swagger编辑器:</li>
<li>Swagger UI: 将OpenAPI规范呈现为交互式API文档，并可以在浏览器中尝试API调用</li>
<li>Swagger Codegen: 根据OpenAPI规范，生成服务器存根和客户端代码库</li>
</ul>
<span id="more"></span>

<h2 id="Swagger和OpenAPI区别"><a href="#Swagger和OpenAPI区别" class="headerlink" title="Swagger和OpenAPI区别"></a>Swagger和OpenAPI区别</h2><ul>
<li>OpenAPI<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">OpenAPI是一个API规范，前身是<span class="keyword">Swagger规范. </span><span class="keyword">Swagger是实现规范的工具</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="go-swagger生成Swagger-API-文档"><a href="#go-swagger生成Swagger-API-文档" class="headerlink" title="go-swagger生成Swagger API 文档"></a>go-swagger生成Swagger API 文档</h2><ul>
<li><p>go-swagger特征</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 根据Swagger定义文件生成服务端代码</span><br><span class="line"><span class="bullet">2.</span> 根据Swagger定义文件生成客户端代码</span><br><span class="line"><span class="bullet">3.</span> 校验Swagger定义文件是否正确</span><br><span class="line"><span class="bullet">4.</span> 启动一个HTTP服务器，使我们可以通过浏览器访问API文档</span><br><span class="line"><span class="bullet">5.</span> 根据Swagger文档定义的参数生成Go Model结构体定义</span><br></pre></td></tr></table></figure></li>
<li><p>Swagger工具</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">github.com<span class="regexp">/chyidl/</span>noone via 🐹 v1.<span class="number">17</span></span><br><span class="line">➜ go get -u github.com<span class="regexp">/go-swagger/g</span>o-swagger<span class="regexp">/cmd/</span>swagger</span><br><span class="line"></span><br><span class="line">github.com<span class="regexp">/chyidl/</span>noone via 🐹 v1.<span class="number">17</span> took <span class="number">25</span>s</span><br><span class="line">➜ swagger version</span><br><span class="line">version: v0.<span class="number">27.0</span></span><br><span class="line">commit: (unknown, mod sum: <span class="string">&quot;h1:K7+nkBuf4oS1jTBrdvWqYFpqD69V5CN8HamZzCDDhAI=&quot;</span>)</span><br><span class="line"></span><br><span class="line">github.com<span class="regexp">/chyidl/g</span>o-swagger-demo via 🐹 v1.<span class="number">17</span></span><br><span class="line">➜ swagger generate spec -o swagger.yaml</span><br><span class="line">  -o: 指定输出文件名</span><br><span class="line"></span><br><span class="line">github.com<span class="regexp">/chyidl/g</span>o-swagger-demo via 🐹 v1.<span class="number">17</span></span><br><span class="line">➜ ls</span><br><span class="line">api          docs         go.mod       main.go      swagger.yaml</span><br><span class="line">github.com<span class="regexp">/chyidl/g</span>o-swagger-demo via 🐹 v1.<span class="number">17</span></span><br><span class="line">➜ swagger serve --no-open -F=swagger --port <span class="number">36666</span> swagger.yaml</span><br><span class="line"><span class="number">2021</span><span class="regexp">/09/</span><span class="number">09</span> <span class="number">12</span>:<span class="number">58</span>:<span class="number">09</span> serving docs at http:<span class="regexp">//</span>localhost:<span class="number">36666</span>/docs</span><br><span class="line">  --no-open: 禁止调用浏览器打开</span><br><span class="line">  -F: 指定文档风格</span><br><span class="line">  --port: 指定启动的HTTP服务监听</span><br><span class="line"></span><br><span class="line">github.com<span class="regexp">/chyidl/g</span>o-swagger-demo via 🐹 v1.<span class="number">17</span></span><br><span class="line">➜ swagger generate spec -i .<span class="regexp">/swagger.yaml -o ./</span>swagger.json</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> swagger:route POST /users user createUserRequest</span><br><span class="line"><span class="regexp">//</span> Create a user <span class="keyword">in</span> memory.</span><br><span class="line"><span class="regexp">//</span> responses:</span><br><span class="line"><span class="regexp">//</span>   <span class="number">200</span>: createUserResponse</span><br><span class="line"><span class="regexp">//</span>   default: errResponse</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> swagger:route GET <span class="regexp">/users/</span>&#123;name&#125; user getUserRequest</span><br><span class="line"><span class="regexp">//</span> Get a user from memory.</span><br><span class="line"><span class="regexp">//</span> responses:</span><br><span class="line"><span class="regexp">//</span>   <span class="number">200</span>: getUserResponse</span><br><span class="line"><span class="regexp">//</span>   default: errResponse</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>SwaggerAPI</tag>
      </tags>
  </entry>
  <entry>
    <title>gorm intro</title>
    <url>/2021/09/09/gorm-intro/</url>
    <content><![CDATA[<h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1>]]></content>
      <tags>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Concurrency Patterns</title>
    <url>/2021/09/10/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><ul>
<li><p>Simplicity: 简单</p>
<blockquote>
<p>Simplicity is prerequisite for reliability. 简单是可靠的先觉条件</p>
</blockquote>
</li>
<li><p>Readablity: 可读性</p>
<blockquote>
<p>Readability is essential for maintainablity. 可读性对于可维护性至关重要<br>Programs must be written for people to read, and only incidentally for machine to execute. 程序必须是为人们阅读而编写的，而偶然为及其执行而编写</p>
</blockquote>
</li>
<li><p>Productivity: 生产力</p>
<blockquote>
<p>Design is the art of arranging code to work today, and be changeable forever.</p>
</blockquote>
</li>
</ul>
<span id="more"></span>

<h2 id="A-First-Look-Go-Programming-Language"><a href="#A-First-Look-Go-Programming-Language" class="headerlink" title="A First Look - Go Programming Language"></a>A First Look - Go Programming Language</h2><ul>
<li><p>Hello World</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">package main                    <span class="regexp">//</span> 声明本文件的包名</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> <span class="number">1</span>. 在import中可以使用相对路径 .<span class="regexp">/ ../</span> 引入package</span><br><span class="line"><span class="regexp">//</span> <span class="number">2</span>. 如果没有相对路径 Go会从<span class="variable">$GOPATH</span><span class="regexp">/src/</span>目录寻找</span><br><span class="line">import <span class="string">&quot;fmt&quot;</span>                    <span class="regexp">//</span> import语言的fmt库 - 用于输出</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> fmt 输出格式</span><br><span class="line">  fmt.Printf(<span class="string">&quot;%t\n&quot;</span>, <span class="number">1</span> == <span class="number">2</span>)</span><br><span class="line"> fmt.Printf(<span class="string">&quot;二进制: %b\n&quot;</span>, <span class="number">255</span>)</span><br><span class="line"> fmt.Printf(<span class="string">&quot;八进制: %o\n&quot;</span>, <span class="number">255</span>)</span><br><span class="line"> fmt.Printf(<span class="string">&quot;十六进制: %x\n&quot;</span>, <span class="number">255</span>)</span><br><span class="line"> fmt.Printf(<span class="string">&quot;浮点数: %f\n&quot;</span>, math.Pi)</span><br><span class="line"> fmt.Printf(<span class="string">&quot;字符串: %s\n&quot;</span>, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>var &amp; const</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明初始化一个变量</span></span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">// 声明初始化多个变量</span></span><br><span class="line"><span class="keyword">var</span> i, j, k <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="comment">// 不指明类型，通过初始化值推导</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span> <span class="comment">// bool 类型</span></span><br><span class="line">x := <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="keyword">const</span> p <span class="keyword">string</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">const</span> pi <span class="keyword">float32</span> = <span class="number">3.1415926</span></span><br></pre></td></tr></table></figure></li>
<li><p>Array &amp; Slice</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Slices in the runtime are represented by three components:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// type slice struct &#123;</span></span><br><span class="line"><span class="comment">// 	ptr unsafe.Pointer          // 指向存放数据的数组指针</span></span><br><span class="line"><span class="comment">// 	len int                     // 长度有多大</span></span><br><span class="line"><span class="comment">// 	cap int                     // 容量有多大</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"># 使用反射reflect.DeepEqual() 进行深度比较</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> data <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="built_in">len</span> <span class="keyword">int</span></span><br><span class="line">	p   *<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较两个结构体中数据是否相同</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v1 := data&#123;&#125;</span><br><span class="line">	v2 := data&#123;&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;v1 == v2:&quot;</span>, reflect.DeepEqual(v1, v2))</span><br><span class="line">	<span class="comment">// prints: v1 == v2: true</span></span><br><span class="line"></span><br><span class="line">	m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="string">&quot;a&quot;</span>, <span class="string">&quot;two&quot;</span>: <span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line">	m2 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;two&quot;</span>: <span class="string">&quot;b&quot;</span>, <span class="string">&quot;one&quot;</span>: <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;m1 == m2:&quot;</span>, reflect.DeepEqual(m1, m2))</span><br><span class="line">	<span class="comment">// prints: m1 == m2: true</span></span><br><span class="line"></span><br><span class="line">	s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	s2 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;s1 == s2:&quot;</span>, reflect.DeepEqual(s1, s2))</span><br><span class="line">	<span class="comment">// prints: s1 == s2: true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Go-Model-CSP"><a href="#Go-Model-CSP" class="headerlink" title="Go Model: CSP"></a>Go Model: CSP</h2><ul>
<li>CSP:<blockquote>
<p>Communicating Sequential Processes</p>
</blockquote>
</li>
</ul>
<h2 id="并发-Concurrency-amp-amp-并行-Parallelism"><a href="#并发-Concurrency-amp-amp-并行-Parallelism" class="headerlink" title="并发(Concurrency) &amp;&amp; 并行(Parallelism)"></a>并发(Concurrency) &amp;&amp; 并行(Parallelism)</h2><ul>
<li><p>并发(Concurrency):</p>
<blockquote>
<p>Programming as the composition of independently executing processes.<br>Concurrency is about dealing with lots of things at once.<br>Concurreny is about structure</p>
</blockquote>
</li>
<li><p>并行(Parallelism)</p>
<blockquote>
<p>programming as the simultaneous execution of computations.<br>Parallelism is about doing lots of things at once.<br>Parallelism is about execution</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>A well-written concurrent program might run efficiently in parallel on a multiprocessor.</p>
</blockquote>
<h2 id="进程-amp-线程"><a href="#进程-amp-线程" class="headerlink" title="进程 &amp; 线程"></a>进程 &amp; 线程</h2><blockquote>
<p>进程 Process: 一般是资源分配单元，一个进程拥有堆、栈、虚存空间(页表)、文件描述符<br>线程 Thread: CPU进行调度和执行的实体<br>主进程/主线程: 如果一个进程启动后，没有在创建额外的线程，那么这个进程一般称为主进程或主线程。</p>
</blockquote>
<h2 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h2><blockquote>
<p>Concurrent execution<br>A goroutine is a function running independently in the same address space as other goroutines<br>has its own call stack, which grows and shrinks as required.</p>
</blockquote>
<ul>
<li>goroutine 生命周期管理<ul>
<li>尽量避免在请求中直接启动goroutine处理问题，通过启动worker进行消费，避免由于请求量大，创建大量的goroutine导致OOM<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	_ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setup</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	setup()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 监听服务退出</span></span><br><span class="line">	done := <span class="built_in">make</span>(<span class="keyword">chan</span> error, <span class="number">2</span>)</span><br><span class="line">	<span class="comment">// 控制服务退出</span></span><br><span class="line">	stop := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for debug</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		done &lt;- pprof(stop)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 主程序</span></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		done &lt;- app(stop)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> stoped <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">cap</span>(done); i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> err := &lt;-done; err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Printf(<span class="string">&quot;server exit err: %+v&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> !stoped &#123;</span><br><span class="line">			stoped = <span class="literal">true</span></span><br><span class="line">			<span class="built_in">close</span>(stop)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">app</span><span class="params">(stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	mux := http.NewServeMux()</span><br><span class="line">	mux.HandleFunc(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;pong&quot;</span>))</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> server(mux, <span class="string">&quot;:8080&quot;</span>, stop)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pprof</span><span class="params">(stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		server(http.DefaultServeMux, <span class="string">&quot;:8081&quot;</span>, stop)</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">	<span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;mock pprof exit&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">server</span><span class="params">(handler http.Handler, addr <span class="keyword">string</span>, stop &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	s := http.Server&#123;</span><br><span class="line">		Handler: handler,</span><br><span class="line">		Addr:    addr,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		&lt;-stop</span><br><span class="line">		log.Printf(<span class="string">&quot;server will exiting, addr: %s&quot;</span>, addr)</span><br><span class="line">		s.Shutdown(context.Background())</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> s.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><blockquote>
<p>Synchronization and messaging<br>Channels are typed values that allow goroutines to synchronize and exchange information<br>Channels are first-class values<br>A channel in Go provides a connection between two goroutines, allowing them to communicate</p>
</blockquote>
<ul>
<li><p>无缓冲通道 no-buffer channel</p>
<blockquote>
<p>发送者sender 和 接收者 receiver 必须同时准备好才能进行下去</p>
</blockquote>
</li>
<li><p>缓冲通道 buffer channel</p>
<blockquote>
<p>缓冲通道解决同步等待问题</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declaring and initializing</span></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sending on a channel.</span></span><br><span class="line">c &lt;- <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Receiving from a channel</span></span><br><span class="line"><span class="comment">// The &quot;arrow&quot; indicates the direction of data flow.</span></span><br><span class="line">value = &lt;-c</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><blockquote>
<p>Multi-way concurrent control<br>The select statement is like a switch, but the decision is based on ability to communicate rather than equal values</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fan-in using select</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(input1, input2 &lt;- <span class="keyword">chan</span> <span class="keyword">string</span>)</span> &lt;- <span class="title">chan</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">      <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> s := &lt;-input1: c &lt;- s</span><br><span class="line">        <span class="keyword">case</span> s := &lt;-input2: c &lt;- s</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h2><h3 id="Demo-Project"><a href="#Demo-Project" class="headerlink" title="Demo Project"></a>Demo Project</h3><blockquote>
<p>Always use the right tool for the job</p>
</blockquote>
<ul>
<li>Google Search: A fake framework<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> google_search_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	Web    = fakeSearch(<span class="string">&quot;web&quot;</span>)</span><br><span class="line">	Web1   = fakeSearch(<span class="string">&quot;web1&quot;</span>)</span><br><span class="line">	Web2   = fakeSearch(<span class="string">&quot;web2&quot;</span>)</span><br><span class="line">	Image  = fakeSearch(<span class="string">&quot;image&quot;</span>)</span><br><span class="line">	Image1 = fakeSearch(<span class="string">&quot;Image1&quot;</span>)</span><br><span class="line">	Image2 = fakeSearch(<span class="string">&quot;Image2&quot;</span>)</span><br><span class="line">	Video  = fakeSearch(<span class="string">&quot;video&quot;</span>)</span><br><span class="line">	Video1 = fakeSearch(<span class="string">&quot;Video1&quot;</span>)</span><br><span class="line">	Video2 = fakeSearch(<span class="string">&quot;Video2&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Search <span class="function"><span class="keyword">func</span><span class="params">(query <span class="keyword">string</span>)</span> <span class="title">Result</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fakeSearch</span><span class="params">(kind <span class="keyword">string</span>)</span> <span class="title">Search</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(query <span class="keyword">string</span>)</span> <span class="title">Result</span></span> &#123;</span><br><span class="line">		time.Sleep(time.Duration(rand.Intn(<span class="number">100</span>)) * time.Millisecond)</span><br><span class="line">		<span class="keyword">return</span> Result(fmt.Sprintf(<span class="string">&quot;%s result for %q\n&quot;</span>, kind, query))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Google</span><span class="params">(query <span class="keyword">string</span>)</span> <span class="params">(results []Result)</span></span> &#123;</span><br><span class="line">	results = <span class="built_in">append</span>(results, Web(query))</span><br><span class="line">	results = <span class="built_in">append</span>(results, Image(query))</span><br><span class="line">	results = <span class="built_in">append</span>(results, Video(query))</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoogleV2</span><span class="params">(query <span class="keyword">string</span>)</span> <span class="params">(results []Result)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Run the Web, Image, and Video searches concurrently</span></span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- Web(query) &#125;()</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- Image(query) &#125;()</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- Video(query) &#125;()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// wait for all results</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		result := &lt;-c</span><br><span class="line">		results = <span class="built_in">append</span>(results, result)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoogleV21</span><span class="params">(query <span class="keyword">string</span>)</span> <span class="params">(results []Result)</span></span> &#123;</span><br><span class="line">	<span class="comment">// Don;t wait for slow servers. No locks. No condition variables.</span></span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- Web(query) &#125;()</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- Image(query) &#125;()</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- Video(query) &#125;()</span><br><span class="line"></span><br><span class="line">	timeout := time.After(<span class="number">80</span> * time.Millisecond)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> result := &lt;-c:</span><br><span class="line">			results = <span class="built_in">append</span>(results, result)</span><br><span class="line">		<span class="keyword">case</span> &lt;-timeout:</span><br><span class="line">			fmt.Println(<span class="string">&quot;timed out&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GoogleV3</span><span class="params">(query <span class="keyword">string</span>)</span> <span class="params">(results []Result)</span></span> &#123;</span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- First(query, Web1, Web2) &#125;()</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- First(query, Image1, Image2) &#125;()</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- First(query, Video1, Video2) &#125;()</span><br><span class="line">	timeout := time.After(<span class="number">80</span> * time.Millisecond)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> result := &lt;-c:</span><br><span class="line">			results = <span class="built_in">append</span>(results, result)</span><br><span class="line">		<span class="keyword">case</span> &lt;-timeout:</span><br><span class="line">			fmt.Println(<span class="string">&quot;timed out&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">First</span><span class="params">(query <span class="keyword">string</span>, replicas ...Search)</span> <span class="title">Result</span></span> &#123;</span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> Result)</span><br><span class="line">	searchReplica := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123; c &lt;- replicas[i](query) &#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="keyword">range</span> replicas &#123;</span><br><span class="line">		<span class="keyword">go</span> searchReplica(i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &lt;-c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGoogle</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	start := time.Now()</span><br><span class="line">	results := Google(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">	elapsed := time.Since(start)</span><br><span class="line">	fmt.Println(results)</span><br><span class="line">	fmt.Println(elapsed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGoogleV2</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	start := time.Now()</span><br><span class="line">	results := GoogleV2(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">	elapsed := time.Since(start)</span><br><span class="line">	fmt.Println(results)</span><br><span class="line">	fmt.Println(elapsed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGoogleV21</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	start := time.Now()</span><br><span class="line">	results := GoogleV21(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">	elapsed := time.Since(start)</span><br><span class="line">	fmt.Println(results)</span><br><span class="line">	fmt.Println(elapsed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGoogleV3</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	rand.Seed(time.Now().UnixNano())</span><br><span class="line">	start := time.Now()</span><br><span class="line">	results := GoogleV3(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">	elapsed := time.Since(start)</span><br><span class="line">	fmt.Println(results)</span><br><span class="line">	fmt.Println(elapsed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ➜ go test -v google_search_test.go</span></span><br><span class="line"><span class="comment">// === RUN   TestGoogle</span></span><br><span class="line"><span class="comment">// [web result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">//  image result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">//  video result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="comment">// 31.882269ms</span></span><br><span class="line"><span class="comment">// --- PASS: TestGoogle (0.03s)</span></span><br><span class="line"><span class="comment">// === RUN   TestGoogleV2</span></span><br><span class="line"><span class="comment">// [web result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">//  image result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">//  video result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="comment">// 49.036197ms</span></span><br><span class="line"><span class="comment">// --- PASS: TestGoogleV2 (0.05s)</span></span><br><span class="line"><span class="comment">// === RUN   TestGoogleV21</span></span><br><span class="line"><span class="comment">// [web result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">//  video result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">//  image result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="comment">// 53.507162ms</span></span><br><span class="line"><span class="comment">// --- PASS: TestGoogleV21 (0.05s)</span></span><br><span class="line"><span class="comment">// === RUN   TestGoogleV3</span></span><br><span class="line"><span class="comment">// [Video2 result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">//  web1 result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">//  Image1 result for &quot;golang&quot;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="comment">// 41.612001ms</span></span><br><span class="line"><span class="comment">// --- PASS: TestGoogleV3 (0.04s)</span></span><br><span class="line"><span class="comment">// PASS</span></span><br><span class="line"><span class="comment">// ok  	command-line-arguments	0.301s</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Best-Practice-Writing-Go-Code-最佳实践"><a href="#Best-Practice-Writing-Go-Code-最佳实践" class="headerlink" title="Best Practice Writing Go Code: 最佳实践"></a>Best Practice Writing Go Code: 最佳实践</h2><ul>
<li>software programming 软件编程</li>
<li>software engineering 软件工程</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://dave.cheney.net/practical-go/presentations/qcon-china.html">Practical Go: Real world advice for writing maintainable Go Programs</a></li>
</ul>
]]></content>
      <tags>
        <tag>Golang</tag>
        <tag>sync</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible Intro</title>
    <url>/2021/09/11/Ansible-Intro/</url>
    <content><![CDATA[<h1 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h1><blockquote>
<p>Tool to automate IT tasks.</p>
</blockquote>
<ul>
<li>SIMPLE<ul>
<li>Human readable automation</li>
<li>No special coding skills needed</li>
<li>Tasks executed in order</li>
</ul>
</li>
<li>POWERFUL<ul>
<li>App deployment</li>
<li>Configuration management</li>
<li>Workflow orchestration</li>
</ul>
</li>
<li>AGENTLESS<ul>
<li>Agentless architecture</li>
<li>Use OpenSSH &amp; WinRM</li>
</ul>
</li>
</ul>
<h2 id="What-Can-I-Use-Ansible-To-Do"><a href="#What-Can-I-Use-Ansible-To-Do" class="headerlink" title="What Can I Use Ansible To Do?"></a>What Can I Use Ansible To Do?</h2><ul>
<li>Config Management</li>
<li>App deployment</li>
<li>Provisioning</li>
<li>Continuous delivery</li>
<li>Security &amp; Compliance</li>
<li>orchestration</li>
</ul>
<h2 id="Ansible-Architecture"><a href="#Ansible-Architecture" class="headerlink" title="Ansible Architecture"></a>Ansible Architecture</h2><p><img src="/misc/images/ansible-architecture.png" alt="ansible architecture"></p>
<ul>
<li>MODULES:</li>
</ul>
<h2 id="Quick-Start-Ansible"><a href="#Quick-Start-Ansible" class="headerlink" title="Quick Start Ansible"></a>Quick Start Ansible</h2><ul>
<li>Installing an Ansible<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">$ <span class="string">curl</span> <span class="string">https</span>://<span class="string">bootstrap</span>.<span class="string">pypa</span>.<span class="string">io</span>/<span class="built_in">get-pip.py</span> -<span class="string">o</span> <span class="built_in">get-pip.py</span></span><br><span class="line">$ <span class="string">python</span> <span class="built_in">get-pip.py</span> <span class="built_in">--user</span></span><br><span class="line">$ <span class="string">python</span> -<span class="string">m</span> <span class="string">pip</span> <span class="string">install</span> <span class="built_in">--user</span> <span class="string">ansible</span></span><br><span class="line"></span><br><span class="line">➜ <span class="string">ansible</span> <span class="built_in">--version</span></span><br><span class="line"><span class="string">ansible</span> [<span class="string">core</span> <span class="string">2</span>.<span class="string">11</span>.<span class="string">4</span>]</span><br><span class="line">  <span class="string">config</span> <span class="string">file</span> = <span class="string">None</span></span><br><span class="line">  <span class="string">configured</span> <span class="string">module</span> <span class="string">search</span> <span class="string">path</span> = [<span class="string">&#x27;/Users/chyiyaqing/.ansible/plugins/modules&#x27;</span>, <span class="string">&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]</span><br><span class="line">  <span class="string">ansible</span> <span class="string">python</span> <span class="string">module</span> <span class="string">location</span> = /<span class="string">usr</span>/<span class="string">local</span>/<span class="string">lib</span>/<span class="string">python3</span>.<span class="string">9</span>/<span class="string">site-packages</span>/<span class="string">ansible</span></span><br><span class="line">  <span class="string">ansible</span> <span class="string">collection</span> <span class="string">location</span> = /<span class="string">Users</span>/<span class="string">chyiyaqing</span>/.<span class="string">ansible</span>/<span class="string">collections</span>:/<span class="string">usr</span>/<span class="string">share</span>/<span class="string">ansible</span>/<span class="string">collections</span></span><br><span class="line">  <span class="string">executable</span> <span class="string">location</span> = /<span class="string">usr</span>/<span class="string">local</span>/<span class="string">bin</span>/<span class="string">ansible</span></span><br><span class="line">  <span class="string">python</span> <span class="string">version</span> = <span class="string">3</span>.<span class="string">9</span>.<span class="string">6</span> (<span class="string">default</span>, <span class="string">Jun</span> <span class="string">29</span> <span class="string">2021</span>, <span class="string">05:25:</span><span class="string">02</span>) [<span class="string">Clang</span> <span class="string">12</span>.<span class="string">0</span>.<span class="string">5</span> (<span class="string">clang-1205</span>.<span class="string">0</span>.<span class="string">22</span>.<span class="string">9</span>)]</span><br><span class="line">  <span class="string">jinja</span> <span class="string">version</span> = <span class="string">2</span>.<span class="string">10</span>.<span class="string">1</span></span><br><span class="line">  <span class="string">libyaml</span> = <span class="string">True</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Go CLI Intro</title>
    <url>/2021/09/11/Go-CLI-Intro/</url>
    <content><![CDATA[<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><blockquote>
<p>命令行flag解析</p>
</blockquote>
<ul>
<li><p>flag 长短选项</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	var name string</span><br><span class="line"></span><br><span class="line">  <span class="regexp">//</span> -flag: 仅支持布尔类型</span><br><span class="line">  <span class="regexp">//</span> -flag x: 仅支持非布尔类型</span><br><span class="line">  <span class="regexp">//</span> -flag=x: 均支持</span><br><span class="line">  <span class="regexp">//</span> 长短选项 分开两次调用</span><br><span class="line">	flag.StringVar(&amp;name, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Golang flag tour&quot;</span>, <span class="string">&quot;help&quot;</span>)</span><br><span class="line">	flag.StringVar(&amp;name, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;Golang flag tour&quot;</span>, <span class="string">&quot;help&quot;</span>)</span><br><span class="line">	flag.Parse()</span><br><span class="line"></span><br><span class="line">	log.Printf(<span class="string">&quot;name: %s&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> ➜ go run flag/demo.go -name=<span class="string">&#x27;hello world&#x27;</span> -n <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="regexp">//</span> <span class="number">2021</span><span class="regexp">/09/</span><span class="number">11</span> <span class="number">18</span>:<span class="number">26</span>:<span class="number">39</span> name: hello world</span><br></pre></td></tr></table></figure></li>
<li><p>flag 子命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	var name string</span><br><span class="line"></span><br><span class="line">	flag.Parse()</span><br><span class="line">	args := flag.Args()</span><br><span class="line">	<span class="keyword">if</span> len(args) &lt;= <span class="number">0</span> &#123;</span><br><span class="line">		return</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	switch args[<span class="number">0</span>] &#123;</span><br><span class="line">	case <span class="string">&quot;go&quot;</span>:</span><br><span class="line">		goCmd := flag.NewFlagSet(<span class="string">&quot;go&quot;</span>, flag.ExitOnError)</span><br><span class="line">		goCmd.StringVar(&amp;name, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Golang language&quot;</span>, <span class="string">&quot;help&quot;</span>)</span><br><span class="line">		_ = goCmd.Parse(args[<span class="number">1</span>:])</span><br><span class="line">	case <span class="string">&quot;py&quot;</span>:</span><br><span class="line">		pyCmd := flag.NewFlagSet(<span class="string">&quot;py&quot;</span>, flag.ExitOnError)</span><br><span class="line">		pyCmd.StringVar(&amp;name, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;Python language&quot;</span>, <span class="string">&quot;help&quot;</span>)</span><br><span class="line">		_ = pyCmd.Parse(args[<span class="number">1</span>:])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	log.Printf(<span class="string">&quot;name: %s&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> ➜ go run flag/flag_sub_cli.go go -name=golang</span><br><span class="line"><span class="regexp">//</span> <span class="number">2021</span><span class="regexp">/09/</span><span class="number">11</span> <span class="number">18</span>:<span class="number">39</span>:<span class="number">47</span> name: golang</span><br><span class="line"><span class="regexp">//</span></span><br><span class="line"><span class="regexp">//</span> ➜ go run flag/flag_sub_cli.go go -n=python</span><br><span class="line"><span class="regexp">//</span> flag provided but not defined: -n</span><br><span class="line"><span class="regexp">//</span> Usage of go:</span><br><span class="line"><span class="regexp">//</span>   -name string</span><br><span class="line"><span class="regexp">//</span>     	help (default <span class="string">&quot;Golang language&quot;</span>)</span><br><span class="line"><span class="regexp">//</span> <span class="keyword">exit</span> status <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li><p>flag 源码分析</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"># flag.Parse</span><br><span class="line"></span><br><span class="line"><span class="comment">// CommandLine is the default set of command-line flags, parsed from os.Args.</span></span><br><span class="line"><span class="comment">// The top-level functions such as BoolVar, Arg, and so on are wrappers for the</span></span><br><span class="line"><span class="comment">// methods of CommandLine.</span></span><br><span class="line"><span class="keyword">var</span> CommandLine = NewFlagSet(os.Args[<span class="number">0</span>], ExitOnError)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse parses the command-line flags from os.Args[1:]. Must be called</span></span><br><span class="line"><span class="comment">// after all flags are defined and before flags are accessed by the program.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Parse</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// Ignore errors; CommandLine is set for ExitOnError.</span></span><br><span class="line">	CommandLine.Parse(os.Args[<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># FlagSet.Parse</span><br><span class="line">&gt; parse异常分流处理</span><br><span class="line"><span class="comment">// Parse parses flag definitions from the argument list, which should not</span></span><br><span class="line"><span class="comment">// include the command name. Must be called after all flags in the FlagSet</span></span><br><span class="line"><span class="comment">// are defined and before flags are accessed by the program.</span></span><br><span class="line"><span class="comment">// The return value will be ErrHelp if -help or -h were set but not defined.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FlagSet)</span> <span class="title">Parse</span><span class="params">(arguments []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	f.parsed = <span class="literal">true</span></span><br><span class="line">	f.args = arguments</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		seen, err := f.parseOne()</span><br><span class="line">		<span class="keyword">if</span> seen &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">switch</span> f.errorHandling &#123;</span><br><span class="line">		<span class="keyword">case</span> ContinueOnError:</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		<span class="keyword">case</span> ExitOnError:</span><br><span class="line">			<span class="keyword">if</span> err == ErrHelp &#123;</span><br><span class="line">				os.Exit(<span class="number">0</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			os.Exit(<span class="number">2</span>)</span><br><span class="line">		<span class="keyword">case</span> PanicOnError:</span><br><span class="line">			<span class="built_in">panic</span>(err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># FlagSet.parseOne</span><br><span class="line"><span class="comment">// parseOne parses one flag. It reports whether a flag was seen.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FlagSet)</span> <span class="title">parseOne</span><span class="params">()</span> <span class="params">(<span class="keyword">bool</span>, error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(f.args) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	s := f.args[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(s) &lt; <span class="number">2</span> || s[<span class="number">0</span>] != <span class="string">&#x27;-&#x27;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	numMinuses := <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> s[<span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span> &#123;</span><br><span class="line">		numMinuses++</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">2</span> &#123; <span class="comment">// &quot;--&quot; terminates the flags</span></span><br><span class="line">			f.args = f.args[<span class="number">1</span>:]</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	name := s[numMinuses:]</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(name) == <span class="number">0</span> || name[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> || name[<span class="number">0</span>] == <span class="string">&#x27;=&#x27;</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>, f.failf(<span class="string">&quot;bad flag syntax: %s&quot;</span>, s)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// it&#x27;s a flag. does it have an argument?</span></span><br><span class="line">	f.args = f.args[<span class="number">1</span>:]</span><br><span class="line">	hasValue := <span class="literal">false</span></span><br><span class="line">	value := <span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(name); i++ &#123; <span class="comment">// equals cannot be first</span></span><br><span class="line">		<span class="keyword">if</span> name[i] == <span class="string">&#x27;=&#x27;</span> &#123;</span><br><span class="line">			value = name[i+<span class="number">1</span>:]</span><br><span class="line">			hasValue = <span class="literal">true</span></span><br><span class="line">			name = name[<span class="number">0</span>:i]</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	m := f.formal</span><br><span class="line">	flag, alreadythere := m[name] <span class="comment">// BUG</span></span><br><span class="line">	<span class="keyword">if</span> !alreadythere &#123;</span><br><span class="line">		<span class="keyword">if</span> name == <span class="string">&quot;help&quot;</span> || name == <span class="string">&quot;h&quot;</span> &#123; <span class="comment">// special case for nice help message.</span></span><br><span class="line">			f.usage()</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>, ErrHelp</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>, f.failf(<span class="string">&quot;flag provided but not defined: -%s&quot;</span>, name)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> fv, ok := flag.Value.(boolFlag); ok &amp;&amp; fv.IsBoolFlag() &#123; <span class="comment">// special case: doesn&#x27;t need an arg</span></span><br><span class="line">		<span class="keyword">if</span> hasValue &#123;</span><br><span class="line">			<span class="keyword">if</span> err := fv.Set(value); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>, f.failf(<span class="string">&quot;invalid boolean value %q for -%s: %v&quot;</span>, value, name, err)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> err := fv.Set(<span class="string">&quot;true&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>, f.failf(<span class="string">&quot;invalid boolean flag %s: %v&quot;</span>, name, err)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// It must have a value, which might be the next argument.</span></span><br><span class="line">		<span class="keyword">if</span> !hasValue &amp;&amp; <span class="built_in">len</span>(f.args) &gt; <span class="number">0</span> &#123;</span><br><span class="line">			<span class="comment">// value is the next arg</span></span><br><span class="line">			hasValue = <span class="literal">true</span></span><br><span class="line">			value, f.args = f.args[<span class="number">0</span>], f.args[<span class="number">1</span>:]</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> !hasValue &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>, f.failf(<span class="string">&quot;flag needs an argument: -%s&quot;</span>, name)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err := flag.Value.Set(value); err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>, f.failf(<span class="string">&quot;invalid value %q for flag -%s: %v&quot;</span>, value, name, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> f.actual == <span class="literal">nil</span> &#123;</span><br><span class="line">		f.actual = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*Flag)</span><br><span class="line">	&#125;</span><br><span class="line">	f.actual[name] = flag</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Cobra"><a href="#Cobra" class="headerlink" title="Cobra"></a>Cobra</h2>]]></content>
      <tags>
        <tag>CLI</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Constants</title>
    <url>/2021/09/12/Go-Constants/</url>
    <content><![CDATA[<h1 id="Constants-常量"><a href="#Constants-常量" class="headerlink" title="Constants 常量"></a>Constants 常量</h1><blockquote>
<p>Go是静态类型语言，不允许同步类型的数值类型进行计算. 不允许float64 + int 甚至 int32 + int. 如果你希望不同类型进行计算需要显式转换后在进行 int(float64) + int.</p>
</blockquote>
<span id="more"></span>

<h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><blockquote>
<p>字符串常量使用双引号(Go可以使用<code>raw string</code>)<br>  <figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># hello 是一个无类型的字符串常量, 赋值给有类型的变量不会引起类型错误.</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="string">&quot;Hello, 世界&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># hello是一个字符串常量</span></span><br><span class="line"><span class="keyword">const</span> typedHello <span class="keyword">string</span> = <span class="string">&quot;Hello, 世界&quot;</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="默认类型"><a href="#默认类型" class="headerlink" title="默认类型"></a>默认类型</h2>  <figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># str := <span class="meta-string">&quot;Hello, 世界&quot;</span></span></span><br><span class="line">可能会有疑惑，如果常量是没有类型的，<span class="keyword">str</span>变量如何获取到类型? 答案就是无类型的常量有一个默认类型，如果变量<span class="keyword">str</span>没有声明类型会使用右边表达式中的默认类型.</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>常量</tag>
      </tags>
  </entry>
  <entry>
    <title>Go PProf Intro</title>
    <url>/2021/09/13/Go-PProf-Intro/</url>
    <content><![CDATA[<h1 id="Go-Profling-剖析"><a href="#Go-Profling-剖析" class="headerlink" title="Go Profling - 剖析"></a>Go Profling - 剖析</h1><blockquote>
<p>Using “pprof” to profiling your program<br>Go语言可视化性能分析工具,PProf以profile.proto读取分析样本集合，并生成报告可视化帮助分析数据(支持文本和图形报告)</p>
</blockquote>
<ul>
<li><p>使用场景</p>
<ul>
<li>runtime/pprof: 采集程序指定区块的运行数据分析</li>
<li>net/http/pprof: 基于HTTP Server运行,采集运行时数据分析</li>
<li>go test: 通过运行测试用例，指定所需标识进行采样</li>
</ul>
</li>
<li><p>安装可视化工具graphviz查看profile</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Mac: $ brew install graphviz</span></span><br><span class="line"><span class="meta"># Linux: $ sudo apt install graphviz</span></span><br></pre></td></tr></table></figure></li>
<li><p>支持模式</p>
<ul>
<li>报告生成 Report generation</li>
<li>交互终端使用 Interactive terminal use</li>
<li>Web页面 Web interface</li>
</ul>
</li>
<li><p>可以做那些</p>
<ul>
<li>CPU Profiling: CPU分析<ul>
<li>按照一定频率采集监听应用程序CPU使用情况，确定应用程序的主动消耗CPU周期时花费时间的位置</li>
</ul>
</li>
<li>Memory Profiling: 内存分析<ul>
<li>程序进行堆分配时记录堆栈跟踪，监视当前和历史内存使用情况，检查内存泄漏</li>
</ul>
</li>
<li>Block Profiling: 阻塞分析<ul>
<li>记录Goroutine阻塞等待同步的位置，默认不开启，需要调用runtime.SetBlockProfileRate 设置</li>
</ul>
</li>
<li>Mutex Profiling: 互斥锁分析<ul>
<li>报告互斥锁的竞争情况, 默认不开启, runtime.SetMutexProfileFraction 设置</li>
</ul>
</li>
<li>Goroutine Profiling: Goroutine分析<ul>
<li>对当前应用程序正在运行的Goroutine进行堆栈跟踪和分析</li>
</ul>
</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="How-to-Use"><a href="#How-to-Use" class="headerlink" title="How to Use"></a>How to Use</h2><ul>
<li>runtime/pprof<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pprof useful command:</span></span><br><span class="line">  <span class="built_in">text</span>: show <span class="keyword">the</span> cpu report <span class="keyword">in</span> <span class="built_in">text</span> form</span><br><span class="line">  web: visualize graph <span class="keyword">through</span> web browser</span><br><span class="line">  top &lt;n&gt;: <span class="built_in">list</span> <span class="keyword">the</span> n highest entries <span class="keyword">in</span> <span class="built_in">text</span> form</span><br><span class="line">  <span class="built_in">list</span> &lt;function <span class="built_in">name</span>&gt;: reveal <span class="keyword">the</span> <span class="built_in">running</span> <span class="built_in">time</span> <span class="keyword">of</span> function</span><br><span class="line">  traces</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	_ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var datas []string</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> main() &#123;</span><br><span class="line">	go <span class="keyword">func</span>() &#123;</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			log.Printf(<span class="string">&quot;len: %d&quot;</span>, Add(<span class="string">&quot;go-programming-tour-book&quot;</span>))</span><br><span class="line">			time.Sleep(time.Millisecond * <span class="number">10</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line"></span><br><span class="line">	_ = http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, nil)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> Add(str string) int &#123;</span><br><span class="line">	data := []byte(str)</span><br><span class="line">	datas = append(datas, string(data))</span><br><span class="line">	return len(datas)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 访问 http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/debug/</span>pprof</span><br><span class="line"><span class="regexp">//</span> <span class="regexp">/debug/</span>pprof/</span><br><span class="line"><span class="regexp">//</span></span><br><span class="line"><span class="regexp">//</span> Types of profiles available:</span><br><span class="line"><span class="regexp">//</span> Count	Profile</span><br><span class="line"><span class="regexp">//</span> <span class="number">3</span>	allocs                -- 查看过去内存分配样本</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span>	block                 -- 查看阻塞</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span>	cmdline               -- 命令行调用路径</span><br><span class="line"><span class="regexp">//</span> <span class="number">5</span>	goroutine             -- goroutine堆栈跟踪</span><br><span class="line"><span class="regexp">//</span> <span class="number">3</span>	heap                  -- 堆上内存分配</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span>	mutex                 -- 互斥锁竞争持有者堆栈跟踪</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span>	profile               -- 默认<span class="number">30</span>秒CPU Profiling</span><br><span class="line"><span class="regexp">//</span> <span class="number">7</span>	threadcreate          --</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span>	trace</span><br><span class="line"><span class="regexp">//</span> full goroutine stack dump</span><br></pre></td></tr></table></figure>

<ul>
<li><p>CPU Profiling</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">➜ <span class="keyword">go</span> tool pprof http://localhos<span class="variable">t:8080</span>/<span class="keyword">debug</span>/pprof/<span class="keyword">profile</span>\?seconds\=<span class="number">5</span></span><br><span class="line">Fetching <span class="keyword">profile</span> over HTTP from http://localhos<span class="variable">t:8080</span>/<span class="keyword">debug</span>/pprof/<span class="keyword">profile</span>?seconds=<span class="number">5</span></span><br><span class="line">Saved <span class="keyword">profile</span> in /Users/chyiyaqing/pprof/pprof.samples.cpu.<span class="number">001</span>.pb.gz</span><br><span class="line">Type: cpu</span><br><span class="line">Time: Sep <span class="number">13</span>, <span class="number">2021</span> at <span class="number">5</span>:<span class="number">22</span>pm (CST)</span><br><span class="line">Duration: <span class="number">5</span>s, Total samples = <span class="number">20</span>ms (  <span class="number">0.4</span>%)</span><br><span class="line">Entering interactive <span class="keyword">mode</span> (<span class="built_in">type</span> <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> commands, <span class="string">&quot;o&quot;</span> <span class="keyword">for</span> <span class="keyword">options</span>)</span><br><span class="line">(pprof) top10</span><br><span class="line">Showing nodes accounting <span class="keyword">for</span> <span class="number">20</span>ms, <span class="number">100</span>% of <span class="number">20</span>ms total</span><br><span class="line">Showing top <span class="number">10</span> nodes out of <span class="number">11</span></span><br><span class="line">      flat  flat%   sum%        cum   cum%</span><br><span class="line">      <span class="number">10</span>ms <span class="number">50.00</span>% <span class="number">50.00</span>%       <span class="number">10</span>ms <span class="number">50.00</span>%  <span class="keyword">runtime</span>.kevent</span><br><span class="line">      <span class="number">10</span>ms <span class="number">50.00</span>%   <span class="number">100</span>%       <span class="number">10</span>ms <span class="number">50.00</span>%  <span class="keyword">runtime</span>.pthread_cond_wait</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%       <span class="number">20</span>ms   <span class="number">100</span>%  <span class="keyword">runtime</span>.findrunnable</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%       <span class="number">10</span>ms <span class="number">50.00</span>%  <span class="keyword">runtime</span>.mPark</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%       <span class="number">20</span>ms   <span class="number">100</span>%  <span class="keyword">runtime</span>.mcall</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%       <span class="number">10</span>ms <span class="number">50.00</span>%  <span class="keyword">runtime</span>.netpoll</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%       <span class="number">10</span>ms <span class="number">50.00</span>%  <span class="keyword">runtime</span>.notesleep</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%       <span class="number">20</span>ms   <span class="number">100</span>%  <span class="keyword">runtime</span>.park_m</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%       <span class="number">20</span>ms   <span class="number">100</span>%  <span class="keyword">runtime</span>.schedule</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%       <span class="number">10</span>ms <span class="number">50.00</span>%  <span class="keyword">runtime</span>.semasleep</span><br><span class="line"></span><br><span class="line">fla<span class="variable">t:</span> 函数自身运行耗时</span><br><span class="line">flat%: 函数自身在CPU运行耗时总比例</span><br><span class="line">sum%: 函数自身累计使用CPU比例</span><br><span class="line">cum%: 函数自身及其调用函数运行总耗时</span><br><span class="line">cum%: 函数自身及其调用函数的运行耗时总比例</span><br><span class="line">Name: 函数名</span><br></pre></td></tr></table></figure></li>
<li><p>Heap Profiling</p>
<ul>
<li>inuse_space: 分析常驻内存占用<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">➜ go tool pprof -inuse_space http:<span class="comment">//localhost:8080/debug/pprof/heap</span></span><br><span class="line">Fetching profile over HTTP <span class="keyword">from</span> http:<span class="comment">//localhost:8080/debug/pprof/heap</span></span><br><span class="line">Saved profile in <span class="regexp">/Users/</span>chyiyaqing<span class="regexp">/pprof/</span>pprof.alloc_objects.alloc_space.inuse_objects.inuse_space.<span class="number">002</span>.pb.gz</span><br><span class="line">Type: inuse_space</span><br><span class="line">Time: Sep <span class="number">13</span>, <span class="number">2021</span> at <span class="number">5</span>:<span class="number">30</span>pm (CST)</span><br><span class="line">Entering interactive mode (type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> commands, <span class="string">&quot;o&quot;</span> <span class="keyword">for</span> <span class="keyword">options</span>)</span><br><span class="line">(pprof) top</span><br><span class="line">Showing nodes accounting <span class="keyword">for</span> <span class="number">6951.53</span>kB, <span class="number">100</span>% of <span class="number">6951.53</span>kB total</span><br><span class="line">Showing top <span class="number">10</span> nodes out of <span class="number">18</span></span><br><span class="line">      flat  flat%   sum%        cum   cum%</span><br><span class="line"> <span class="number">4898.20</span>kB <span class="number">70.46</span>% <span class="number">70.46</span>%  <span class="number">4898.20</span>kB <span class="number">70.46</span>%  main.Add (inline)</span><br><span class="line"> <span class="number">1025.12</span>kB <span class="number">14.75</span>% <span class="number">85.21</span>%  <span class="number">1025.12</span>kB <span class="number">14.75</span>%  <span class="keyword">runtime</span>.allocm</span><br><span class="line">  <span class="number">516.01</span>kB  <span class="number">7.42</span>% <span class="number">92.63</span>%   <span class="number">516.01</span>kB  <span class="number">7.42</span>%  unicode.init</span><br><span class="line">  <span class="number">512.20</span>kB  <span class="number">7.37</span>%   <span class="number">100</span>%   <span class="number">512.20</span>kB  <span class="number">7.37</span>%  <span class="keyword">runtime</span>.malg</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%  <span class="number">4898.20</span>kB <span class="number">70.46</span>%  main.main.func1</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%   <span class="number">516.01</span>kB  <span class="number">7.42</span>%  <span class="keyword">runtime</span>.doInit</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%   <span class="number">516.01</span>kB  <span class="number">7.42</span>%  <span class="keyword">runtime</span>.main</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%  <span class="number">1025.12</span>kB <span class="number">14.75</span>%  <span class="keyword">runtime</span>.mstart</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%  <span class="number">1025.12</span>kB <span class="number">14.75</span>%  <span class="keyword">runtime</span>.mstart0</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%  <span class="number">1025.12</span>kB <span class="number">14.75</span>%  <span class="keyword">runtime</span>.mstart1</span><br><span class="line">(pprof) traces</span><br><span class="line">Type: alloc_objects</span><br><span class="line">Time: Sep <span class="number">13</span>, <span class="number">2021</span> at <span class="number">5</span>:<span class="number">57</span>pm (CST)</span><br><span class="line">-----------+-------------------------------------------------------</span><br><span class="line">     bytes:  <span class="number">256</span>kB</span><br><span class="line">         <span class="number">2</span>   compress/flate.(*compressor).init</span><br><span class="line">             compress/flate.<span class="keyword">NewWriter</span></span><br><span class="line">             compress/gzip.(*Writer).<span class="keyword">Write</span></span><br><span class="line">             <span class="keyword">runtime</span>/pprof.(*profileBuilder).build</span><br><span class="line">             <span class="keyword">runtime</span>/pprof.printCountProfile</span><br><span class="line">             <span class="keyword">runtime</span>/pprof.writeRuntimeProfile</span><br><span class="line">             <span class="keyword">runtime</span>/pprof.writeGoroutine</span><br><span class="line">             <span class="keyword">runtime</span>/pprof.(*Profile).WriteTo</span><br><span class="line">             net<span class="regexp">/http/</span>pprof.handler.ServeHTTP</span><br><span class="line">             net<span class="regexp">/http/</span>pprof.Index</span><br><span class="line">             net/http.HandlerFunc.ServeHTTP</span><br><span class="line">             net/http.(*ServeMux).ServeHTTP</span><br><span class="line">             net/http.serverHandler.ServeHTTP</span><br><span class="line">             net/http.(*conn).serve</span><br><span class="line">-----------+-------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
<li>alloc_space: 分析分配内存空间大小</li>
<li>alloc_objects:</li>
<li>inuse_objects:</li>
</ul>
</li>
</ul>
<ul>
<li><p>Goroutine Profiling</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">➜ go tool pprof http:<span class="comment">//localhost:8080/debug/pprof/goroutine</span></span><br><span class="line">Fetching profile over HTTP from http:<span class="comment">//localhost:8080/debug/pprof/goroutine</span></span><br><span class="line">Saved profile <span class="keyword">in</span> /Users/chyiyaqing/pprof/pprof<span class="selector-class">.goroutine</span>.<span class="number">001</span><span class="selector-class">.pb</span><span class="selector-class">.gz</span></span><br><span class="line">Type: goroutine</span><br><span class="line">Time: Sep <span class="number">13</span>, <span class="number">2021</span> at <span class="number">5</span>:<span class="number">54</span>pm (CST)</span><br><span class="line">Entering interactive mode (type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> commands, <span class="string">&quot;o&quot;</span> <span class="keyword">for</span> options)</span><br><span class="line">(pprof) traces  <span class="comment">// 打印调用栈</span></span><br><span class="line">Type: goroutine</span><br><span class="line">Time: Sep <span class="number">13</span>, <span class="number">2021</span> at <span class="number">5</span>:<span class="number">54</span>pm (CST)</span><br><span class="line">-----------+-------------------------------------------------------</span><br><span class="line">         <span class="number">1</span>   runtime<span class="selector-class">.gopark</span></span><br><span class="line">             runtime<span class="selector-class">.netpollblock</span></span><br><span class="line">             internal/poll<span class="selector-class">.runtime_pollWait</span></span><br><span class="line">             internal/poll.(*pollDesc)<span class="selector-class">.wait</span></span><br><span class="line">             internal/poll.(*pollDesc)<span class="selector-class">.waitRead</span> (inline)</span><br><span class="line">             internal/poll.(*FD)<span class="selector-class">.Read</span></span><br><span class="line">             net.(*netFD)<span class="selector-class">.Read</span></span><br><span class="line">             net.(*conn)<span class="selector-class">.Read</span></span><br><span class="line">             net/http.(*connReader)<span class="selector-class">.backgroundRead</span></span><br><span class="line">-----------+-------------------------------------------------------</span><br><span class="line">         <span class="number">1</span>   runtime<span class="selector-class">.gopark</span></span><br><span class="line">             runtime<span class="selector-class">.netpollblock</span></span><br><span class="line">             internal/poll<span class="selector-class">.runtime_pollWait</span></span><br><span class="line">             internal/poll.(*pollDesc)<span class="selector-class">.wait</span></span><br><span class="line">             internal/poll.(*pollDesc)<span class="selector-class">.waitRead</span> (inline)</span><br><span class="line">             internal/poll.(*FD)<span class="selector-class">.Accept</span></span><br><span class="line">             net.(*netFD)<span class="selector-class">.accept</span></span><br><span class="line">             net.(*TCPListener)<span class="selector-class">.accept</span></span><br><span class="line">             net.(*TCPListener)<span class="selector-class">.Accept</span></span><br><span class="line">             net/http.(*Server)<span class="selector-class">.Serve</span></span><br><span class="line">             net/http.(*Server)<span class="selector-class">.ListenAndServe</span></span><br><span class="line">             net/http<span class="selector-class">.ListenAndServe</span> (inline)</span><br><span class="line">             <span class="selector-tag">main</span><span class="selector-class">.main</span></span><br><span class="line">             runtime<span class="selector-class">.main</span></span><br><span class="line">-----------+-------------------------------------------------------</span><br><span class="line">         <span class="number">1</span>   runtime<span class="selector-class">.gopark</span></span><br><span class="line">             <span class="selector-tag">time</span><span class="selector-class">.Sleep</span></span><br><span class="line">             <span class="selector-tag">main</span><span class="selector-class">.main</span><span class="selector-class">.func1</span></span><br><span class="line">-----------+-------------------------------------------------------</span><br><span class="line">         <span class="number">1</span>   runtime/pprof<span class="selector-class">.runtime_goroutineProfileWithLabels</span></span><br><span class="line">             runtime/pprof<span class="selector-class">.writeRuntimeProfile</span></span><br><span class="line">             runtime/pprof<span class="selector-class">.writeGoroutine</span></span><br><span class="line">             runtime/pprof.(*Profile)<span class="selector-class">.WriteTo</span></span><br><span class="line">             net/http/pprof<span class="selector-class">.handler</span><span class="selector-class">.ServeHTTP</span></span><br><span class="line">             net/http/pprof<span class="selector-class">.Index</span></span><br><span class="line">             net/http<span class="selector-class">.HandlerFunc</span><span class="selector-class">.ServeHTTP</span></span><br><span class="line">             net/http.(*ServeMux)<span class="selector-class">.ServeHTTP</span></span><br><span class="line">             net/http<span class="selector-class">.serverHandler</span><span class="selector-class">.ServeHTTP</span></span><br><span class="line">             net/http.(*conn)<span class="selector-class">.serve</span></span><br><span class="line">-----------+-------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
<li><p>Mutex Profiling</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">➜ go tool pprof http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/debug/</span>pprof/mutex</span><br><span class="line">Fetching profile over HTTP from http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/debug/</span>pprof/mutex</span><br><span class="line">Saved profile <span class="keyword">in</span> <span class="regexp">/Users/</span>chyiyaqing<span class="regexp">/pprof/</span>pprof.contentions.delay.<span class="number">003</span>.pb.gz</span><br><span class="line">Type: delay</span><br><span class="line">Time: Sep <span class="number">13</span>, <span class="number">2021</span> at <span class="number">6</span>:<span class="number">05</span>pm (CST)</span><br><span class="line">Entering interactive mode (type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> commands, <span class="string">&quot;o&quot;</span> <span class="keyword">for</span> options)</span><br><span class="line">(pprof) top</span><br><span class="line">Showing nodes accounting <span class="keyword">for</span> <span class="number">941.98</span>us, <span class="number">100</span>% of <span class="number">941.98</span>us total</span><br><span class="line">      flat  flat%   sum%        cum   cum%</span><br><span class="line">  <span class="number">941.98</span>us   <span class="number">100</span>%   <span class="number">100</span>%   <span class="number">941.98</span>us   <span class="number">100</span>%  sync.(*Mutex).Unlock</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%   <span class="number">941.98</span>us   <span class="number">100</span>%  main.main.func1</span><br><span class="line">(pprof) list main</span><br><span class="line">Total: <span class="number">941.98</span>us</span><br><span class="line">ROUTINE ======================== main.main.func1 <span class="keyword">in</span> <span class="regexp">/Users/</span>chyiyaqing<span class="regexp">/Downloads/</span>pprof<span class="regexp">/pprof/m</span>ain2.go</span><br><span class="line">         <span class="number">0</span>   <span class="number">941.98</span>us (flat, cum)   <span class="number">100</span>% of Total</span><br><span class="line">         .          .     <span class="number">18</span>:	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">999</span>; i++ &#123;</span><br><span class="line">         .          .     <span class="number">19</span>:		go <span class="keyword">func</span>(i int) &#123;</span><br><span class="line">         .          .     <span class="number">20</span>:			m.Lock()</span><br><span class="line">         .          .     <span class="number">21</span>:			defer m.Unlock()</span><br><span class="line">         .          .     <span class="number">22</span>:			datas[i] = struct&#123;&#125;&#123;&#125;</span><br><span class="line">         .   <span class="number">941.98</span>us     <span class="number">23</span>:		&#125;(i)</span><br><span class="line">         .          .     <span class="number">24</span>:	&#125;</span><br><span class="line">         .          .     <span class="number">25</span>:</span><br><span class="line">         .          .     <span class="number">26</span>:	_ = http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, nil)</span><br><span class="line">         .          .     <span class="number">27</span>:&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Block Profiling</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">➜ go tool pprof http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/debug/</span>pprof/block</span><br><span class="line">Fetching profile over HTTP from http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/debug/</span>pprof/block</span><br><span class="line">Saved profile <span class="keyword">in</span> <span class="regexp">/Users/</span>chyiyaqing<span class="regexp">/pprof/</span>pprof.contentions.delay.<span class="number">005</span>.pb.gz</span><br><span class="line">Type: delay</span><br><span class="line">Time: Sep <span class="number">13</span>, <span class="number">2021</span> at <span class="number">6</span>:<span class="number">17</span>pm (CST)</span><br><span class="line">Entering interactive mode (type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> commands, <span class="string">&quot;o&quot;</span> <span class="keyword">for</span> options)</span><br><span class="line">(pprof) top</span><br><span class="line">Showing nodes accounting <span class="keyword">for</span> <span class="number">92.66</span>ms, <span class="number">100</span>% of <span class="number">92.67</span>ms total</span><br><span class="line">Dropped <span class="number">4</span> nodes (cum &lt;= <span class="number">0.46</span>ms)</span><br><span class="line">      flat  flat%   sum%        cum   cum%</span><br><span class="line">   <span class="number">92.66</span>ms   <span class="number">100</span>%   <span class="number">100</span>%    <span class="number">92.66</span>ms   <span class="number">100</span>%  sync.(*Mutex).Lock (inline)</span><br><span class="line">         <span class="number">0</span>     <span class="number">0</span>%   <span class="number">100</span>%    <span class="number">92.66</span>ms   <span class="number">100</span>%  main.main.func1</span><br><span class="line">(pprof) list</span><br><span class="line">command list requires an argument</span><br><span class="line">(pprof) list main</span><br><span class="line">Total: <span class="number">92.67</span>ms</span><br><span class="line">ROUTINE ======================== main.main.func1 <span class="keyword">in</span> <span class="regexp">/Users/</span>chyiyaqing<span class="regexp">/Downloads/</span>pprof<span class="regexp">/pprof/m</span>ain2.go</span><br><span class="line">         <span class="number">0</span>    <span class="number">92.66</span>ms (flat, cum)   <span class="number">100</span>% of Total</span><br><span class="line">         .          .     <span class="number">17</span>:<span class="keyword">func</span> main() &#123;</span><br><span class="line">         .          .     <span class="number">18</span>:	var m sync.Mutex</span><br><span class="line">         .          .     <span class="number">19</span>:	var datas = make(map[int]struct&#123;&#125;)</span><br><span class="line">         .          .     <span class="number">20</span>:	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">999</span>; i++ &#123;</span><br><span class="line">         .          .     <span class="number">21</span>:		go <span class="keyword">func</span>(i int) &#123;</span><br><span class="line">         .    <span class="number">92.66</span>ms     <span class="number">22</span>:			m.Lock()</span><br><span class="line">         .          .     <span class="number">23</span>:			defer m.Unlock()</span><br><span class="line">         .          .     <span class="number">24</span>:			datas[i] = struct&#123;&#125;&#123;&#125;</span><br><span class="line">         .          .     <span class="number">25</span>:		&#125;(i)</span><br><span class="line">         .          .     <span class="number">26</span>:	&#125;</span><br><span class="line">         .          .     <span class="number">27</span>:</span><br></pre></td></tr></table></figure></li>
<li><p>查看可视化界面</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">➜ wget http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>/<span class="keyword">debug</span>/pprof/<span class="keyword">profile</span></span><br><span class="line">--<span class="number">2021</span>-<span class="number">09</span>-<span class="number">13</span> <span class="number">18</span>:<span class="number">25</span>:<span class="number">42</span>--  http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>/<span class="keyword">debug</span>/pprof/<span class="keyword">profile</span></span><br><span class="line">Connecting <span class="keyword">to</span> <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8080</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</span><br><span class="line">Length: <span class="number">1290</span> (<span class="number">1.3</span>K) [application/octet-stream]</span><br><span class="line">Saving <span class="keyword">to</span>: ‘<span class="keyword">profile</span>’</span><br><span class="line"></span><br><span class="line"><span class="keyword">profile</span>                            <span class="number">100</span>%[================================================================&gt;]   <span class="number">1.26</span>K  --.-KB/s    <span class="keyword">in</span> <span class="number">0</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">2021</span>-<span class="number">09</span>-<span class="number">13</span> <span class="number">18</span>:<span class="number">26</span>:<span class="number">12</span> (<span class="number">205</span> MB/s) - ‘<span class="keyword">profile</span>’ saved [<span class="number">1290</span>/<span class="number">1290</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">➜ go tool pprof -http=:<span class="number">6001</span> <span class="keyword">profile</span></span><br><span class="line">Serving web UI <span class="keyword">on</span> http://localhost:<span class="number">6001</span></span><br><span class="line">  <span class="comment"># Top</span></span><br><span class="line">  <span class="comment"># Graph: 函数调用流程</span></span><br><span class="line">  <span class="comment"># Peek: 上下文信息</span></span><br><span class="line">  <span class="comment"># Source: 源代码的追踪和分析</span></span><br><span class="line">  <span class="comment"># Flame Graph:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">➜ go tool pprof <span class="keyword">profile</span></span><br><span class="line">Type: cpu</span><br><span class="line">Time: Sep <span class="number">13</span>, <span class="number">2021</span> at <span class="number">6</span>:<span class="number">25</span>pm (CST)</span><br><span class="line">Duration: <span class="number">30</span>s, Total samples = <span class="number">240</span>ms (  <span class="number">0.8</span>%)</span><br><span class="line">Entering interactive mode (type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> commands, <span class="string">&quot;o&quot;</span> <span class="keyword">for</span> options)</span><br><span class="line">(pprof) web</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>性能分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Huawei LiteOS Intro</title>
    <url>/2021/09/14/Huawei-LiteOS-Intro/</url>
    <content><![CDATA[<h1 id="Huawei-LiteOS"><a href="#Huawei-LiteOS" class="headerlink" title="Huawei LiteOS"></a>Huawei LiteOS</h1><blockquote>
<p>面向IOT领域，构建轻量级物联网操作系统, 目前支持ARM64,ARM Contex-A, ARM Cortex-M0, Cortex-M3, Cortex-M4, Cortex-M7</p>
</blockquote>
<ul>
<li>优势:<ul>
<li>高实时性,高稳定性</li>
<li>超小内核，基础内核体积可以裁剪至不到10K</li>
<li>低功耗</li>
<li>支持功能静态裁剪</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="架构框图"><a href="#架构框图" class="headerlink" title="架构框图"></a>架构框图</h2><p><img src="/misc/images/huawei-liteos-architecture.png" alt="Artecture"></p>
<ul>
<li>基础内核:<ul>
<li>极小内核<ul>
<li>任务管理</li>
<li>内存管理</li>
<li>中断管理</li>
<li>异常管理</li>
<li>系统时钟</li>
</ul>
</li>
<li>可裁剪其他模块<ul>
<li>信号量</li>
<li>互斥锁</li>
<li>队列管理</li>
<li>事件管理</li>
<li>软件定时器</li>
</ul>
</li>
</ul>
</li>
<li>内核增强<ul>
<li>C++ 支持</li>
<li>调测组件</li>
<li>shell命令</li>
<li>Trace事件跟踪</li>
<li>CPU占用率</li>
<li>LMS</li>
</ul>
</li>
<li>文件系统<ul>
<li>vfs</li>
<li>ramfs</li>
<li>fatfs</li>
</ul>
</li>
<li>系统库接口<ul>
<li>libc</li>
<li>libm</li>
<li>posix</li>
<li>cmsis</li>
</ul>
</li>
<li>网络协议栈<ul>
<li>CoAP</li>
<li>LwM2M</li>
<li>MQTT</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>IOT</tag>
      </tags>
  </entry>
  <entry>
    <title>Blockchain Intro</title>
    <url>/2021/09/17/Blockchain-Intro/</url>
    <content><![CDATA[<h1 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h1><blockquote>
<p>区块链技术萌芽于比特币，诞生在以太坊, 区块链是价值的载体，是一种新型的社会生产关系。基于区块链技术，打通现实世界与网络世界的屏障，将物质虚拟化，将价值实体化.</p>
</blockquote>
<span id="more"></span>

<ul>
<li>数字货币<ul>
<li>BTC:<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript"><span class="number">2008</span>年,金融危机背景下，中本聪看到现代金融体系的不足，创建基于密码学而非信任关系的数字货币系统 -- 比特币</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">在比特币中，矿工通过计算满足条件的区块获得挖矿奖励，且大概每四年减半，比特币的货币供应随着时间逐渐减少，是一种通缩型数字货币.</span></span><br></pre></td></tr></table></figure></li>
<li>Etherenum:<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">V神在比特币的基础上，将智能合约于区块链结合,创立去中心化应用平台 -- 以太坊</span></span><br></pre></td></tr></table></figure>
<ul>
<li>硬分叉分裂:<ul>
<li>ETH:</li>
<li>ETC:</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>软分叉: 可兼容的程序版本更新</li>
<li>硬分叉: 不可兼容的程序版本更新</li>
<li>公链圈: 专注于有币的共有开放区块链网络<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"># 应用层面:</span><br><span class="line">  -<span class="ruby"> 去中心化金融: Decentralised Finance</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 金融: 通过重新分配资产来获得资产增值的一种渠道，本质在于信用、风险和杠杆，金融成立的前提就是控制不确定性风险。</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 去中心化存储:</span></span><br><span class="line"><span class="ruby"></span>    &gt; 一种利用分布式存储技术，将文件分块存储在不同存储节点的应用型创新. 相较于中心化存储，拥有更高级别的隐私保护，存储成本更低，且具备更冗余的数据备份副本，能有效避免单点故障</span><br><span class="line">    -<span class="ruby"> 面临的问题:</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> <span class="number">1</span>. 币价波动导致成本不确定性</span></span><br><span class="line"><span class="ruby"></span>      -<span class="ruby"> <span class="number">2</span>. 受制于网络环境以及硬盘本身，整个去中心化网络存储性能不高，远不如中心化存储，只适用冷数据以及个人数据存储.</span></span><br><span class="line"><span class="ruby"></span># 技术创新层面:</span><br><span class="line">  &gt; 跨链: 不同区块链网络是独立，是一个个数据孤岛，跨链技术是在这些岛之间构建互通的桥梁,提供不同链之间数据互通的可能性.</span><br></pre></td></tr></table></figure></li>
<li>联盟链圈: 专注于区块链技术在企业领域的研究<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 数据存证:</span></span><br><span class="line">  &gt; 区块链技术具有时间连续，不可篡改，可回溯等特性，非常适合留存证据的数据存储。大多数应用在区块链上存储只是数据证明，而非原始数据。</span><br><span class="line"></span><br><span class="line"><span class="meta"># 数据交换:</span></span><br><span class="line">  &gt; 通过区块链技术解决多方数据交互需求，各方部署区块链节点，只需与自身节点交互，区块链机制自动将数据同步至其他参与方，任一节点数据更新，区块链通知机制自动通知各放</span><br><span class="line"></span><br><span class="line"><span class="meta"># 价值转移:</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="BTC-比特币白皮书-–-阅读"><a href="#BTC-比特币白皮书-–-阅读" class="headerlink" title="BTC 比特币白皮书 – 阅读"></a>BTC 比特币白皮书 – 阅读</h2><blockquote>
<p>一种P2P电子货币系统，基于密码学原理而不是信任的电子支付系统，该系统允许任何有交易意愿的双方能直接交易而不需要一个可信任第三方。只要诚实节点集体控制的CPU算力大于每一个合作攻击节点群的CPU算力，这个系统就是安全的。</p>
</blockquote>
<p><a href="https://bitcoin.org/zh_CN/bitcoin-paper">BTC白皮书</a></p>
<ul>
<li>交易</li>
<li>事件戳服务器</li>
<li>工作量证明</li>
<li>网络</li>
<li>激励</li>
<li>回收磁盘空间</li>
<li>合并和分割交易额</li>
<li>隐私</li>
<li>计算</li>
</ul>
<h2 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h2><ul>
<li><p>区块链特征:</p>
<ul>
<li>去中心化<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">区块链存在的初衷就是去除中心化的第三方机构，整个网络的数据以及状态是由网络中所有的节点共同维护，任一节点离线不会影响系统的运作.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">节点互为彼此的数据生产者及消费者</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">现阶段区块链去中心化本质是相对去中心化(多中心化)</span></span><br></pre></td></tr></table></figure></li>
<li>可追溯性<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">区块链被认为是时序数据库,对节点数据库存储响应的数据以及日志，且每份数据是按照顺序前后关联在一起，新的数据一定从某一组之前已存在的数据派生而来</span></span><br></pre></td></tr></table></figure></li>
<li>不可篡改<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 密码学</span></span><br><span class="line"><span class="bullet">  -</span> 哈希算法: 任意数据转换为固定长度的数据指纹, 形成一条由数据指纹串联的信息链条</span><br><span class="line"><span class="section"># 共识算法</span></span><br><span class="line"><span class="bullet">  -</span> 大多数共识算法遵循少数服从多数的原则</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>存储:<br><img src="/misc/images/blockchain_store.jpg" alt="区块链存储"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 存储冗余</span></span><br><span class="line"><span class="bullet">  -</span> 比特币网络累计超过350G的历史数据, 以太坊但节点超过8700G的历史数据</span><br><span class="line"><span class="bullet">  -</span> 数据归档: 的本质是在保持不可篡改的前提下牺牲部分可追溯性</span><br><span class="line"><span class="bullet">  -</span> 节点角色:</span><br><span class="line"><span class="bullet">    -</span> Bitcoin Core 全节点: 路由、链存储、挖矿、钱包</span><br><span class="line"><span class="bullet">    -</span> 普通全节点: 路由、链存储</span><br><span class="line"><span class="bullet">    -</span> SPV钱包节点: 路由、钱包</span><br><span class="line"><span class="bullet">    -</span> 挖矿节点: 路由、链存储、挖矿</span><br><span class="line"></span><br><span class="line"><span class="section"># Transaction: 交易</span></span><br><span class="line">  &gt; 交易是区块链网络中数据的最小组成部分, 交易提交后只能有两种状态(成功/失败)</span><br><span class="line">  &gt; 区块链中所有的交易基本都是从区块链外部发起，区块链网络只接收交易而不生产交易, 且不对交易做任何改动。</span><br><span class="line"><span class="bullet">  -</span> 交易属性:</span><br><span class="line"><span class="bullet">    -</span> From: 交易的发起方</span><br><span class="line"><span class="bullet">    -</span> To: 交易的接收方</span><br><span class="line"><span class="bullet">    -</span> 智能合约: 执行智能合约的名称</span><br><span class="line"><span class="bullet">    -</span> 方法名称</span><br><span class="line"><span class="bullet">    -</span> 参数列表</span><br><span class="line"><span class="bullet">    -</span> 签名: 私钥对交易进行签名</span><br><span class="line"><span class="bullet">    -</span> 时间戳: 交易在客户端构建的时间</span><br><span class="line"><span class="section"># 区块</span></span><br><span class="line">  &gt; 区块链是时间段的数据前后关联依次串联整合成的信息链条，而每一个时间段的数据称为区块Block</span><br><span class="line">  &gt; 区块是指将节点一段时间内收到的所有(有效)交易打包而形成的一种数据结构.</span><br><span class="line"><span class="bullet">  -</span> 区块结构:</span><br><span class="line"><span class="bullet">    -</span> 区块头:</span><br><span class="line"><span class="bullet">      -</span> 前置区块哈希: 区块间的关联</span><br><span class="line"><span class="bullet">      -</span> 交易根哈希: 区块与交易的关联</span><br><span class="line"><span class="bullet">      -</span> 区块高度: 当前区块在区块链中的位置</span><br><span class="line"><span class="bullet">      -</span> 时间戳: 区块打包的时间</span><br><span class="line"><span class="bullet">    -</span> 区块体: 保存交易并按照交易时间排序</span><br><span class="line"><span class="bullet">  -</span> 区块间关联:</span><br><span class="line"><span class="bullet">    -</span> 每个区块都会包含前置区块哈希作为逻辑关联两个区块的锚点</span><br><span class="line"></span><br><span class="line"><span class="section"># 莫克尔树:</span></span><br><span class="line">  &gt; 树状结构，至少三层，分别是叶子结点, 中间节点，根节点</span><br><span class="line"><span class="bullet">  -</span> 构建逻辑:</span><br><span class="line"><span class="code">    &gt; 相邻叶子结点进行哈希运算，得到哈希值作为两个叶子节点的父节点，这样由哈希值构成的莫克尔树</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># State状态</span></span><br><span class="line"><span class="bullet">  -</span> 有限状态机:</span><br><span class="line"><span class="code">    &gt; 在一个封闭的系统中，如果状态起始条件一致，状态改变条件顺序一致，最终一定会得到一致的结果</span></span><br><span class="line"><span class="code">    &gt; 区块链也是一种有限状态机</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">  -</span> 状态模型:</span><br><span class="line"><span class="bullet">    -</span> UTXO(Unspent Trasaction Outputs - 未花费的交易输出)模型:</span><br><span class="line"><span class="bullet">      -</span> 未花费的交易输入告知货币是从哪里来，未花费的交易输出告知货币往哪里去</span><br><span class="line"><span class="bullet">    -</span> 账户模型: 实现账户间余额的动态平衡</span><br><span class="line"><span class="bullet">    -</span> 通用模型: 没有内置状态属性，可存储任意自定义数据</span><br></pre></td></tr></table></figure></li>
<li><p>密码学算法</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"># 哈希算法</span><br><span class="line">  &gt; 哈希算法称为散列函数，可以将任意长度的数据转换成短的、固定长度的数据指纹</span><br><span class="line">  -<span class="ruby"> 常用的哈希算法:</span></span><br><span class="line"><span class="ruby"></span>    &gt; 哈希算法相当于是对信息提取摘要,是数据的指纹.用于数据完整性校验</span><br><span class="line">    -<span class="ruby"> <span class="symbol">MD5:</span> <span class="number">32</span> byte</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> SHA-<span class="number">256</span>:</span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> 哈希算法标准</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 正向快速:</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 逆向困难:</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 输入敏感:</span></span><br><span class="line"><span class="ruby"></span>    -<span class="ruby"> 避免碰撞:</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"># 非对称加密算法:</span><br><span class="line">  &gt; 非对称分为公钥和私钥, 公钥加密 -&gt; 私钥解密; 私钥加密 -&gt; 公钥解密</span><br><span class="line">  &gt; 区块链中使用的非对称加密算法并不是直接用于数据加密，而是主要用作交易签名, 数字签名集成了哈希算法与非对称加密算法的双重特征，在保证交易完整性的同时，证明交易发起人的身份.</span><br><span class="line">  -<span class="ruby"> <span class="symbol">RSA:</span></span></span><br><span class="line"><span class="ruby"></span>  -<span class="ruby"> <span class="symbol">ECC:</span></span></span><br><span class="line"><span class="ruby"></span># 对称加密算法:</span><br><span class="line">  &gt; 对称表示加密和解密都使用同一套密钥</span><br><span class="line"># 数字签名:</span><br><span class="line">  &gt; 区块链中不直接使用非对称加密算法，而是使用数字签名</span><br></pre></td></tr></table></figure></li>
<li><p>网络模型</p>
<ul>
<li>客户端/服务端模型<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">客户端/服务端模型：属于中心化的网络架构，服务能力取决于中心的服务器</span></span><br></pre></td></tr></table></figure></li>
<li>点对点网络模型<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>网络拓扑结构<ul>
<li>中心索引节点<figure class="highlight"><table><tr><td class="code"><pre><span class="line">中心索引节点保存所有节点的接入信息，新节点的加入将自身信息传入中心节点，从而换取已在网络中其他节点的连接信息, 有可能存在单点故障的可能性，一旦中心索引节点宕机，新节点将无法加入网络</span><br></pre></td></tr></table></figure></li>
<li>无为而治<figure class="highlight"><table><tr><td class="code"><pre><span class="line">新节点选择连接一个已存在网络中的节点，被连接的节点可以告知新节点连接的其他节点信息，这样新节点可以随机选择连接其他节点</span><br></pre></td></tr></table></figure></li>
<li>整体分散局部集中的混合结构<figure class="highlight"><table><tr><td class="code"><pre><span class="line">整个网络由多个种子节点形成主干网络，其他普通节点则连接到某个子节点，就形成整体分散局部集中的混合结构</span><br></pre></td></tr></table></figure></li>
<li>有序结构化网络<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>区块链网络拓扑:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> BTC</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 采用混合型的网络拓扑结构，一个新节点的加入需要给节点指定几个已在BTC网络中的相邻节点(普通节点或种子节点)信息, 当建立节点间连接以后，新节点将自身信息发送给相邻节点，相邻节点再将新节点的信息依次转发给各自相邻节点，从而选择性连接更多节点，增强节点自身与整体网络连接的稳定性</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ETC</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 以太坊采用结构化网络拓扑，基于分布式哈希表Kademlia算法。</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 节点间的距离是逻辑距离，而非物理距离.</span></span><br></pre></td></tr></table></figure></li>
<li>交易扩散<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Gossip 八卦协议:</span></span><br><span class="line"><span class="bullet">-</span> ETC: 以太坊网络的节点只与自己最近距离的相邻节点连接，交易的扩散不存在回路的可能性，扩散更像是一种持续向外广播。交易会逐渐远离最初的节点，交易扩散效率较高</span><br><span class="line"><span class="bullet">-</span> BTC: 网络拓扑是随机的，交易扩散是扩散到连接节点，扩散前无法指导对方是否已经接收到相同的交易，网络扩散的效率较低</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>共识算法</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">共识算法的基础是少数服从多数</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">区块链引入共识算法保证节点间状态的一致</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">区块链中对状态的共识实质就是对区块的共识, 只要区块一致状态就一定一致</span></span><br><span class="line"># 拜占庭将军问题:</span><br></pre></td></tr></table></figure>
<ul>
<li>激励共识:<ul>
<li>PoW - 工作量证明算法<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">利用哈希算法计算区块哈希，使得区块哈希以N个<span class="number">0</span>开头,</span><br><span class="line">比特币网络允许有多条区块链存在，但只认同节点能接收到的最长的那条区块链是全网网络共识的链</span><br><span class="line">对比特币网络的篡改，实质是对计算资源(算力)的争夺，谁拥有更多的计算资源，睡的话语权就大，就是通常听到的<span class="number">51</span><span class="comment">%攻击</span></span><br></pre></td></tr></table></figure></li>
<li>PoS - 权益证明算法</li>
<li>DPos - 委托权益证明算法</li>
</ul>
</li>
<li>BPFT - 拜占庭容错算法<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">只要共识网络中作恶节点的数量未超过总节点数的<span class="number">1</span>/<span class="number">3</span>，共识依旧可以达成</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">BFT类的共识算法主要用在联盟链中，因为联盟链主要参与对象是企业，有准入机制的存在，一条链的参与方不会很多也很少存在动态增删节点的情形</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><pre><code><figure class="highlight"><table><tr><td class="code"><pre><span class="line">传统意义上的合同协议的约束力来自于权威机构背书</span><br><span class="line">智能合约实质是一段计算机程序代码</span><br><span class="line">智能合约的标准化是价值网络落地的前提</span><br></pre></td></tr></table></figure>
- NTF - 非同质化代币
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">NTF - 一种手段将虚拟与现实的价值锚定.</span></span><br></pre></td></tr></table></figure>
- 元宇宙
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">元宇宙代表的是一个沉浸式的虚拟世界，玩家能在其中进行文化、社交、娱乐等活动</span><br><span class="line">元宇宙是由区块链、游戏、网络和显示四大技术融合而成的虚拟世界</span><br></pre></td></tr></table></figure>
</code></pre>
<h2 id="量子计算"><a href="#量子计算" class="headerlink" title="量子计算"></a>量子计算</h2><ul>
<li>经典计算机与量子计算机存储数据区别<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">经典计算机存储具体的值</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">量子计算存储值的概率</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链+"></a>区块链+</h2><ul>
<li>可信上链<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1.确保区块链上链数据的真实性?</span><br><span class="line"><span class="bullet">  -</span> 权威机构的信息发布</span><br><span class="line"><span class="bullet">  -</span> 摆脱数据的认为干预</span><br></pre></td></tr></table></figure></li>
<li>预言机<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">将外界真实的信息输入到区块链网络中，实现链外与链内的数据互通.</span></span><br></pre></td></tr></table></figure></li>
<li>5G 物联网<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">5G 依托全新的网络架构，具备高速率、低延迟、高可靠性、大带宽等优势，可以满足人与人之间的通信需求，解决物与物的通信连接问题.</span></span><br></pre></td></tr></table></figure></li>
<li>数字人民币<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 数字人民币是中国人民银行发行的法定货币的数字化，是由国家信用在背后作支撑，其发行权属于国家.</span></span><br><span class="line"><span class="quote">&gt; 数字人民币的定位是现金类支付凭证，意味着数字人民币和纸币、硬币的定位是一致的</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 不计利息</span><br><span class="line"><span class="bullet">-</span> 无手续费</span><br><span class="line"><span class="bullet">-</span> 可控匿名: 小额匿名、大额依法可溯</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 数字人民币的发行是不比使用区块链技术的</span><br></pre></td></tr></table></figure></li>
<li>数字社会<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 云计算:</span><br><span class="line"><span class="bullet">  -</span> 云计算利用虚拟化技术将物理服务器、存储和网络等硬件以服务的形式提供给用户使用</span><br><span class="line"><span class="bullet">-</span> 区块链:</span><br><span class="line"><span class="bullet">  -</span> 区块链与云计算的结合催生出区块链即服务平台</span><br><span class="line"><span class="bullet">  -</span> Baas, Blockchain as a Service</span><br><span class="line"><span class="bullet">  -</span> Paas, Platform as a service</span><br><span class="line"><span class="bullet">-</span> 大数据:</span><br><span class="line"><span class="bullet">  -</span> Volume: 数据量大，通过大数据的数据量是以TB，PB来计算</span><br><span class="line"><span class="bullet">  -</span> Volocity: 高速, 大数据需要用较高的速度接收甚至是处理数据</span><br><span class="line"><span class="bullet">  -</span> Variety: 多样性, 大数据的数据源很多，且大多数属于非结构化的数据</span><br><span class="line"><span class="bullet">  -</span> Value: 价值, 大数据所面对的数据是海量的，但并不是所有的数据都有价值，需要通过数据清洗、过滤出有价值的数据</span><br><span class="line"><span class="bullet">  -</span> Veracity: 真实, 需要保证数据的真实性、准确性，才能提高数据质量</span><br><span class="line"><span class="bullet">-</span> 人工智能:</span><br><span class="line"><span class="bullet">  -</span> 语音识别</span><br><span class="line"><span class="bullet">  -</span> 图像识别</span><br><span class="line"><span class="bullet">  -</span> 自然语言处理</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Blockchain</tag>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pico Intro</title>
    <url>/2021/09/17/Raspberry-Pico-Intro/</url>
    <content><![CDATA[<h1 id="Raspberry-Pi-Pico"><a href="#Raspberry-Pi-Pico" class="headerlink" title="Raspberry Pi Pico"></a>Raspberry Pi Pico</h1><blockquote>
<p>a microcontroller development board,</p>
</blockquote>
<ul>
<li><p>RP2040</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; new microcontroller chip designed by Raspberry Pi in the UK.</span></span><br><span class="line"><span class="bullet">  -</span> dual-core Arm Cortex-M0+</span><br><span class="line"><span class="bullet">  -</span> 264KB RAM</span><br><span class="line"><span class="bullet">  -</span> 16MB off-chip Flash</span><br></pre></td></tr></table></figure></li>
<li><p>Micro USB Port</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">- provide power make Pico <span class="builtin-name">run</span></span><br><span class="line">- USB<span class="built_in"> port </span>talk <span class="keyword">to</span> pico</span><br></pre></td></tr></table></figure></li>
<li><p>BOOTSEL</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">- <span class="keyword">BOOTSEL </span>is <span class="keyword">short </span>for <span class="keyword">boot </span>selection.</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<h2 id="Raspberry-Pico’s-pins"><a href="#Raspberry-Pico’s-pins" class="headerlink" title="Raspberry Pico’s pins"></a>Raspberry Pico’s pins</h2><p><img src="/misc/images/pico-pins.png" alt="The Raspberry Pi Pico&#39;s pins"></p>
<ul>
<li><p>Raspberry Pi Pico pins functions</p>
<table>
<thead>
<tr>
<th align="left">…</th>
<th align="left">…</th>
<th align="left">…</th>
</tr>
</thead>
<tbody><tr>
<td align="left">3V3</td>
<td align="left">3.3 volts power</td>
<td align="left">Pico 3.3V 从 VSYS 获取</td>
</tr>
<tr>
<td align="left">VSYS</td>
<td align="left">~2-5 volts power</td>
<td align="left">连接Pico内部电源</td>
</tr>
<tr>
<td align="left">VBUS</td>
<td align="left">5 volts power</td>
<td align="left">5V power taken from Pico’s micro USB port</td>
</tr>
<tr>
<td align="left">GND</td>
<td align="left">0 volts ground</td>
<td align="left">地</td>
</tr>
<tr>
<td align="left">GPxx</td>
<td align="left">General-purpose input/output pin</td>
<td align="left">通用GPIO口</td>
</tr>
<tr>
<td align="left">GPxx_ADCx</td>
<td align="left">GPIO/ADC input</td>
<td align="left">普通GPIO口或ADC输入口</td>
</tr>
<tr>
<td align="left">ADC_VREF</td>
<td align="left">Analogue-to-digital coverter (ADC) voltage reference</td>
<td align="left">模拟数字转换参考电压输入</td>
</tr>
<tr>
<td align="left">AGND</td>
<td align="left">Anaglogue-to-digital coverter (ADC) 0 volts ground</td>
<td align="left">ADC输入电压参考0volts</td>
</tr>
<tr>
<td align="left">RUN</td>
<td align="left">Enable/disable Pico</td>
<td align="left">启动/关闭Pico</td>
</tr>
</tbody></table>
</li>
<li><p>MicroPython - Hello, LED!</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">import machine</span><br><span class="line">import utime</span><br><span class="line"></span><br><span class="line"># <span class="keyword">on</span>-board LED <span class="keyword">is</span> connected <span class="keyword">to</span> one <span class="keyword">of</span> RP2040<span class="symbol">&#x27;s</span> general-purpose input/output pins. GP25.</span><br><span class="line">led_onboard = machine.Pin(<span class="number">25</span>, machine.Pin.<span class="keyword">OUT</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    led_onboard.toggle()</span><br><span class="line">    utime.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="MicroPython-on-Raspberry-Pi-Pico"><a href="#MicroPython-on-Raspberry-Pi-Pico" class="headerlink" title="MicroPython on Raspberry Pi Pico"></a>MicroPython on Raspberry Pi Pico</h2><ul>
<li><p>Installing MicroPython</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; MicroPython is <span class="keyword">a</span> full implementation <span class="keyword">of</span> <span class="keyword">the</span> Python <span class="number">3</span> Programming language that runs directly <span class="keyword">on</span> <span class="title">embedded</span> <span class="title">hardware</span> <span class="title">like</span> <span class="title">Raspberry</span> <span class="title">Pi</span> <span class="title">Pico</span>.</span><br><span class="line"><span class="comment"># Hold BOOTSEL button down 3 seconds then let go</span></span><br><span class="line">  /Volumes/RPI-RP2</span><br><span class="line">  ➜ tree</span><br><span class="line">  .</span><br><span class="line">  ├── INDEX.HTM</span><br><span class="line">  └── INFO_UF2.TXT  <span class="comment">-- hold information about your Pico</span></span><br><span class="line"></span><br><span class="line">  <span class="number">0</span> <span class="built_in">directories</span>, <span class="number">2</span> <span class="built_in">files</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Darg-and-Drop MicroPython</span></span><br><span class="line">  - Drag <span class="keyword">and</span> drop <span class="keyword">the</span> MicroPython UF2 onto <span class="keyword">the</span> RPI-RP2 volume, auto flash <span class="keyword">the</span> firmware onto its internal storage.</span><br></pre></td></tr></table></figure></li>
<li><p>Programming with MicroPython</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; MicroPython <span class="keyword">is</span> a Python-compatible programming language developed specifically <span class="keyword">for</span> microcontrollers.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thonny - IDE</span></span><br><span class="line">MicroPython v1<span class="number">.17</span> on <span class="number">2021</span>-09-02; Raspberry Pi Pico <span class="keyword">with</span> RP2040</span><br><span class="line"><span class="type">Type</span> <span class="string">&quot;help()&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">Hello, World!</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Rust-on-Raspberry-Pi-Pico"><a href="#Rust-on-Raspberry-Pi-Pico" class="headerlink" title="Rust on Raspberry Pi Pico"></a>Rust on Raspberry Pi Pico</h2><h2 id="Getting-Started-with-FreeRTOS-on-the-Raspberry-Pi-Pico"><a href="#Getting-Started-with-FreeRTOS-on-the-Raspberry-Pi-Pico" class="headerlink" title="Getting Started with FreeRTOS on the Raspberry Pi Pico"></a>Getting Started with FreeRTOS on the Raspberry Pi Pico</h2><blockquote>
<p>RTOS - Real Time Operating System</p>
<blockquote>
<p>Allows multiple tasks to execute “at the same time”<br>Schedules based on task priority<br>“Task Priority” allows the programmer to define what needs to happen first</p>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>Raspberry Pi</tag>
      </tags>
  </entry>
  <entry>
    <title>Dell PowerEdge R720 Intro</title>
    <url>/2021/09/18/Dell-PowerEdge-R720-Intro/</url>
    <content><![CDATA[<h1 id="Dell-EMC-PowerEdge-R720"><a href="#Dell-EMC-PowerEdge-R720" class="headerlink" title="Dell EMC PowerEdge R720"></a>Dell EMC PowerEdge R720</h1><span id="more"></span>

<h2 id="Dell-iDRAC"><a href="#Dell-iDRAC" class="headerlink" title="Dell iDRAC"></a>Dell iDRAC</h2><figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">iDRAC (Integrated Dell Remote Access Controller) 远程控制卡, iDRAC相当于附加在服务器上计算机，可以实现一对一的服务器远程管理与监控，通过与服务器主板上的管理芯片BMC进行通信,监控和管理服务器的硬件状态信息，拥有自己的系统和IP地址，与服务器上的OS无关,是管理员进行远程访问和管理的利器.</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">iDRAC登陆界面默认的用户名是root密码calvin</span></span><br></pre></td></tr></table></figure>

<h2 id="vSphere-ESXi-vCenter-区别"><a href="#vSphere-ESXi-vCenter-区别" class="headerlink" title="vSphere,ESXi,vCenter 区别"></a>vSphere,ESXi,vCenter 区别</h2><ul>
<li>VMware Inc. 软件公司提供包括云产品，数据中心产品和桌面产品</li>
<li>vSphere<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">数据中心产品下的一套软件, 包括vCenter, EXSi和vSphere <span class="keyword">client</span>, vSphere不是一个可以安装使用的软件，只是一个包含其他组件的集合.</span><br></pre></td></tr></table></figure></li>
<li>vSphere client<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">vSphere <span class="keyword">client</span>允许管理员访问ESXi服务并管理虚拟机。vSphere <span class="keyword">client</span>是安装在客户端上面，vSphere <span class="keyword">client</span>用来连接ESXi服务器和管理任务, 用来访问ESXi服务安装和管理上面的虚拟机</span><br><span class="line">vSphere <span class="keyword">client</span>可以在小环境中直接管理ESXi服务，可以在大规模的环境中，通过vCenter服务间接管理ESXi服务</span><br></pre></td></tr></table></figure></li>
<li>EXSi<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">ESXi是虚拟化服务，所有的虚拟机都运行在ESXi服务上面,为了安装，管理和访问虚拟机，需要vSphere client或vCenter.</span><br><span class="line">ESXi安装在物理机上面的服务.</span><br></pre></td></tr></table></figure></li>
<li>vCenter server<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">VMware vCenter <span class="keyword">server</span>是一个企业级别的产品, 中心化的管理应用，可以通过管理所有的虚拟机和ESXi物理机</span><br><span class="line">vCenter服务用在有很多EXSi服务和许多虚拟机的大规模环境中</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Install-Ubuntu-20-04-on-R720"><a href="#Install-Ubuntu-20-04-on-R720" class="headerlink" title="Install Ubuntu 20.04 on R720"></a>Install Ubuntu 20.04 on R720</h2><ul>
<li>Show Hardware and Network Infomation<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">chyiyaqing in ~ at chyiyaqing-PowerEdge-R720</span><br><span class="line">➜ wget -qO- bench.sh | bash</span><br><span class="line"></span><br><span class="line">grep: /<span class="keyword">proc</span>/1/environ:<span class="title"> Permission</span> denied</span><br><span class="line">----------------------------------------------------------------------<span class="title"></span></span><br><span class="line"><span class="title"> CPU</span> Model             :<span class="title"> Intel(R)</span> Xeon(R)<span class="title"> CPU</span> E5-2650<span class="title"> v2</span> @ 2.60GHz<span class="title"></span></span><br><span class="line"><span class="title"> CPU</span> Cores             : 32<span class="title"></span></span><br><span class="line"><span class="title"> CPU</span> Frequency         : 1204.573<span class="title"> MHz</span></span><br><span class="line"><span class="title"> CPU</span> Cache             : 20480<span class="title"> KB</span></span><br><span class="line"><span class="title"> Total</span> Disk            : 1127.3<span class="title"> GB</span> (9.2<span class="title"> GB</span> Used)<span class="title"></span></span><br><span class="line"><span class="title"> Total</span> Mem             : 32106<span class="title"> MB</span> (1015<span class="title"> MB</span> Used)<span class="title"></span></span><br><span class="line"><span class="title"> Total</span> Swap            : 2047<span class="title"> MB</span> (0<span class="title"> MB</span> Used)<span class="title"></span></span><br><span class="line"><span class="title"> System</span> uptime         : 0<span class="title"> days,</span> 0<span class="title"> hour</span> 22<span class="title"> min</span></span><br><span class="line"><span class="title"> Load</span> average          : 0.07, 0.09, 0.17<span class="title"></span></span><br><span class="line"><span class="title"> OS</span>                    :<span class="title"> Ubuntu</span> 20.04.3<span class="title"> LTS</span></span><br><span class="line"><span class="title"> Arch</span>                  :<span class="title"> x86_64</span> (64<span class="title"> Bit)</span></span><br><span class="line"><span class="title"> Kernel</span>                : 5.11.0-36-generic<span class="title"></span></span><br><span class="line"><span class="title"> TCP</span> CC                :<span class="title"> cubic</span></span><br><span class="line"><span class="title"> Virtualization</span>        :<span class="title"> Dedicated</span></span><br><span class="line">----------------------------------------------------------------------<span class="title"></span></span><br><span class="line"><span class="title"> I/O</span> Speed(1st<span class="title"> run)</span>    : 323<span class="title"> MB/s</span></span><br><span class="line"><span class="title"> I/O</span> Speed(2nd<span class="title"> run)</span>    : 267<span class="title"> MB/s</span></span><br><span class="line"><span class="title"> I/O</span> Speed(3rd<span class="title"> run)</span>    : 275<span class="title"> MB/s</span></span><br><span class="line"><span class="title"> Average</span> I/O<span class="title"> speed</span>     : 288.3<span class="title"> MB/s</span></span><br><span class="line">----------------------------------------------------------------------<span class="title"></span></span><br><span class="line"><span class="title"> Node</span> Name<span class="title">        Upload</span> Speed<span class="title">      Download</span> Speed<span class="title">      Latency</span></span><br><span class="line"><span class="title"> Shanghai</span> <span class="title">  CT</span>    49.45<span class="title"> Mbps</span>        256.81<span class="title"> Mbps</span>         9.34<span class="title"> ms</span></span><br><span class="line"><span class="title"> Shanghai</span> <span class="title">  CU</span>    50.03<span class="title"> Mbps</span>        263.91<span class="title"> Mbps</span>         17.96<span class="title"> ms</span></span><br><span class="line"><span class="title"> Guangzhou</span> <span class="title"> CT</span>    55.97<span class="title"> Mbps</span>        264.49<span class="title"> Mbps</span>         35.69<span class="title"> ms</span></span><br><span class="line"><span class="title"> Guangzhou</span> <span class="title"> CU</span>    50.19<span class="title"> Mbps</span>        257.02<span class="title"> Mbps</span>         31.51<span class="title"> ms</span></span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Rust language Intro</title>
    <url>/2021/09/18/Rust-language-Intro/</url>
    <content><![CDATA[<h1 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h1><blockquote>
<p>一门非常重视开发者用户体验的语言<br>如果你想从其他语言迁移到Rust,必须经过一段时期的思维转换(Paradigm Shift)<br>  <figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">命令式<span class="comment">(imperative)</span>编程语言转换为函数式<span class="comment">(function)</span>编程语言</span><br><span class="line">变量的可变性<span class="comment">(mutable)</span>迁移到不可变性<span class="comment">(immutable)</span></span><br><span class="line">弱类型语言迁移到强类型语言</span><br><span class="line">从手工或者自动内存管理到通过生命周期来管理内存</span><br></pre></td></tr></table></figure><br>Rust最大的思维转换就是变量的所有权和声明周期</p>
</blockquote>
<span id="more"></span>

<h2 id="1-前置知识篇"><a href="#1-前置知识篇" class="headerlink" title="1. 前置知识篇"></a>1. 前置知识篇</h2><ul>
<li>内存<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"># 栈</span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">栈自上而下增长</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">栈是程序运行的基础，每当一个函数被调用时，一块连续的内存就会被栈顶分配出来，这块内存被称为帧(frame)</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">在编译时，一切无法确定大小或者大小可以改变的数据,都无法放在栈上，只能放在堆上</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">存放栈上的值，它的大小在编译期就需要确定</span></span><br><span class="line"></span><br><span class="line"># 堆</span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">堆自下而上增长</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">堆上分配内存时，一般都会预留一些空间</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">动态分配大小的内存需要被分配到堆上，动态声明周期的内存也需要分配到堆上.</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">堆上分配出来的每一块内存需要显式地释放，这就使堆山内存有更加灵活的声明周期，可以在不同的调用栈之间共享数据</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">堆可以存放大小未知或者动态伸缩的数据类型</span></span><br><span class="line"></span><br><span class="line">栈上存放的数据时静态的，静态大小，静态生命周期，堆上存放的数据时动态的，动态大小，动态生命周期</span><br><span class="line"></span><br><span class="line"># GC vs ARC</span><br><span class="line">  1. GC在内存分配和释放上无需额外操作，而ARC添加了大量的额外代码处理引用计数，所以GC效率更高，吞吐量(throughput)更大</span><br><span class="line">  2. GC释放内存的时机不确定，释放时引发的STW(Stop The World)会导致代码执行的延迟latency.一般携带GC的编程语言不适合做嵌入式系统或者实时系统</span><br></pre></td></tr></table></figure></li>
<li>数据<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 程序操作的对象</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 值和类型</span></span><br><span class="line"><span class="quote">&gt; 编程语言的类型可以分为原生类型和组合类型</span></span><br><span class="line"><span class="bullet">  -</span> 原生类型(primitive type) : 所有原生类型的大小都是固定的，因此他们可以被分配到栈上</span><br><span class="line"><span class="bullet">    -</span> 字符</span><br><span class="line"><span class="bullet">    -</span> 整数</span><br><span class="line"><span class="bullet">    -</span> 浮点数</span><br><span class="line"><span class="bullet">    -</span> 布尔值</span><br><span class="line"><span class="bullet">    -</span> 数组array</span><br><span class="line"><span class="bullet">    -</span> 元组tuple</span><br><span class="line"><span class="bullet">    -</span> 指针</span><br><span class="line"><span class="bullet">      -</span> 胖指针(fat poiner): 比正常指针携带更多信息的指针</span><br><span class="line"><span class="bullet">  -</span> 组合类型(composite type) : 由一组原生类型和其它类型组合而成的类型</span><br><span class="line"><span class="bullet">    -</span> 结构体(structure type): 多个类型组合在一起共同表达一个值的复杂数据结构</span><br><span class="line"><span class="bullet">    -</span> 标签联合(tagged union): 不相交并集</span><br></pre></td></tr></table></figure></li>
<li>指针和引用<figure class="highlight"><table><tr><td class="code"><pre><span class="line">指针和应用都指向内存地址，只不过二者在解引用时的行为不一样</span><br><span class="line">引用只能解引用到原来的数据类型</span><br></pre></td></tr></table></figure></li>
<li>函数<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">函数时代码中重复行为的抽象</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">方法时对象内部定义的函数</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">函数是编程语言的基本要素,是对完成某个功能的一组相关语句和表达式的封装</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">函数往往是一等公民，意味着函数可以作为参数传递，或者作为返回值返回，也可以作为符合类型中的一个组成部分</span></span><br></pre></td></tr></table></figure></li>
<li>闭包<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">闭包是一种特殊的函数，会捕获函数体内使用到的上下文中的自由变量,作为闭包成员的一部分</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">闭包是将函数和其环境一起存储的一种数据结构</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">闭包引用的上下文中的自由变量会被捕获到闭包的结构中，成为闭包类型的一部分</span></span><br></pre></td></tr></table></figure></li>
<li>接口&amp;&amp;虚表<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 接口</span></span><br><span class="line"><span class="quote">&gt; 作为一个抽象层,接口将使用方和实现方隔离开来，使两者不直接有依赖关系，大大提高了复用性和扩展性</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 虚表 virtual table</span></span><br><span class="line"><span class="quote">&gt; 虚表是指向一张涵盖接口所支持方法的列表</span></span><br></pre></td></tr></table></figure></li>
<li>并发(concurreny)与并行(parallel)<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 并发</span></span><br><span class="line"><span class="quote">&gt; 并发是同时与多件事情打交道的能力，比如系统可以在任务1做到一定程度后，保存该任务的上下文，挂起并切换到任务2，然后过段时间在切换回任务1</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 并行</span></span><br><span class="line"><span class="quote">&gt; 并行是同时处理多件事情的手段，任务1和任务2可以在同一个时间片下工作,无需上下文切换</span></span><br><span class="line"></span><br><span class="line">拥有高并发处理能力的编程语言会在用户程序中嵌入一个M:N的调度器，把M个并行任务，合理地分配在N个CPU core上并行运行,让程序的吞吐量达到最大</span><br></pre></td></tr></table></figure></li>
<li>同步和异步<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同步</span></span><br><span class="line">&gt; 指一个任务开始执行后，后续的操作回阻塞，直到这个任务结束</span><br><span class="line">&gt; 同步执行保证了代码的因果关系(causality),是程序正确性的保证</span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步</span></span><br><span class="line">&gt; 指一个任务开始执行后，与它没有因果关系的其他任务可以正常执行，不必等待前一个任务结束</span><br><span class="line">  - <span class="built_in">Promise</span>(future/delay/deferred): 对象用来描述未来某个时刻才能获得的结果的值</span><br><span class="line">    - 初始状态: <span class="built_in">Promise</span>还未运行</span><br><span class="line">    - 等待pending状态: <span class="built_in">Promise</span>已经运行，但还没有结束</span><br><span class="line">    - 结束状态: promise成功解析出一个值，或者执行失败</span><br><span class="line">  - <span class="keyword">async</span>/<span class="keyword">await</span></span><br><span class="line">    &gt; <span class="keyword">async</span>/<span class="keyword">await</span>是一个语法糖(syntactic sugar)使用状态机将promise包装起来，让异步调用的使用感觉和同步调用非常类型</span><br><span class="line">    - <span class="keyword">async</span>定义一个可以并发执行的任务</span><br><span class="line">    - <span class="keyword">await</span>触发并发执行</span><br></pre></td></tr></table></figure></li>
<li>编程泛式<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 泛型编程</span></span><br><span class="line"><span class="bullet">  -</span> 数据结构的泛型</span><br><span class="line"><span class="bullet">  -</span> 代码的泛型化</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-基础知识篇"><a href="#2-基础知识篇" class="headerlink" title="2. 基础知识篇"></a>2. 基础知识篇</h2><ul>
<li>第一个程序<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">➜ tree scrape_url</span><br><span class="line">scrape_url</span><br><span class="line">├── Cargo<span class="selector-class">.lock</span></span><br><span class="line">├── Cargo<span class="selector-class">.toml</span>      -- Rust项目的配置管理文件</span><br><span class="line">├── <span class="attribute">src</span></span><br><span class="line">│   └── <span class="selector-tag">main</span><span class="selector-class">.rs</span></span><br><span class="line">└── target</span><br><span class="line">    ├── CACHEDIR<span class="selector-class">.TAG</span></span><br><span class="line">    └── debug</span><br><span class="line">        ├── build</span><br><span class="line">        ├── deps</span><br><span class="line">        │   ├── libscrape_url-f8d1878e1d7fc033<span class="selector-class">.rmeta</span></span><br><span class="line">        │   └── scrape_url-f8d1878e1d7fc033<span class="selector-class">.d</span></span><br><span class="line">        ├── examples</span><br><span class="line">        └── incremental</span><br><span class="line">            └── scrape_url-<span class="number">2</span>n1xt1o9t0ikb</span><br><span class="line">                ├── s-g4eprmaq6h-ez2nl7-<span class="number">1</span>g41whu33uaqz</span><br><span class="line">                │   ├── dep-graph<span class="selector-class">.bin</span></span><br><span class="line">                │   ├── query-cache<span class="selector-class">.bin</span></span><br><span class="line">                │   └── work-products<span class="selector-class">.bin</span></span><br><span class="line">                └── s-g4eprmaq6h-ez2nl7<span class="selector-class">.lock</span></span><br><span class="line"></span><br><span class="line"><span class="number">9</span> directories, <span class="number">10</span> files</span><br><span class="line"></span><br><span class="line">scrape_url on  <span class="selector-tag">main</span> <span class="selector-attr">[?]</span> is 📦 v0.<span class="number">1.0</span> via 🦀 v1.<span class="number">52.0</span> took <span class="number">8s</span></span><br><span class="line">➜ cargo run</span><br><span class="line">   Compiling scrape_url v0.<span class="number">1.0</span> (/Users/chyiyaqing/chyi/github.com/begin-rust/scrape_url)</span><br><span class="line">    Finished dev <span class="selector-attr">[unoptimized + debuginfo]</span> target(s) <span class="keyword">in</span> <span class="number">3.13s</span></span><br><span class="line">     Running `target/debug/scrape_url`</span><br><span class="line">Fetching url: https:<span class="comment">//www.rust-lang.org/</span></span><br><span class="line">Converting <span class="selector-tag">html</span> to markdown...</span><br><span class="line">Converted markdown has been saved <span class="keyword">in</span> rust<span class="selector-class">.md</span>.</span><br><span class="line"></span><br><span class="line">&gt; Rust使用cargo工具管理项目</span><br><span class="line">&gt; Rust整体语法偏向C/C++风格</span><br><span class="line">&gt; Rust支持面向接口编程和泛型编程</span><br><span class="line">&gt; Rust有非常丰富的数据类型和强大的标准库</span><br><span class="line">&gt; Rust有非常丰富的控制流程</span><br><span class="line">&gt; Rust默认变量不可变，可以添加mut关键字让变量具备可变性</span><br><span class="line">&gt; Rust项目的组织可以用mod来组织代码</span><br><span class="line">&gt; Rust一个项目被称为crate (cargo new &lt;name&gt; -- lib 创建一个库)</span><br></pre></td></tr></table></figure></li>
<li>Rust变量的所有权和生命周期</li>
<li>Rust内存管理方式</li>
<li>C的手工管理</li>
<li>Java的GC</li>
<li>Swift的ARC</li>
<li>Rust语言特性<ul>
<li>函数式编程特性</li>
<li>类型系统</li>
<li>范性编程</li>
<li>错误处理</li>
</ul>
</li>
</ul>
<h2 id="3-进阶篇"><a href="#3-进阶篇" class="headerlink" title="3. 进阶篇"></a>3. 进阶篇</h2><p>  *</p>
<h2 id="4-并发篇"><a href="#4-并发篇" class="headerlink" title="4. 并发篇"></a>4. 并发篇</h2><ul>
<li>无畏并发(Fearless Concurrency)</li>
</ul>
<h2 id="5-实战篇"><a href="#5-实战篇" class="headerlink" title="5. 实战篇"></a>5. 实战篇</h2><ul>
<li>HTTPie<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><blockquote>
<p>学习过程就像《中庸》里谈治学的方法：博学之、审问之、慎思之、明辨之、笃(du)行之<br>算法+数据结构=程序, Pascal之父,图灵奖得主Niklaus Wirth</p>
</blockquote>
<ul>
<li>Paradigm Shift : 思维转换</li>
<li>Stack Overflow: 栈溢出</li>
<li>heap out of bounds: 堆越界</li>
<li>use after free : 堆上的内存被释放，但栈上指向堆上内存的响应指针没有被清空</li>
<li>Tracing GC : 追踪式垃圾回收(通过定期标记mark找出不再被引用的对象，然后将其清理sweep掉，来自动管理内存)</li>
<li>Automatic Reference Counting: 自动引用计数 (编译时，为每个函数插入retain/release语句来自动维护堆上对象的引用计数，当引用计数为零的时候，release语句就释放对象)</li>
<li>throughput: 吞吐量</li>
<li>syntactic sugar: 语法糖</li>
<li>Principle of Least Privilege: 最小权限原则</li>
<li>derive macro : 派生宏</li>
</ul>
<h2 id="阅读资料"><a href="#阅读资料" class="headerlink" title="阅读资料"></a>阅读资料</h2><ul>
<li><a href="https://github.com/chyidl/begin-rust.git">begin-rust</a></li>
<li><a href="https://doc.rust-lang.org/book/">The Rust Programming Language</a></li>
</ul>
]]></content>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus+Grafana Intro</title>
    <url>/2021/09/19/Prometheus-Grafana-Intro/</url>
    <content><![CDATA[<h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><ul>
<li>First Steps<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Downloading Prometheus</span></span><br><span class="line">  ➜ wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/prometheus/</span>prometheus<span class="regexp">/releases/</span>download<span class="regexp">/v2.30.0/</span>prometheus-<span class="number">2.30</span>.<span class="number">0</span>.linux-arm64.tar.gz</span><br><span class="line">  ➜ tar -xvf prometheus-<span class="number">2.30</span>.<span class="number">0</span>.linux-arm64.tar.gz</span><br><span class="line">  ➜ cd prometheus-<span class="number">2.30</span>.<span class="number">0</span>.linux-arm64</span><br><span class="line"></span><br><span class="line"><span class="comment"># Configuring Prometheus</span></span><br><span class="line">  ➜ tree -L <span class="number">1</span></span><br><span class="line">  .</span><br><span class="line">  ├── console_libraries</span><br><span class="line">  ├── consoles</span><br><span class="line">  ├── LICENSE</span><br><span class="line">  ├── NOTICE</span><br><span class="line">  ├── prometheus</span><br><span class="line">  ├── prometheus.yml      -- a sample configuration</span><br><span class="line">  └── promtool</span><br><span class="line"></span><br><span class="line">  <span class="number">2</span> directories, <span class="number">5</span> files</span><br><span class="line"></span><br><span class="line"><span class="comment"># Starting Prometheus</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Intro</title>
    <url>/2021/09/19/Kubernetes-Intro/</url>
    <content><![CDATA[<h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><span id="more"></span>

<h2 id="容器基础"><a href="#容器基础" class="headerlink" title="容器基础"></a>容器基础</h2><blockquote>
<p>容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创建出一个“边界”<br>容器，其实是一种特殊的单进程模型而已<br>同一台机器上的所有容器，都共享宿主机操作系统的内核</p>
</blockquote>
  <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cgroups技术用来限制</span></span><br><span class="line"><span class="comment"># Namespace技术则是用隔离</span></span><br><span class="line">  - Mount Namespace 跟其他Namespace使用略有不同，它对容器进程视图的改变一定是伴随着挂载操作mount才能生效</span><br><span class="line">  - <span class="keyword">chroot</span> (change root file <span class="keyword">system</span>): 改变进程的根目录到指定位置</span><br><span class="line"><span class="comment"># rootfs 根文件系统 (不包括系统内核)</span></span><br><span class="line">  &gt; 由于rootfs里打包的不只是应用，而是整个操作系统的文件和目录 (对于一个应用来说，操作系统本身才是它圆形所需要的最完整的<span class="string">&quot;依赖库&quot;</span>)</span><br><span class="line">  - pivot_root</span><br><span class="line">  - <span class="keyword">chroot</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>Cgroups</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux Cgroups是Linux内核中用来为进程设置资源限制的一个重要功能</span></span><br><span class="line"><span class="comment"># Linux Cgroups全称 Linux Control Group,主要作用就是限制进程组能够使用的资源上限，CPU、内存、磁盘、网络带宽</span></span><br><span class="line"></span><br><span class="line">➜ mount -t cgroup</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>systemd type cgroup (rw,nosuid,nodev,noexec,relatime,xattr,name=systemd)</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>perf_event type cgroup (rw,nosuid,nodev,noexec,relatime,perf_event)</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>cpu,cpuacct type cgroup (rw,nosuid,nodev,noexec,relatime,cpu,cpuacct)</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>devices type cgroup (rw,nosuid,nodev,noexec,relatime,devices)</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>net_cls,net_prio type cgroup (rw,nosuid,nodev,noexec,relatime,net_cls,net_prio)</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>rdma type cgroup (rw,nosuid,nodev,noexec,relatime,rdma)</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>blkio type cgroup (rw,nosuid,nodev,noexec,relatime,blkio)                        -- 为块设备设置I/O限制，一般用于磁盘等设备</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/m</span>emory type cgroup (rw,nosuid,nodev,noexec,relatime,memory)                      -- 为进程设置内存使用限制</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>hugetlb type cgroup (rw,nosuid,nodev,noexec,relatime,hugetlb)</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>cpuset type cgroup (rw,nosuid,nodev,noexec,relatime,cpuset)                      -- 为进程分配单独的CPU核和对应的内存节点</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>freezer type cgroup (rw,nosuid,nodev,noexec,relatime,freezer)</span><br><span class="line">cgroup on <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)</span><br><span class="line"></span><br><span class="line">➜ ls  <span class="regexp">/sys/</span>fs<span class="regexp">/cgroup/</span>cpu</span><br><span class="line">cgroup.clone_children  cpuacct.usage             cpuacct.usage_percpu_user  cpu.cfs_quota_us  init.scope         system.slice</span><br><span class="line">cgroup.procs           cpuacct.usage_all         cpuacct.usage_sys          cpu.shares        kubepods.slice     tasks</span><br><span class="line">cgroup.sane_behavior   cpuacct.usage_percpu      cpuacct.usage_user         cpu.stat          notify_on_release  user.slice</span><br><span class="line">cpuacct.stat           cpuacct.usage_percpu_sys  cpu.cfs_period_us          docker            release_agent</span><br></pre></td></tr></table></figure></li>
<li><p>Docker vs Hypervisor</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 用户运行在容器里的应用进程根宿主主机上的其他进程一样，都由宿主主机操作系统同一管理，只不过这些被隔离的进程拥有额外设置过的Namesapce参数, 而Docker项目在这里扮演的角色更多的是旁路式的辅助和管理工作</span><br><span class="line"><span class="bullet">2.</span> Hypervisor虚拟化作为应用沙盒，必须由Hypervisor负责创建虚拟机，这个虚拟机真实存在，并且运行完整的GuestOS才能执行用户的应用进程.</span><br></pre></td></tr></table></figure></li>
<li><p>容器化</p>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"> &gt; Dockerd实际上是在创建容器进程时，指定进程所需要启动的一组Namespace参数，这样，容器只能“看”到当前Namespace所限定的资源、文件、设备、状态、或配置，而对于宿主机以及其他不相关的程序，就完全看不到</span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript"><span class="string">&quot;敏捷&quot;</span>和<span class="string">&quot;高性能&quot;</span>是容器相较于虚拟机最大的优势，也是它能够在PaaS这种更细粒度的资源管理平台上大行其道的重要原因.</span></span><br><span class="line"></span><br><span class="line">- 容器和应用的同生命周期</span><br></pre></td></tr></table></figure></li>
<li><p>Docker镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> Docker镜像的设计中引入层layer,用户制作镜像的每一步操作都会生成一个层，也就是一个增量rootfs</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Union File System 联合文件系统</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 将多个不同位置的目录联合挂在(Union mount)到同一个目录下</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> overlay2</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> overlay2, <span class="built_in">which</span> has potential performance advantages over the aufs storage driver.</span></span><br></pre></td></tr></table></figure></li>
<li><p>容器</p>
<blockquote>
<p>是由Linux Namespace、Linux Cgroups和rootfs第三种技术构建出来的进程隔离环境</p>
</blockquote>
</li>
<li><p>Linux容器</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 容器镜像 - 静态视图</span></span><br><span class="line">  &gt; 一组联合rootfs</span><br><span class="line"></span><br><span class="line"><span class="meta"># 容器运行时 - 动态视图</span></span><br><span class="line">  &gt; 一组Namespace + Cgroups 构成的隔离环境</span><br><span class="line"></span><br><span class="line"><span class="meta"># 容器编排工具:</span></span><br><span class="line">  - Docker: Compose+Swarm</span><br><span class="line">  - Google+ReadHat: Kubernetes</span><br></pre></td></tr></table></figure></li>
<li><p>Kubernetes全局架构<br><img src="/misc/images/kubernetes-global-articture.png" alt="Kubernetes 全局架构"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> Master(控制节点):</span><br><span class="line">  &gt; 如何编排、管理、调度用户提交的作业</span><br><span class="line"><span class="bullet">  -</span> kube-controller-manager: Controller Manager</span><br><span class="line"><span class="bullet">  -</span> kube-apiserver: API Server (整个集群的持久化数据由kube-apiserver处理后保存在Etcd中)</span><br><span class="line"><span class="bullet">  -</span> kube-scheduler: Scheduler</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Node(计算节点):</span><br><span class="line"><span class="bullet">  -</span> kubelet: kubelet主要责任同容器运行时(docker)交互</span><br><span class="line"><span class="bullet">  -</span> CNI : kubelet + Networking - 网络插件为容器配置网络</span><br><span class="line"><span class="bullet">  -</span> CRI : kubectl + Container Runtime Interface (接口定义容器运行时的各项核心操作)</span><br><span class="line"><span class="bullet">  -</span> CSI : kubectl + Volume Plugin - 存储插件为容器持久化存储</span><br><span class="line"><span class="bullet">  -</span> OCI : Container Runtime Interface (容器运行时规范同底层Linux操作系统进行交互, 即将CRI请求翻译成Linux系统操作调用 Namespace + Cgroups)</span><br><span class="line"><span class="bullet">  -</span> grpc: kubelet + Device Plugin (Kubernetes项目管理宿主主机物理设备的主要组件)</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; Kubernetes项目关心解决的问题是&quot;运行在大规模集群中的各种任务之间，实际上存在着各种各样的关系，这些关系的处理，才是作业编排和管理系统最困难的地方&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Kubernetes 核心功能<br><img src="/misc/images/kubernetes-pod-road-map.png" alt="Kubernetes 核心功能"></p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">&gt; Kubernetes项目的本质是为用户提供一个具有普遍意义的容器编排工具</span><br><span class="line"></span><br><span class="line"><span class="meta"># Pod:</span></span><br><span class="line">  &gt; Pod里的容器共享同一个Network Namespace,同一组数据卷，从而达到高效交换信息的目的</span><br><span class="line">  &gt; Pod就是Kubenetes世界里的<span class="string">&quot;应用&quot;</span>,而一个应用，可以由多个容器组成</span><br><span class="line"></span><br><span class="line"><span class="meta"># Service:</span></span><br><span class="line">  &gt; Service服务作为Pod代理入口(Portal)从而代替Pod对外暴露一个固定的网络地址</span><br><span class="line"></span><br><span class="line"><span class="meta"># Deployment:</span></span><br><span class="line">  &gt; Pod多实例管理器</span><br><span class="line"></span><br><span class="line"><span class="meta"># Secret:</span></span><br><span class="line">  &gt; Secret对象是保存在Etcd里的键值对数据</span><br><span class="line"></span><br><span class="line"><span class="meta"># Job:</span></span><br><span class="line">  &gt; 描述一次性运行Pod</span><br><span class="line"></span><br><span class="line"><span class="meta"># CronJob:</span></span><br><span class="line">  &gt; 描述定时任务</span><br><span class="line"></span><br><span class="line"><span class="meta"># DaemonSet:</span></span><br><span class="line">  &gt; 描述每个宿主机上必须且只能运行一个副本的守护进程服务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 编排对象 - 描述管理的应用</span></span><br><span class="line">  - Pod</span><br><span class="line">  - Job</span><br><span class="line">  - CronJob</span><br><span class="line"></span><br><span class="line"><span class="meta"># 服务对象 - 负责平台级功能</span></span><br><span class="line">  - Service</span><br><span class="line">  - Secret</span><br><span class="line">  - Horizontal Pod Autoscaler(自动水平扩展器)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 声明式API</span></span><br><span class="line">  &gt; 这种API对应的<span class="string">&quot;编排对象&quot;</span>和<span class="string">&quot;服务对象&quot;</span>都是Kubernetes项目中的API对象(API <span class="built_in">Object</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Kubernetes-概念"><a href="#Kubernetes-概念" class="headerlink" title="Kubernetes 概念"></a>Kubernetes 概念</h2><ul>
<li>概述<ul>
<li>Kubernetes是什么<br><img src="/misc/images/container_evolution.svg" alt="容器演进过程"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Kubernetes 是一个可移植的，可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化.</span></span><br><span class="line"><span class="quote">&gt; Kubernetes源于希腊语,意为&quot;舵手&quot;或&quot;飞行员&quot;</span></span><br><span class="line"><span class="quote">&gt; Kubernetes建立在Google在大规模运行生产工作负载方面拥有十几年的经验的基础上，结合社区中最好的想法和实践.</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 传统部署时代:</span></span><br><span class="line"><span class="bullet">  -</span> 资源分配问题</span><br><span class="line"></span><br><span class="line"><span class="section"># 虚拟化部署时代:</span></span><br><span class="line"><span class="bullet">  -</span> 虚拟化技术允许在单个物理服务器的CPU上运行多个虚拟机VM,虚拟化允许应用程序在VM之间隔离,并提供一定成都的安全，因为一个应用程序的信息不能被另一个应用程序随意访问</span><br><span class="line"><span class="bullet">  -</span> 虚拟化技术能够更好的利用物理服务器上的资源，因为可轻松地添加或更新应用程序而可以实现更好的可伸缩性，降低硬件成本</span><br><span class="line"><span class="bullet">  -</span> 每一个VM是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括其自己的操作系统</span><br><span class="line"></span><br><span class="line"><span class="section"># 容器部署时代:</span></span><br><span class="line"><span class="bullet">  -</span> 容器类似于VM，但是具有被放宽的隔离属性，可以在应用程序之间共享操作系统OS</span><br><span class="line"><span class="bullet">  -</span> 容器与VM具有自己的文件系统、CPU、内存、进程空间</span><br><span class="line"><span class="bullet">  -</span> 容器的好处:</span><br><span class="line"><span class="bullet">    -</span> 敏捷应用程序的创建和部署: 与使用VM镜像相比，提高容器镜像创建的便捷性和效率</span><br><span class="line"><span class="bullet">    -</span> 持续开发、集成和部署: 通过快速简单的回滚(由于镜像不可变性)，支持可靠且频繁的容器镜像构建和部署</span><br><span class="line"><span class="bullet">    -</span> 开发与运维的分离: 在构建/发布时而不是在部署时创建应用程序容器镜像,从而将应用程序于基础架构分离</span><br><span class="line"><span class="bullet">    -</span> 可观察性: 显示操作系统级别的信息和指标，显示应用程序的运行状态和其他指标信号</span><br><span class="line"><span class="bullet">    -</span> 跨开发、测试和生产的环境一致性: 在便携计算机上与云中相同地运行</span><br><span class="line"><span class="bullet">    -</span> 跨云和操作系统发型版本的可移植性: 可在Ubuntu,RHEL,CoreOS,本地</span><br><span class="line"><span class="bullet">    -</span> 以应用程序为中心的管理: 提高抽象级别，从在虚拟硬件上运行OS到使用逻辑资源在OS上运行应用程序</span><br><span class="line"><span class="bullet">    -</span> 松散耦合、分布式、弹性、解放的微服务: 应用程序被分解成较小的独立部分，并且可以动态部署和管理-而不是在一台大型单机上整体运行</span><br><span class="line"><span class="bullet">    -</span> 资源隔离: 可预测的应用程序性能</span><br><span class="line"><span class="bullet">    -</span> 资源利用: 高效率和高密度</span><br><span class="line"></span><br><span class="line"><span class="section"># Kubernetes 提供功能:</span></span><br><span class="line"><span class="bullet">  -</span> 服务发现和负载均衡</span><br><span class="line"><span class="bullet">  -</span> 存储编排</span><br><span class="line"><span class="bullet">  -</span> 自动部署和回滚:</span><br><span class="line"><span class="bullet">  -</span> 自动完成装箱计算:</span><br><span class="line"><span class="code">    &gt; Kubernetes 允许指定每个容器所需CPU和内存RAM 当容器指定资源请求时，Kubernetes可以做出更好的决策来管理容器资源</span></span><br><span class="line"><span class="code">  - 自我修复</span></span><br><span class="line"><span class="code">  - 密钥与配置管理:</span></span><br><span class="line"><span class="code">    &gt; Kubernetes存储和管理敏感信息</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># Kubernetes 不提供:</span></span><br><span class="line"><span class="bullet">  -</span> 不限制支持的应用程序类型: Kubernetes支持及其多种多样的工作负载，包括无状态、有状态和数据处理工作负载。如果应用程序可以在容器中运行，那么他应该可以在Kubernetes上很好的运行.</span><br><span class="line"><span class="bullet">  -</span> 不部署源代码，也不构建应用: 持续集成CI、交付和部署CI/CD工作流</span><br><span class="line"><span class="bullet">  -</span> 不提供应用程序级别的服务作为内置服务</span><br><span class="line"><span class="bullet">  -</span> 不提供日志记录、监控或报警解决方案: 提供一些集成作为概念证明并提供收集和到处指标的机制</span><br><span class="line"><span class="bullet">  -</span> 不提供不采用任何全面的机器配置、维护、管理或自我修复系统</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; Kubernetes 不仅仅是一个编排系统，实际上消除了编排的需要，编排的技术定义是执行已定义的工作流程，首先执行A，然后执行B，在执行C，Kubernetes包含一组独立的，可组合的控制过程，这些过程联系地将当前状态驱动到所提供状态，如何从A到C的方式无关紧要，也不需要几种控制，使得系统更易于使用且功能更强大、系统更健壮、更为弹性和扩展性.</span></span><br></pre></td></tr></table></figure></li>
<li>Kubernetes 组件<br><img src="/misc/images/components-of-kubernetes.svg" alt="Kubernetes关联组件"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Control Plane Compoenents 控制平面组件</span></span><br><span class="line">  &gt; 控制平面组件对集群做出全局决策(调度),以及检测和响应集群事件</span><br><span class="line">  &gt; 控制平面组件可以在集群中的任何节点上运行</span><br><span class="line"></span><br><span class="line"><span class="bullet">  -</span> kube-apiserver:</span><br><span class="line"><span class="code">    &gt; 该组件公开Kubernetes API, API服务器是Kubernetes控制面的前端</span></span><br><span class="line"><span class="code">    &gt; 运行kube-apiserver多个实例并在这些实例之间平衡流量</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">  -</span> etcd:</span><br><span class="line"><span class="code">    &gt; etcd 是兼顾一致性和高可用性的键值数据库,作为保存Kubernetes所有集群数据的后台数据库</span></span><br></pre></td></tr></table></figure></li>
<li>PV、PVC、StorageClass<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Kubernetes 容器持久化存储</span></span><br><span class="line"><span class="bullet">  -</span> PV: 持久化存储的实现</span><br><span class="line"><span class="code">    &gt; 持久化存储数据卷,定义的是一个持久化存储在宿主主机上的目录</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">  -</span> PVC: 持久化存储的接口</span><br><span class="line"><span class="code">    &gt; 描述的持久化存储的属性 (Volume存储大小,可读写权限)</span></span><br><span class="line"><span class="code">    &gt; PVC必须和某个符合条件的PV进行绑定</span></span><br><span class="line"><span class="code">      - 1. PV 和 PVC 的spec字段, PV的存储(storage)大小,必须满足PVC的要求</span></span><br><span class="line"><span class="code">      - 2. PV 和 PVC 的storageClassName字段必须一样</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">  -</span> Volume Controller: 持久化存储控制器</span><br><span class="line"><span class="bullet">    -</span> PersistentVolumeController:</span><br><span class="line"><span class="code">      &gt; 不断查看当前每一个PVC是否已经处于Bound状态,如果不是，就会遍历所有的、可用的PV,尝试将其PVC进行绑定</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># 持久化Volume</span></span><br><span class="line"><span class="bullet">  -</span> 远程文件存储</span><br><span class="line"><span class="bullet">    -</span> NFS</span><br><span class="line"><span class="bullet">    -</span> GlusterFS</span><br><span class="line"><span class="bullet">  -</span> 远程快存储</span><br><span class="line"><span class="bullet">    -</span> 公有云提供的远程磁盘</span><br><span class="line"></span><br><span class="line"><span class="section"># 准备&quot;持久化&quot;宿主机目录</span></span><br><span class="line"><span class="bullet">  -</span> 第一阶段 (Attch) -- nodeName</span><br><span class="line"><span class="code">    &gt; 默认情况下，kubelet 为 Volume创建的目录是 /var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io-&lt;Volume类型&gt;/&lt;Volume名字&gt;</span></span><br><span class="line"><span class="code">    &gt; AttachDetachController (运行在Master节点上)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">  -</span> 第二阶段 (Mount) -- dir</span><br><span class="line"><span class="code">    &gt; 格式化磁盘设备,然后将其挂在到宿主机指定的挂载点上</span></span><br><span class="line"><span class="code">    &gt; VolumeManagerReconciler (运行在Node节点上,是一个独立于kubelet主循环的goroutine)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># StorageClass:</span></span><br><span class="line">  &gt; Kubernetes 提供一套可以自动创建PV的机制，Dynamic Provisioning</span><br><span class="line">  &gt; 手动创建PV的方式叫做 Staic Provisioning</span><br><span class="line">  &gt; StorageClass的作用就是创建PV的模板</span><br><span class="line"><span class="bullet">  -</span> 1. PV的属性 (存储类型、Volume大小)</span><br><span class="line"><span class="bullet">  -</span> 2. 创建PV需要用到的存储插件(Ceph, NFS)</span><br><span class="line">  &gt; Kubernetes根据用户提交的PVC，找到对应的StorageClass,然后调用该StorageClass声明的存储插件，创建出需要的PV</span><br></pre></td></tr></table></figure>
<img src="/misc/images/kubernetes-storageclass.png" alt="StorageClass 流程"><ul>
<li><a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner">搭建StorageClass + NFS</a><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1. 创建一个可用的NFS<span class="built_in"> Server</span></span><br><span class="line"><span class="built_in"></span>  IP: 172.30.1.14</span><br><span class="line">  <span class="builtin-name">Export</span> PATH: /export/K8sData/</span><br><span class="line"></span><br><span class="line">  $ sudo apt-<span class="builtin-name">get</span> install nfs-common cifs-utils</span><br><span class="line"></span><br><span class="line">2. 创建Service Account. 管控NFS Provisioner在K8s集群中运行的权限</span><br><span class="line"></span><br><span class="line">3. 创建StorageClass.负责建立PVC并调用NFS provisioner进行预定的工作，并让PV与PVC建立管理</span><br><span class="line">4. 创建NFS Provisioner,在NFS共享目录下创建挂载点(volume),建立PV并将PV与NFS的挂在点建立关联</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="部署Kubernetes"><a href="#部署Kubernetes" class="headerlink" title="部署Kubernetes"></a>部署Kubernetes</h2><ul>
<li><p>kubeadm</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 创建一个Master节点</span></span><br><span class="line">$ kubeadm init</span><br><span class="line"></span><br><span class="line"><span class="section"># 将一个Node节点加入当前集群</span></span><br><span class="line">$ kubeadm join <span class="xml">&lt;Master节点的IP和端口&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section"># kubeadm 工作原理</span></span><br><span class="line"><span class="bullet">  -</span> kubelet 是Kubernetes项目用来操作Docker等容器运行时的核心组件,除了跟容器运行时交互外，kubelet在配置容器网络、管理容器数据卷时，都需要直接操作宿主机.</span><br><span class="line">  &gt; Kubeadm选择一种妥协方案，把kubelet直接运行在宿主机上，然后使用容器部署其他的Kubernetes组件.</span><br><span class="line"></span><br><span class="line"><span class="section"># kubeadm init工作流程</span></span><br><span class="line"><span class="bullet">  -</span> 1. Preflight Checks 检查工作, 确定机器可以用来部署Kubernetes</span><br><span class="line"><span class="bullet">    -</span> Linux Kernal必须&gt;= 3.10</span><br><span class="line"><span class="bullet">    -</span> Linux Cgroups 模块是否可用</span><br><span class="line"><span class="bullet">    -</span> 机器的hostname是否标准</span><br><span class="line"><span class="bullet">    -</span> 安装的kubeadm和kubelet版本是否匹配</span><br><span class="line"><span class="bullet">    -</span> 机器上是不是已经安装Kubernetes二进制文件</span><br><span class="line"><span class="bullet">    -</span> Kubernetes工作端口10250/10251/10252端口是否占用</span><br><span class="line"><span class="bullet">    -</span> ip, mount Linux指令是否存在</span><br><span class="line"><span class="bullet">    -</span> docker是否安装</span><br><span class="line"><span class="bullet">  -</span> 2. 生成 kubernetes对外提供服务所需要的各种证书和目录</span><br><span class="line"><span class="bullet">    -</span> Kubernetes对外提供服务时，除非专门开启&quot;不安全模式&quot;,否则都要通过HTTPS才能访问kube-apiserver,需要kubernetes集群配置证书文件</span><br><span class="line"><span class="bullet">    -</span> /etc/kubernetes/pki (kubeadm为kubernetes项目生成的证书文件)</span><br><span class="line"><span class="bullet">  -</span> 3. kubeadm为其他组件生成访问kube-apiserver所需的配置文件</span><br><span class="line"><span class="bullet">    -</span> /etc/kubernetes/xxx.cnf</span><br><span class="line"><span class="bullet">  -</span> 4. kubeadm为Master组件生成Pod配置文件</span><br><span class="line"><span class="bullet">    -</span> kube-apiserver</span><br><span class="line"><span class="bullet">    -</span> kube-controller-manager</span><br><span class="line"><span class="bullet">    -</span> kube-scheduler</span><br><span class="line"><span class="bullet">    -</span> ETCD</span><br><span class="line"><span class="code">    &gt; 在Kubernetes中，特殊的容器启动方法&quot;Static Pod&quot;,允许把要部署的Pod的YAML文件放在一个指定的目录里，当kubelet启动时会自动检查次目录，加载所有的PodYAML文件</span></span><br><span class="line"><span class="code">  - 5. kubeadm检查localhost:6443/healthz 等待Master组件完全运行起来</span></span><br><span class="line"><span class="code">  - 6. kubeadm为集群生成一个bootstrap token.</span></span><br><span class="line"><span class="code">    - 剩余的Node节点可以通过此token加入到集群中</span></span><br><span class="line"><span class="code">  - 7. 安装插件kube-proxy和DNS</span></span><br><span class="line"><span class="code">    - kube-proxy: 集群的服务发现</span></span><br><span class="line"><span class="code">    - DNS:</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># kubeadm join工作流程</span></span><br><span class="line"><span class="bullet">  -</span> bootstrap token</span><br><span class="line"><span class="code">    &gt; kubeadm至少需要发起一次&quot;不安全模式&quot;的访问kube-apiserver,从而拿到保存在ConfigMap中的cluster-info(保存了APIServer的授权信息),而bootstrap token扮演的就是这个过程中的安全验证角色</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># kubeadm部署参数配置文件(kubeadm.yaml)</span></span><br><span class="line">  $ kubeadm init --config kubeadm.yaml</span><br></pre></td></tr></table></figure></li>
<li><p>installing kubeadm, kubelet and kubectl</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">- kubeadm: the command <span class="keyword">to</span> bootstrap the <span class="keyword">cluster</span></span><br><span class="line">- kubelet: the component that runs <span class="keyword">on</span> <span class="keyword">all</span> <span class="keyword">of</span> the machines <span class="keyword">in</span> your <span class="keyword">cluster</span> <span class="keyword">and</span> does things <span class="keyword">like</span> starting pods <span class="keyword">and</span> containers.</span><br><span class="line">- kubectl: the command <span class="type">line</span> util <span class="keyword">to</span> talk <span class="keyword">to</span> your <span class="keyword">cluster</span></span><br></pre></td></tr></table></figure></li>
<li><p>container runtimes</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># common container <span class="keyword">runtime</span><span class="variable">s:</span></span><br><span class="line">  - containerd</span><br><span class="line">  - CRI-O</span><br><span class="line">  - Docker</span><br><span class="line"></span><br><span class="line"># Cgroup(Control groups) driver<span class="variable">s:</span></span><br><span class="line">  &gt; used <span class="keyword">to</span> constrain(限制) resources that are allocated <span class="keyword">to</span> processes.</span><br><span class="line">  &gt; Changing the settings such that your container <span class="keyword">runtime</span> <span class="built_in">and</span> kubelet use systemd <span class="keyword">as</span> the cgroup stabilized the <span class="built_in">system</span>.</span><br><span class="line"></span><br><span class="line"># Cgroup V2</span><br><span class="line">  &gt; <span class="keyword">is</span> the <span class="keyword">next</span> <span class="keyword">version</span> of cgroup Linux API.</span><br><span class="line">  - cleaner <span class="built_in">and</span> easier <span class="keyword">to</span> use API</span><br><span class="line">  - safe sub-tree delegation <span class="keyword">to</span> containers</span><br><span class="line">  - newer features like Pressure Stall Information</span><br><span class="line"></span><br><span class="line"># Migrating <span class="keyword">to</span> the systemd driver in kubeadm managed clusters</span><br><span class="line">  - Docker:</span><br><span class="line">    sudo <span class="built_in">mkdir</span> /etc/docker</span><br><span class="line">    <span class="keyword">cat</span> &lt;&lt;EOF | sudo tee /etc/docker/daemon.json</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line">      <span class="string">&quot;log-driver&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">      <span class="string">&quot;log-opts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;100m&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;storage-driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    EOF</span><br><span class="line"></span><br><span class="line">  - Restart Docker <span class="built_in">and</span> enable <span class="keyword">on</span> boo<span class="variable">t:</span></span><br><span class="line">    sudo systemctl enable docker</span><br><span class="line">    sudo systemctl daemon-reload</span><br><span class="line">    sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li>
<li><p>kubeadm部署</p>
<blockquote>
<p>kubeadm目前欠缺部署高可用Kubernetes集群,ETCD、Master组件都应该是多节点集群</p>
</blockquote>
</li>
</ul>
  <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"> # 创建一个Master节点 (--image-repository指定容器镜像地址使用阿里云)</span><br><span class="line"> ➜ sudo kubeadm init [--image-repository=&#x27;registry.cn-hangzhou.aliyuncs.com/google_containers&#x27;]</span><br><span class="line"> [init] Using Kubernetes <span class="keyword">version</span>: v1.22.2</span><br><span class="line"> [preflight] Running pre-flight checks</span><br><span class="line"> [preflight] Pulling images required <span class="keyword">for</span> setting up a Kubernetes <span class="keyword">cluster</span></span><br><span class="line"> [preflight] This might take a minute or <span class="keyword">two</span>, depending <span class="keyword">on</span> the speed of your internet connection</span><br><span class="line"> [preflight] You can also perform this action <span class="keyword">in</span> beforehand using &#x27;kubeadm config images pull&#x27;</span><br><span class="line"> [certs] Using certificateDir folder <span class="string">&quot;/etc/kubernetes/pki&quot;</span></span><br><span class="line"> [certs] Generating <span class="string">&quot;ca&quot;</span> certificate and key</span><br><span class="line"> [certs] Generating <span class="string">&quot;apiserver&quot;</span> certificate and key</span><br><span class="line"> [certs] apiserver serving cert is signed <span class="keyword">for</span> DNS names [chyiyaqing-poweredge-r720 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.<span class="keyword">cluster</span>.<span class="keyword">local</span>] and IPs [10.96.0.1 192.168.50.57]</span><br><span class="line"> [certs] Generating <span class="string">&quot;apiserver-kubelet-client&quot;</span> certificate and key</span><br><span class="line"> [certs] Generating <span class="string">&quot;front-proxy-ca&quot;</span> certificate and key</span><br><span class="line"> [certs] Generating <span class="string">&quot;front-proxy-client&quot;</span> certificate and key</span><br><span class="line"> [certs] Generating <span class="string">&quot;etcd/ca&quot;</span> certificate and key</span><br><span class="line"> [certs] Generating <span class="string">&quot;etcd/server&quot;</span> certificate and key</span><br><span class="line"> [certs] etcd/server serving cert is signed <span class="keyword">for</span> DNS names [chyiyaqing-poweredge-r720 localhost] and IPs [192.168.50.57 127.0.0.1 ::1]</span><br><span class="line"> [certs] Generating <span class="string">&quot;etcd/peer&quot;</span> certificate and key</span><br><span class="line"> [certs] etcd/peer serving cert is signed <span class="keyword">for</span> DNS names [chyiyaqing-poweredge-r720 localhost] and IPs [192.168.50.57 127.0.0.1 ::1]</span><br><span class="line"> [certs] Generating <span class="string">&quot;etcd/healthcheck-client&quot;</span> certificate and key</span><br><span class="line"> [certs] Generating <span class="string">&quot;apiserver-etcd-client&quot;</span> certificate and key</span><br><span class="line"> [certs] Generating <span class="string">&quot;sa&quot;</span> key and public key</span><br><span class="line"> [kubeconfig] Using kubeconfig folder <span class="string">&quot;/etc/kubernetes&quot;</span></span><br><span class="line"> [kubeconfig] Writing <span class="string">&quot;admin.conf&quot;</span> kubeconfig <span class="keyword">file</span></span><br><span class="line"> [kubeconfig] Writing <span class="string">&quot;kubelet.conf&quot;</span> kubeconfig <span class="keyword">file</span></span><br><span class="line"> [kubeconfig] Writing <span class="string">&quot;controller-manager.conf&quot;</span> kubeconfig <span class="keyword">file</span></span><br><span class="line"> [kubeconfig] Writing <span class="string">&quot;scheduler.conf&quot;</span> kubeconfig <span class="keyword">file</span></span><br><span class="line"> [kubelet-start] Writing kubelet environment <span class="keyword">file</span> with flags to <span class="keyword">file</span> <span class="string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span></span><br><span class="line"> [kubelet-start] Writing kubelet configuration to <span class="keyword">file</span> <span class="string">&quot;/var/lib/kubelet/config.yaml&quot;</span></span><br><span class="line"> [kubelet-start] Starting the kubelet</span><br><span class="line"> [control-plane] Using manifest folder <span class="string">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class="line"> [control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">&quot;kube-apiserver&quot;</span></span><br><span class="line"> [control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">&quot;kube-controller-manager&quot;</span></span><br><span class="line"> [control-plane] Creating static Pod manifest <span class="keyword">for</span> <span class="string">&quot;kube-scheduler&quot;</span></span><br><span class="line"> [etcd] Creating static Pod manifest <span class="keyword">for</span> <span class="keyword">local</span> etcd <span class="keyword">in</span> <span class="string">&quot;/etc/kubernetes/manifests&quot;</span></span><br><span class="line"> [wait-control-plane] Waiting <span class="keyword">for</span> the kubelet to <span class="keyword">boot</span> up the control plane <span class="keyword">as</span> static Pods from directory <span class="string">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to 4m0s</span><br><span class="line"> [apiclient] All control plane components are healthy after 9.004478 seconds</span><br><span class="line"> [upload-config] Storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">&quot;kubeadm-config&quot;</span> <span class="keyword">in</span> the <span class="string">&quot;kube-system&quot;</span> Namespace</span><br><span class="line"> [kubelet] Creating a ConfigMap <span class="string">&quot;kubelet-config-1.22&quot;</span> <span class="keyword">in</span> namespace kube-system with the configuration <span class="keyword">for</span> the kubelets <span class="keyword">in</span> the <span class="keyword">cluster</span></span><br><span class="line"> [upload-certs] Skipping phase. Please see --upload-certs</span><br><span class="line"> [<span class="keyword">mark</span>-control-plane] Marking the node chyiyaqing-poweredge-r720 <span class="keyword">as</span> control-plane <span class="keyword">by</span> adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]</span><br><span class="line"> [<span class="keyword">mark</span>-control-plane] Marking the node chyiyaqing-poweredge-r720 <span class="keyword">as</span> control-plane <span class="keyword">by</span> adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line"> [<span class="keyword">bootstrap</span>-<span class="keyword">token</span>] Using <span class="keyword">token</span>: z7bgdd.d4lm4cueg5vo9krh</span><br><span class="line"> [<span class="keyword">bootstrap</span>-<span class="keyword">token</span>] Configuring <span class="keyword">bootstrap</span> tokens, <span class="keyword">cluster</span>-info ConfigMap, RBAC Roles</span><br><span class="line"> [<span class="keyword">bootstrap</span>-<span class="keyword">token</span>] configured RBAC rules to allow Node <span class="keyword">Bootstrap</span> tokens to get nodes</span><br><span class="line"> [<span class="keyword">bootstrap</span>-<span class="keyword">token</span>] configured RBAC rules to allow Node <span class="keyword">Bootstrap</span> tokens to <span class="keyword">post</span> CSRs <span class="keyword">in</span> <span class="keyword">order</span> <span class="keyword">for</span> nodes to get long term certificate credentials</span><br><span class="line"> [<span class="keyword">bootstrap</span>-<span class="keyword">token</span>] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node <span class="keyword">Bootstrap</span> <span class="keyword">Token</span></span><br><span class="line"> [<span class="keyword">bootstrap</span>-<span class="keyword">token</span>] configured RBAC rules to allow certificate rotation <span class="keyword">for</span> all node client certificates <span class="keyword">in</span> the <span class="keyword">cluster</span></span><br><span class="line"> [<span class="keyword">bootstrap</span>-<span class="keyword">token</span>] Creating the <span class="string">&quot;cluster-info&quot;</span> ConfigMap <span class="keyword">in</span> the <span class="string">&quot;kube-public&quot;</span> namespace</span><br><span class="line"> [kubelet-finalize] Updating <span class="string">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to a rotatable kubelet client certificate and key</span><br><span class="line"> [addons] Applied essential addon: CoreDNS</span><br><span class="line"> [addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line"> Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line"> To start using your <span class="keyword">cluster</span>, you need to <span class="keyword">run</span> the following <span class="keyword">as</span> a regular user:</span><br><span class="line"></span><br><span class="line">   <span class="keyword">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">   sudo cp -i /etc/kubernetes/admin.<span class="keyword">conf</span> <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">   sudo chown $(id -<span class="keyword">u</span>):$(id -<span class="keyword">g</span>) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line"> Alternatively, <span class="keyword">if</span> you are the root user, you can <span class="keyword">run</span>:</span><br><span class="line"></span><br><span class="line">   export KUBECONFIG=/etc/kubernetes/admin.<span class="keyword">conf</span></span><br><span class="line"></span><br><span class="line"> You should now deploy a pod network to the <span class="keyword">cluster</span>.</span><br><span class="line"> <span class="keyword">Run</span> <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with <span class="keyword">one</span> of the options listed at:</span><br><span class="line">   https:<span class="comment">//kubernetes.io/docs/concepts/cluster-administration/addons/</span></span><br><span class="line"></span><br><span class="line"> Then you can join any number of worker nodes <span class="keyword">by</span> running the following <span class="keyword">on</span> each <span class="keyword">as</span> root:</span><br><span class="line"></span><br><span class="line"> kubeadm join 192.168.50.57:6443 --<span class="keyword">token</span> z7bgdd.d4lm4cueg5vo9krh \</span><br><span class="line">--discovery-<span class="keyword">token</span>-<span class="keyword">ca</span>-cert-hash sha256:f56091fb52dddc01e552ad110b3479015f4bcdaba5fadec6d76eadab1b3ee48b</span><br><span class="line"></span><br><span class="line"> # 将一个Node节点加入当前集群</span><br><span class="line"> $ kubeadm join &lt;Master节点的IP和端口&gt;</span><br><span class="line"></span><br><span class="line"> # 获取kubeadm临时生成的<span class="keyword">token</span></span><br><span class="line"> ➜ kubeadm <span class="keyword">token</span> <span class="keyword">list</span></span><br><span class="line"> <span class="keyword">TOKEN</span>                     TTL         EXPIRES                USAGES                   DESCRIPTION                                                EXTRA GROUPS</span><br><span class="line"> z1ktsy.k2dzz0m17d42nsem   23h         2021-10-15T05:26:51Z   authentication,signing   The default <span class="keyword">bootstrap</span> <span class="keyword">token</span> generated <span class="keyword">by</span> &#x27;kubeadm init&#x27;.   system:bootstrappers:kubeadm:default-node-<span class="keyword">token</span></span><br><span class="line"></span><br><span class="line"> # 查看nodes</span><br><span class="line"> ➜ kubectl get nodes</span><br><span class="line"> NAME                        STATUS   ROLES                  AGE     <span class="keyword">VERSION</span></span><br><span class="line"> chyiyaqing-poweredge-r720   Ready    control-plane,master   4m49s   v1.22.2</span><br><span class="line"></span><br><span class="line"> # 查看Pod运行情况</span><br><span class="line"> ➜ kubectl get pod -A</span><br><span class="line"> NAMESPACE     NAME                                                READY   STATUS              RESTARTS   AGE</span><br><span class="line"> kube-system   coredns-7d89d9b6b8-cch8p                            0/1     ContainerCreating   0          5m10s</span><br><span class="line"> kube-system   coredns-7d89d9b6b8-vkzw7                            0/1     ContainerCreating   0          5m10s</span><br><span class="line"> kube-system   etcd-chyiyaqing-poweredge-r720                      1/1     Running             0          5m15s</span><br><span class="line"> kube-system   kube-apiserver-chyiyaqing-poweredge-r720            1/1     Running             0          5m15s</span><br><span class="line"> kube-system   kube-controller-manager-chyiyaqing-poweredge-r720   1/1     Running             0          5m17s</span><br><span class="line"> kube-system   kube-proxy-smnf2                                    1/1     Running             0          5m10s</span><br><span class="line"> kube-system   kube-scheduler-chyiyaqing-poweredge-r720            1/1     Running             0          5m14s</span><br><span class="line"></span><br><span class="line"> # kubectl <span class="keyword">describe</span> 查看节点详细信息、状态和事件Event</span><br><span class="line"> ➜ kubectl <span class="keyword">describe</span> pod coredns-7d89d9b6b8-cch8p -<span class="keyword">n</span> kube-system</span><br><span class="line"> Name:                 coredns-7d89d9b6b8-cch8p</span><br><span class="line"> Namespace:            kube-system</span><br><span class="line"> Priority:             2000000000</span><br><span class="line"> Priority <span class="keyword">Class</span> Name:  system-<span class="keyword">cluster</span>-critical</span><br><span class="line"> Node:                 chyiyaqing-poweredge-r720/192.168.50.57</span><br><span class="line"> Start Time:           Thu, 14 Oct 2021 13:27:02 +0800</span><br><span class="line"> Labels:               k8s-<span class="keyword">app</span>=kube-dns</span><br><span class="line">                       pod-template-hash=7d89d9b6b8</span><br><span class="line"> Annotations:          &lt;none&gt;</span><br><span class="line"> Status:               Pending</span><br><span class="line"> IP:</span><br><span class="line"> IPs:                  &lt;none&gt;</span><br><span class="line"> Controlled <span class="keyword">By</span>:        ReplicaSet/coredns-7d89d9b6b8</span><br><span class="line"> Containers:</span><br><span class="line">   coredns:</span><br><span class="line">     Container ID:</span><br><span class="line">     Image:         registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4</span><br><span class="line">     Image ID:</span><br><span class="line">     Ports:         53/UDP, 53/TCP, 9153/TCP</span><br><span class="line">     Host Ports:    0/UDP, 0/TCP, 0/TCP</span><br><span class="line">     <span class="keyword">Args</span>:</span><br><span class="line">       -<span class="keyword">conf</span></span><br><span class="line">       /etc/coredns/Corefile</span><br><span class="line">     State:          Waiting</span><br><span class="line">       Reason:       ContainerCreating</span><br><span class="line">     Ready:          False</span><br><span class="line">     Restart <span class="keyword">Count</span>:  0</span><br><span class="line">     Limits:</span><br><span class="line">       <span class="keyword">memory</span>:  170Mi</span><br><span class="line">     Requests:</span><br><span class="line">       cpu:        100m</span><br><span class="line">       <span class="keyword">memory</span>:     70Mi</span><br><span class="line">     Liveness:     http-get http:<span class="comment">//:8080/health delay=60s timeout=5s period=10s #success=1 #failure=5</span></span><br><span class="line">     Readiness:    http-get http:<span class="comment">//:8181/ready delay=0s timeout=1s period=10s #success=1 #failure=3</span></span><br><span class="line">     Environment:  &lt;none&gt;</span><br><span class="line">     Mounts:</span><br><span class="line">       /etc/coredns from config-volume (ro)</span><br><span class="line">       /<span class="keyword">var</span>/<span class="keyword">run</span>/secrets/kubernetes.io/serviceaccount from kube-api-access-qdx6w (ro)</span><br><span class="line"> Conditions:</span><br><span class="line">   <span class="keyword">Type</span>              Status</span><br><span class="line">   Initialized       True</span><br><span class="line">   Ready             False</span><br><span class="line">   ContainersReady   False</span><br><span class="line">   PodScheduled      True</span><br><span class="line"> Volumes:</span><br><span class="line">   config-volume:</span><br><span class="line">     <span class="keyword">Type</span>:      ConfigMap (a volume populated <span class="keyword">by</span> a ConfigMap)</span><br><span class="line">     Name:      coredns</span><br><span class="line">     Optional:  false</span><br><span class="line">   kube-api-access-qdx6w:</span><br><span class="line">     <span class="keyword">Type</span>:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">     TokenExpirationSeconds:  3607</span><br><span class="line">     ConfigMapName:           kube-root-<span class="keyword">ca</span>.crt</span><br><span class="line">     ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">     DownwardAPI:             true</span><br><span class="line"> QoS <span class="keyword">Class</span>:                   Burstable</span><br><span class="line"> Node-Selectors:              kubernetes.io/os=linux</span><br><span class="line"> Tolerations:                 CriticalAddonsOnly op=Exists</span><br><span class="line">                              node-role.kubernetes.io/control-plane:NoSchedule</span><br><span class="line">                              node-role.kubernetes.io/master:NoSchedule</span><br><span class="line">                              node.kubernetes.io/not-ready:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">                              node.kubernetes.io/unreachable:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line"> Events:</span><br><span class="line">   <span class="keyword">Type</span>     Reason                  Age                  From               Message</span><br><span class="line">   ----     ------                  ----                 ----               -------</span><br><span class="line">   Warning  FailedScheduling        6m12s                default-scheduler  0/1 nodes are available: 1 node(s) had taint &#123;node.kubernetes.io/not-ready: &#125;, that the pod didn&#x27;t tolerate.</span><br><span class="line">   Normal   Scheduled               6m7s                 default-scheduler  Successfully assigned kube-system/coredns-7d89d9b6b8-cch8p to chyiyaqing-poweredge-r720</span><br><span class="line">   Warning  FailedCreatePodSandBox  6m6s                 kubelet            Failed to create pod sandbox: rpc <span class="keyword">error</span>: code = Unknown <span class="keyword">desc</span> = [failed to <span class="keyword">set</span> up sandbox container <span class="string">&quot;d165e9f1f627d4a9c1f0eac4492ae7d1db6a7a1fe2a92dd435380cac57b35011&quot;</span> network <span class="keyword">for</span> pod <span class="string">&quot;coredns-7d89d9b6b8-cch8p&quot;</span>: networkPlugin cni failed to <span class="keyword">set</span> up pod <span class="string">&quot;coredns-7d89d9b6b8-cch8p_kube-system&quot;</span> network: unable to allocate IP address: <span class="keyword">Post</span> <span class="string">&quot;http://127.0.0.1:6784/ip/d165e9f1f627d4a9c1f0eac4492ae7d1db6a7a1fe2a92dd435380cac57b35011&quot;</span>: dial tcp 127.0.0.1:6784: connect: connection refused, failed to clean up sandbox container <span class="string">&quot;d165e9f1f627d4a9c1f0eac4492ae7d1db6a7a1fe2a92dd435380cac57b35011&quot;</span> network <span class="keyword">for</span> pod <span class="string">&quot;coredns-7d89d9b6b8-cch8p&quot;</span>: networkPlugin cni failed to teardown pod <span class="string">&quot;coredns-7d89d9b6b8-cch8p_kube-system&quot;</span> network: Delete <span class="string">&quot;http://127.0.0.1:6784/ip/d165e9f1f627d4a9c1f0eac4492ae7d1db6a7a1fe2a92dd435380cac57b35011&quot;</span>: dial tcp 127.0.0.1:6784: connect: connection refused]</span><br><span class="line">   Normal   SandboxChanged          63s (x25 over 6m5s)  kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class="line"></span><br><span class="line"> # 通过Taint/Toleration 调整Master执行Pod的策略 (由于本地搭建环境kubeamd只有一个Master节点)</span><br><span class="line"> &gt; 默认情况下Master节点是不允许运行用户Pod的, Kubernetes依赖Taint/Toleration机制</span><br><span class="line">   - 为节点打上污点(Taint)</span><br><span class="line">     &gt; $ kubectl taint nodes &lt;node-1&gt; foo=bar:NoSchedule</span><br><span class="line">   - 删除Taint</span><br><span class="line">     ➜ kubectl taint nodes --all node-role.kubernetes.io/master-</span><br><span class="line">     node/chyiyaqing-poweredge-r720 untainted</span><br><span class="line"> # 安装网络插件</span><br><span class="line">     ➜ kubectl apply -f <span class="string">&quot;https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d &#x27;\n&#x27;)&quot;</span></span><br><span class="line"></span><br><span class="line">     serviceaccount/weave-<span class="keyword">net</span> created</span><br><span class="line">     clusterrole.rbac.authorization.k8s.io/weave-<span class="keyword">net</span> created</span><br><span class="line">     clusterrolebinding.rbac.authorization.k8s.io/weave-<span class="keyword">net</span> created</span><br><span class="line">     role.rbac.authorization.k8s.io/weave-<span class="keyword">net</span> created</span><br><span class="line">     rolebinding.rbac.authorization.k8s.io/weave-<span class="keyword">net</span> created</span><br><span class="line">     daemonset.apps/weave-<span class="keyword">net</span> created</span><br></pre></td></tr></table></figure>
<ul>
<li><p>kubernetes CNI (Container Network Interface)<br><img src="/misc/images/kubernetes-cni-architecture.png" alt="CNI plugin architecture"></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; Kubernetes supports CNI plugins <span class="keyword">for</span> <span class="keyword">the</span> communication <span class="keyword">between</span> pods.</span><br><span class="line">&gt; kubeadm <span class="keyword">does</span> <span class="keyword">not</span> support kubenet. you should use a CNI plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kubernetes impose(施加) following rules for network communication:</span></span><br><span class="line">  - All containers can communicate <span class="keyword">with</span> all other containers <span class="keyword">without</span> NAT</span><br><span class="line">  - All nodes can communicate <span class="keyword">with</span> all container (<span class="keyword">and</span> vice-versa) <span class="keyword">without</span> NAT</span><br><span class="line">  - The IP <span class="keyword">that</span> a container sees itself <span class="keyword">as</span> <span class="keyword">is</span> <span class="keyword">the</span> same IP <span class="keyword">that</span> others see <span class="keyword">it</span> <span class="keyword">as</span>.</span><br><span class="line"></span><br><span class="line">CNI plugins generally use kube-proxy <span class="keyword">or</span> directory iptables <span class="keyword">for</span> routing. However, Cilium <span class="keyword">is</span> based <span class="keyword">on</span> BPF <span class="keyword">and</span> XDP <span class="keyword">to</span> provide a faster <span class="keyword">and</span> more scalable option.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plugins:</span></span><br><span class="line">  - Flannel:</span><br><span class="line">    - provides VXLAN tunneling solution 隧道解决方案</span><br><span class="line">    - configuration <span class="keyword">and</span> management are very simple</span><br><span class="line">    - <span class="keyword">does</span> <span class="keyword">not</span> support Network Policies</span><br><span class="line">  - Calico:</span><br><span class="line">    - default choice <span class="keyword">of</span> <span class="keyword">the</span> most <span class="keyword">of</span> kubernetes platform (kubespary, docker enterprise)</span><br><span class="line">    - uses BGP <span class="keyword">and</span> Bird, a daemon called Felix configures routes <span class="keyword">on</span> Bird</span><br><span class="line">    - supports IP-IP encapsulation <span class="keyword">if</span> BGP cannot be used.</span><br><span class="line">    - supports Network Policies</span><br><span class="line">    - uses iptables <span class="keyword">for</span> routing <span class="keyword">but</span> <span class="keyword">it</span> can be configured <span class="keyword">to</span> use kube-proxy&#x27;s IPVS mode.</span><br><span class="line">  - Weave:</span><br><span class="line">    - Provides VXLAN tunneling solution</span><br><span class="line">    - all <span class="keyword">of</span> <span class="keyword">the</span> nodes are connected <span class="keyword">as</span> mesh which allows <span class="keyword">it</span> <span class="keyword">to</span> <span class="built_in">run</span> <span class="keyword">on</span> paritially connected networks.</span><br><span class="line">    - stores configuration files <span class="keyword">on</span> pods <span class="keyword">instead of</span> kubernetes CRDs <span class="keyword">or</span> etcd</span><br><span class="line">    - has an encryption library</span><br><span class="line">    - supports Network Policies</span><br><span class="line">  - Cilium</span><br><span class="line">    - Linux kernel must be <span class="keyword">at</span> least <span class="number">4.9</span></span><br><span class="line">  - kube-router:</span><br><span class="line">    -</span><br></pre></td></tr></table></figure>
<ul>
<li>Terminology<ul>
<li>kube-proxy<ul>
<li>Kube-proxy tree mods: 三个模组<ul>
<li>userspace:<br><img src="/misc/images/kube-proxy-userspace-mode.png" alt="kube-proxy Userspace mode"><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; It adds rules <span class="keyword">to</span> iptables so <span class="keyword">that</span> all communication redirects <span class="keyword">through</span> proxy server. It <span class="keyword">is</span> no longer used <span class="keyword">since</span> <span class="keyword">it</span> <span class="keyword">is</span> much slower compared <span class="keyword">to</span> <span class="keyword">the</span> other modes.</span><br></pre></td></tr></table></figure></li>
<li>Iptables:<br><img src="/misc/images/kube-proxy-iptables-mode.png" alt="kube-proxy iptables mode"><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; This mode adds rules <span class="keyword">to</span> iptables so that iptables redirects straight <span class="keyword">to</span> pods <span class="keyword">without</span> <span class="keyword">using</span> a proxy <span class="keyword">server</span>. It <span class="keyword">is</span> the <span class="keyword">default</span> mode <span class="keyword">of</span> kube-proxy.</span><br></pre></td></tr></table></figure></li>
<li>IPVS:<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">IPVS (IP Virtual <span class="keyword">Server</span>) <span class="keyword">is</span> layer<span class="number">-4</span> <span class="keyword">load</span> balancer inside the Linux kernel. It <span class="keyword">is</span> built <span class="keyword">on</span> top <span class="keyword">of</span> netfilter <span class="keyword">like</span> iptables. It utilizes hash <span class="keyword">table</span> <span class="keyword">instead</span> <span class="keyword">of</span> chain <span class="keyword">as</span> <span class="keyword">in</span> iptables.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>Network policy<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Kubernetes specification <span class="keyword">that</span> can be used <span class="keyword">to</span> control traffic <span class="keyword">between</span> pods.</span><br></pre></td></tr></table></figure></li>
<li>Overlay Networks<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">An overlay network abstracts <span class="keyword">a</span> physical (underlay) network <span class="built_in">to</span> <span class="built_in">create</span> virtual network. It provides simpler interface <span class="keyword">by</span> hiding complexities <span class="keyword">of</span> <span class="keyword">the</span> underlay.</span><br></pre></td></tr></table></figure></li>
<li>VXLAN<br><img src="/misc/images/vxlan-architecture.png" alt="VXLAN architecture"><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">VXLAN <span class="keyword">is</span> a network tunneling(隧道) protocol <span class="keyword">in</span> <span class="keyword">the</span> Linux Kernel. Network tunneling means hiding protocol (VXLAN) within another protocol (TCP/IP).VXLAN tuneels layer <span class="number">2</span> frames inside <span class="keyword">of</span> Layer <span class="number">4</span> UDP datagrams.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux network structure in VXLAN:</span></span><br><span class="line">  - veth: Virtual ethernet pair, <span class="keyword">it</span> connects network namespaces</span><br><span class="line">  - bridge: It <span class="keyword">is</span> used <span class="keyword">to</span> connect ethernet pairs <span class="keyword">in</span> Linux</span><br><span class="line">  - vtep: VXLAN tunnel endpoint, <span class="keyword">it</span>&#x27;s entry/<span class="keyword">exit</span> point <span class="keyword">for</span> VXLAN tunnels</span><br></pre></td></tr></table></figure></li>
<li>BGP(Border gateway protocol) - 边界网关协议</li>
<li>BPF(Berkeley Packet Filter) - 伯克利数据包过滤器</li>
<li>XDP (eXpress Data Path)<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">XDP <span class="keyword">is</span> a data <span class="type">path</span> recently added <span class="keyword">to</span> Linux kernel. It relies <span class="keyword">on</span> eBPF <span class="keyword">to</span> <span class="keyword">perform</span> fast packet processing.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>kubernetes安装Metrics Server</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&gt; Metrics Server是集群中资源使用情况的聚合器, Metrics Server从kubelets收集资源指标，并通过Metrics API将他们暴露在Kubernetes apiserver中,以供Horizontal Pod Autoscaler和Vertical Pod Autoscaler使用.</span><br><span class="line">&gt; Metrics Server不适用与非自动缩放目的，不要使用他将指标转发到监控解决方案，或作为监控解决方案指标的来源,这种情况可以使用kuberlet<span class="regexp">/metrics/</span>resource 端点收集指标</span><br><span class="line"></span><br><span class="line"><span class="comment"># Installation</span></span><br><span class="line">- kubectl apply -f https:<span class="regexp">//gi</span>thub.com<span class="regexp">/kubernetes-sigs/m</span>etrics-server<span class="regexp">/releases/</span>latest<span class="regexp">/download/</span>components.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fix: (cannot validate certificate, doesn&#x27;t contain any IP SANs)</span></span><br><span class="line">  - $ kubectl edit deployment metrics-server -n kube-system</span><br><span class="line">    &gt; modifying the metrics-server deployment template, and adding the argument - --kubelet-insecure-tls to the container args</span><br></pre></td></tr></table></figure></li>
<li><p>Kubernetes集群安装Dashboard</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dashboard(Web界面) 可视化插件</span></span><br><span class="line">  ➜ wget kubectl apply -f https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/kubernetes/</span>dashboard<span class="regexp">/v2.2.0/</span>aio<span class="regexp">/deploy/</span>recommended.yaml</span><br><span class="line">  namespace/kubernetes-dashboard created</span><br><span class="line">  serviceaccount/kubernetes-dashboard created</span><br><span class="line">  service/kubernetes-dashboard created</span><br><span class="line">  secret/kubernetes-dashboard-certs created</span><br><span class="line">  secret/kubernetes-dashboard-csrf created</span><br><span class="line">  secret/kubernetes-dashboard-key-holder created</span><br><span class="line">  configmap/kubernetes-dashboard-settings created</span><br><span class="line">  role.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">  clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">  rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">  clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created</span><br><span class="line">  deployment.apps/kubernetes-dashboard created</span><br><span class="line">  service/dashboard-metrics-scraper created</span><br><span class="line">  Warning: spec.template.metadata.annotations[seccomp.security.alpha.kubernetes.io/pod]: deprecated since v1.<span class="number">19</span>; use the <span class="string">&quot;seccompProfile&quot;</span> field instead</span><br><span class="line">  deployment.apps/dashboard-metrics-scraper created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Dashboard对应的Pod状态</span></span><br><span class="line">➜ kubectl get pods -n kubernetes-dashboard</span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">dashboard-metrics-scraper-<span class="number">856586</span>f554-w4vvw   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">5</span>m19s</span><br><span class="line">kubernetes-dashboard-<span class="number">78</span>c79f97b4-l8nmb        <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">5</span>m19s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令行代理 kubectl 访问DashBoard</span></span><br><span class="line">$ kubectl proxy --address=<span class="string">&#x27;0.0.0.0&#x27;</span> --port=<span class="number">8001</span> --accept-hosts=<span class="string">&#x27;.*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从集群外部访问Dashboard 需要使用Ingress</span></span><br></pre></td></tr></table></figure></li>
<li><p>Kubernetes部署存储插件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; 容器持久化存储,用来保存容器存储状态,存储插件会在容器中挂在一个基于网络或者其他机制的远程数据卷. 使得在容器里创建的文件，实际上保存在远程存储服务器上,</span><br><span class="line"></span><br><span class="line"># Kubernetes 存储插件 - Rook</span><br><span class="line">  &gt; Rook项目是一个基于Ceph的Kubernetes存储插件，不同于Ceph的简单封装，Rook加入了对平扩展、迁移、灾难备份、监控等大量的企业级功能.</span><br><span class="line">  - 部署基于Rook持久化存储集群以容器方式运行</span><br><span class="line">    $ git clone <span class="comment">--single-branch --branch release-1.7 https://github.com/rook/rook.git</span></span><br><span class="line">    cd rook/<span class="keyword">cluster</span>/examples/kubernetes/ceph</span><br><span class="line">    kubectl <span class="keyword">create</span> -f crds.yaml -f common.yaml -f <span class="keyword">operator</span>.yaml</span><br><span class="line">    kubectl <span class="keyword">create</span> -f <span class="keyword">cluster</span>.yaml</span><br><span class="line"></span><br><span class="line">  - 查看Rook部署的Namespace</span><br><span class="line">    ➜ k <span class="keyword">get</span> pods -n rook-ceph</span><br><span class="line">    <span class="type">NAME</span>                                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">    csi-cephfsplugin<span class="number">-7</span>l9xb                         <span class="number">3</span>/<span class="number">3</span>     Running   <span class="number">0</span>          <span class="number">15</span>m</span><br><span class="line">    csi-cephfsplugin-provisioner<span class="number">-689686</span>b44-qpt5q   <span class="number">6</span>/<span class="number">6</span>     Running   <span class="number">0</span>          <span class="number">15</span>m</span><br><span class="line">    csi-rbdplugin-provisioner<span class="number">-5775</span>fb866b<span class="number">-25224</span>     <span class="number">6</span>/<span class="number">6</span>     Running   <span class="number">0</span>          <span class="number">15</span>m</span><br><span class="line">    csi-rbdplugin-vvq94                            <span class="number">3</span>/<span class="number">3</span>     Running   <span class="number">0</span>          <span class="number">15</span>m</span><br><span class="line">    rook-ceph-<span class="keyword">operator</span><span class="number">-7</span>bdb744878-zz2fm            <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">24</span>m</span><br><span class="line"></span><br><span class="line">  &gt; Kubernetes项目创建的所有Pod就能够通过Persistent Volume (PV) 和 Persistent Volume Claim (PVC) 的方式，在容器里挂载由Ceph提供的数据卷</span><br><span class="line"></span><br><span class="line">  - <span class="keyword">Storage</span></span><br><span class="line">    - Block: <span class="keyword">Create</span> block <span class="keyword">storage</span> <span class="keyword">to</span> be consumed <span class="keyword">by</span> a pod (RWO)</span><br><span class="line">      &gt; <span class="keyword">Before</span> Rook can provision <span class="keyword">storage</span>, a **StorageClass** <span class="keyword">and</span> **CephBlockPool** need <span class="keyword">to</span> be created.</span><br><span class="line">    - Shared FileSystem: <span class="keyword">Create</span> a filesystem <span class="keyword">to</span> be shared across multiple pods (RWX)</span><br><span class="line">    - <span class="keyword">Object</span>: <span class="keyword">Create</span> an <span class="keyword">object</span> store that <span class="keyword">is</span> accessible inside <span class="keyword">or</span> outside the Kubernetes <span class="keyword">cluster</span></span><br></pre></td></tr></table></figure></li>
<li><p>HELM</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Helm is the package manager for Kubernetes</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Helm 三大概念</span></span><br><span class="line"><span class="bullet">  -</span> Chart: helm包</span><br><span class="line"><span class="code">    &gt; 包含Kubernetes集群内部运行应用程序,工具或服务所需的所有资源定义</span></span><br><span class="line"><span class="code">  - Repository: 仓库</span></span><br><span class="line"><span class="code">    &gt; 存放和共享charts</span></span><br><span class="line"><span class="code">  - Release:</span></span><br><span class="line"><span class="code">    &gt; 运行在Kubernetes集群中的chart实例</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># helm search - 查找Charts</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Kubernetes-IN-Docker-Kind"><a href="#Kubernetes-IN-Docker-Kind" class="headerlink" title="Kubernetes IN Docker (Kind)"></a>Kubernetes IN Docker (Kind)</h2><blockquote>
<p>local clusters for testing Kubernetes</p>
</blockquote>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"># Installation</span><br><span class="line">  $ go install sigs.k8s.io/kind@v0.11.1</span><br><span class="line"></span><br><span class="line"># Creating a Cluster</span><br><span class="line">  $ kind <span class="keyword">create</span> <span class="keyword">cluster</span> # Default <span class="keyword">cluster</span> context name <span class="keyword">is</span> <span class="symbol">`kind`</span></span><br><span class="line">  Creating <span class="keyword">cluster</span> <span class="string">&quot;kind&quot;</span> ...</span><br><span class="line">   ✓ Ensuring node image (kindest/node:v1<span class="number">.21</span><span class="number">.1</span>) 🖼</span><br><span class="line">   ✓ Preparing nodes 📦</span><br><span class="line">   ✓ Writing configuration 📜</span><br><span class="line">   ✓ Starting control-plane 🕹️</span><br><span class="line">   ✓ Installing CNI 🔌</span><br><span class="line">   ✓ Installing StorageClass 💾</span><br><span class="line">  <span class="keyword">Set</span> kubectl context <span class="keyword">to</span> <span class="string">&quot;kind-kind&quot;</span></span><br><span class="line">  You can now <span class="keyword">use</span> your <span class="keyword">cluster</span> <span class="keyword">with</span>:</span><br><span class="line"></span><br><span class="line">  kubectl <span class="keyword">cluster</span>-info --context kind-kind</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Not</span> sure what <span class="keyword">to</span> <span class="keyword">do</span> next? 😅  Check out https://kind.sigs.k8s.io/docs/<span class="keyword">user</span>/quick-<span class="keyword">start</span>/</span><br><span class="line"></span><br><span class="line">  ❯ kubectl <span class="keyword">cluster</span>-info --context kind-kind  # interact <span class="keyword">with</span> a specific <span class="keyword">cluster</span></span><br><span class="line">  Kubernetes control plane <span class="keyword">is</span> running at https://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">45967</span></span><br><span class="line">  CoreDNS <span class="keyword">is</span> running at https://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">45967</span>/api/v1/namespaces/kube-<span class="keyword">system</span>/services/kube-dns:dns/proxy</span><br><span class="line"></span><br><span class="line">  <span class="keyword">To</span> further debug <span class="keyword">and</span> diagnose <span class="keyword">cluster</span> problems, <span class="keyword">use</span> <span class="string">&#x27;kubectl cluster-info dump&#x27;</span>.</span><br><span class="line"></span><br><span class="line">  ❯ kind get clusters  # list kind clusters</span><br><span class="line">  kind</span><br></pre></td></tr></table></figure>

<h2 id="容器化应用"><a href="#容器化应用" class="headerlink" title="容器化应用"></a>容器化应用</h2><ul>
<li>Kubernetes API 对象定义<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">&gt; Kubernetes 不推荐使用命令行方式直接运行容器(kubectl <span class="keyword">run</span>), 而是希望使用YAML方式(kubectl <span class="keyword">create</span> -f yaml)</span><br><span class="line">&gt; 使用一个API对象(Deployment)管理另一种API对象(Pod)的方式叫做“控制器”模式 (Controller pattern)</span><br><span class="line">&gt; Pod 是Kubernetes世界里的“应用”,而一个应用可以由多个容器组成.</span><br><span class="line"></span><br><span class="line">- metadata: API对象的元数据</span><br><span class="line">- spec: 描述它要表达的功能</span><br><span class="line">- labels: 一组<span class="built_in">key</span>-value格式的标签</span><br><span class="line">- spec.selector.matchLabels: Label Selector 标签选择器</span><br><span class="line">- annotations: 一组<span class="built_in">key</span>-value格式的内部信息(kubernetes组件本身感兴趣, 在Kubernetes运行过程中被自动加载到API对象上)</span><br><span class="line"></span><br><span class="line">➜ k get pods -l app=nginx</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment<span class="number">-5</span>d59d67564<span class="number">-8</span>qtq5   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">11</span>m</span><br><span class="line">nginx-deployment<span class="number">-5</span>d59d67564-xx29g   <span class="number">1</span>/<span class="number">1</span>     Running   <span class="number">0</span>          <span class="number">11</span>m</span><br><span class="line"></span><br><span class="line"><span class="meta"># 使用kubectl apply 统一进行kubernetes对象的创建和更新操作</span></span><br><span class="line">$ k apply -f nginx-deployment.yaml</span><br><span class="line">$ k <span class="built_in">exec</span> -it nginx-deployment<span class="number">-748</span>c6fff66-plhwq -- /bin/bash</span><br><span class="line">$ k <span class="keyword">delete</span> -f nginx-deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="meta"># emptyDir</span></span><br><span class="line">  &gt; 不显式声明宿主主机目录的<span class="built_in">Volume</span>,Kubernetes会在宿主主机上创建一个临时目录,这个目录会被绑定到容器所声明的<span class="built_in">Volume</span>目录上(Kubernetes的emptyDir类型，只是把kubernetes创建的临时目录作为<span class="built_in">Volume</span>宿主机目录，交给Docker)</span><br><span class="line"></span><br><span class="line"><span class="meta"># hostPath</span></span><br><span class="line">  &gt; 显式的<span class="built_in">Volume</span>定义</span><br><span class="line">  ...</span><br><span class="line">    volumes:</span><br><span class="line">      - name: nginx-vol</span><br><span class="line">        hostPath:</span><br><span class="line">          path: <span class="string">&quot; /var/data&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>Pod实现原理<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">Pod是Kuberntes项目的原子调度单位,kubernetes项目的调度器是统一按照Pod而非容器的资源需求进行计算</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">Docker容器的本质<span class="string">&quot;Namespace隔离，Cgroups限制，rootfs文件系统&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">Pod是Kubernetes里院子调度单位，Kubernetes项目的调度器是统一按照Pod而非容器的资源需求进行计算.</span></span><br><span class="line"></span><br><span class="line"># 展示系统中正在运行的进程树状结构</span><br><span class="line">$ pstree - display a tree of process</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">容器的<span class="string">&quot;单进程模型&quot;</span>并不是指容器里只能运行<span class="string">&quot;一个&quot;</span>进程,而是指容器没有管理多个进程的能力,</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">Pod在Kubernetes项目里“容器设计模型”</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">Pod其实是一组共享了某些资源的容器;Pod里的所有容器共享的是一个Network Namespace,并且可以声明共享一个Volume.</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">Pod实际上扮演传统基础设施里<span class="string">&quot;虚拟机&quot;</span>的角色，而容器则是这个虚拟机里运行的用户程序</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Pod Infra容器<br><img src="/misc/images/kubernetes-pod-infra.png" alt="Pod Infra"><figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">Kubernetes项目中Pod实现使用一个中间容器，这个容器叫做Infra容器,在Pod中,Infra容器都是第一个被创建的容器</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">Infra 容器使用k8s.gcr.io/pause镜像使用汇编语言编写，永远处于<span class="string">&quot;暂停&quot;</span>状态的容器,解压后大小只有<span class="number">100</span>～200KB</span></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">Pod声明周期只跟Infra容器一致，而与容器A和B无关</span></span><br></pre></td></tr></table></figure></li>
<li>容器设计模式<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sidecar</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 我们可以在一个Pod中启动一个辅助容器，来完成一些独立主容器之外的工作</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Istio - 微服务治理项目</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 使用sidecar容器完成微服务治理的原理</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>深入解析Pod对象(-): 基本概念<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; Kubernetes 项目的最小编排单元 &quot;Pod&quot;</span></span><br><span class="line"><span class="quote">&gt; Pod扮演的是传统部署环境里&quot;虚拟机&quot;的角色</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Pod属性</span></span><br><span class="line"><span class="bullet">  -</span> 调度、网络、存储、安全</span><br><span class="line"><span class="bullet">  -</span> NodeSelector (将Pod与Node进行绑定的字段)</span><br><span class="line"><span class="bullet">  -</span> NodeName: (调度的结果)</span><br><span class="line"><span class="bullet">  -</span> 凡是Pod中的容器要共享宿主机的Namespace,一定是Pod级别的定义</span><br><span class="line"></span><br><span class="line"><span class="section"># Container属性</span></span><br><span class="line"><span class="bullet">  -</span> ImagePullPolicy: 镜像拉取策略</span><br><span class="line"></span><br><span class="line"><span class="section"># Pod对象在Kubernetes中的声明周期</span></span><br><span class="line"><span class="bullet">  -</span> phase:</span><br><span class="line"><span class="bullet">    -</span> Pending: Pod的YAML文件已经提交Kubernetes, API对象已经被创建保存在Etcd当中</span><br><span class="line"><span class="bullet">    -</span> Running: Pod已经调度成功,与具体节点绑定</span><br><span class="line"><span class="bullet">    -</span> Succeeded: Pod中所有容器都正常运行完毕，并且已经退出</span><br><span class="line"><span class="bullet">    -</span> Failed: Pod中至少有一个容器以不正常的状态退出</span><br><span class="line"><span class="bullet">    -</span> Unknown: Pod状态不能持续被kubelet上报给kube-apiserver</span><br><span class="line"><span class="bullet">  -</span> status.condation</span><br><span class="line"><span class="bullet">    -</span> PodScheduled:</span><br><span class="line"><span class="bullet">    -</span> Initialized</span><br><span class="line"><span class="bullet">    -</span> Ready</span><br><span class="line"><span class="bullet">    -</span> ContainersReady</span><br><span class="line"><span class="section"># Volume</span></span><br><span class="line"><span class="bullet">  -</span> Projected Volume</span><br><span class="line"><span class="bullet">    -</span> Secret: 加密数据存放在Etcd,通过Pod容器挂载Volume方式访问Secret,Secret对象存储数据经过base64转码</span><br><span class="line"><span class="bullet">    -</span> ConfigMap: 保存不需要加密、应用所需的配置信息</span><br><span class="line"><span class="bullet">    -</span> Downward API: 直接获取Pod API 对象本身的信息</span><br><span class="line"><span class="bullet">      -</span> spec.nodeName: 宿主机名字</span><br><span class="line"><span class="bullet">      -</span> status.hostIP: 宿主机IP</span><br><span class="line"><span class="bullet">      -</span> metadata.name: Pod名字</span><br><span class="line"><span class="bullet">      -</span> metadata.namespace: Pod的Namespace</span><br><span class="line"><span class="bullet">      -</span> status.podIP: Pod的IP</span><br><span class="line"><span class="bullet">      -</span> spec.serviceAccountName:</span><br><span class="line"><span class="bullet">      -</span> metadata.uid</span><br><span class="line"><span class="bullet">      -</span> metadata.labels</span><br><span class="line"><span class="bullet">      -</span> metadata.annotations</span><br><span class="line"><span class="bullet">      -</span> metadata.labels</span><br><span class="line"><span class="bullet">      -</span> metadata.annotations</span><br><span class="line"><span class="bullet">    -</span> ServiceAccountToken</span><br><span class="line"><span class="code">      &gt; Service Account对象是Kubernetes系统内置的一种&quot;服务账户&quot;,是Kubernetes进行权限分配的对象</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">环境变量获取信息的方式不具备自动更新的能力,建议使用Volume文件的方式获取这些信息</span><br><span class="line">这种把Kubernetes客户端以容器的方式运行在集群里，然后使用default Service Account自动授权的方式，称作&quot;InClusterConfig&quot;，Kubernetes API编程的授权方式</span><br><span class="line"></span><br><span class="line"><span class="section"># 容器健康检查和恢复机制</span></span><br><span class="line"><span class="bullet">  -</span> Probe(探针)</span><br><span class="line"></span><br><span class="line">  &gt; Kubernetes中并没有Docker的Stop,虽然是Restart,</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Kubernetes-技能图谱"><a href="#Kubernetes-技能图谱" class="headerlink" title="Kubernetes 技能图谱"></a>Kubernetes 技能图谱</h2><p><img src="/misc/images/kubernetes-rollmap.jpg" alt="Kubernetes 技能图谱"></p>
<h2 id="Awesome-Tools"><a href="#Awesome-Tools" class="headerlink" title="Awesome Tools"></a>Awesome Tools</h2><ul>
<li><a href="https://github.com/ahmetb/kubectx">kubectx + kubens: Power tools for kubectl</a></li>
<li><a href="https://github.com/ktr0731/evans">evans Universal gRPC client</a></li>
</ul>
<h3 id="WarmUp"><a href="#WarmUp" class="headerlink" title="WarmUp"></a>WarmUp</h3><ul>
<li>一旦要追求项目的普适性，那就一定要从顶层开始做好设计</li>
</ul>
<h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h3><ul>
<li>PaaS (Platform as a Service): 平台即服务</li>
<li>BaaS (Backend as a Service): 后端即服务</li>
<li>GA (General Availability): 一般可用性</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://kubernetes.io/zh/docs/concepts/overview/">Kubernetes文档</a></li>
<li><a href="https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_burns.pdf">容器设计模式</a></li>
</ul>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Cyclic redundancy check Intro</title>
    <url>/2021/09/21/Cyclic-redundancy-check-Intro/</url>
    <content><![CDATA[<h1 id="CRC-Cyclic-redundancy-check"><a href="#CRC-Cyclic-redundancy-check" class="headerlink" title="CRC - Cyclic redundancy check"></a>CRC - Cyclic redundancy check</h1><blockquote>
<p>A cyclic redundancy check (CRC) is an error-detecting code commonly used in digital network and storage device to detect accidental changes to raw data.</p>
</blockquote>
<h2 id="CRC-16-校验码"><a href="#CRC-16-校验码" class="headerlink" title="CRC-16 校验码"></a>CRC-16 校验码</h2>]]></content>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Have Read - Structure and Interpretation of Computer Programs</title>
    <url>/2021/09/21/Have-Read-Structure-and-Interpretation-of-Computer-Programs/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Docker Intro</title>
    <url>/2021/09/26/Docker-Intro/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Go Tips Tracks</title>
    <url>/2021/09/27/Go-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="Go-Tips-Tracks"><a href="#Go-Tips-Tracks" class="headerlink" title="Go Tips Tracks"></a>Go Tips Tracks</h1><span id="more"></span>

<h2 id="Go-Tips"><a href="#Go-Tips" class="headerlink" title="Go Tips"></a>Go Tips</h2><ul>
<li><p><strong>Go Tip #1</strong>: Go’s Package Management and Module Systems</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&gt; A <span class="keyword">package</span> manager <span class="keyword">is</span> a tool <span class="keyword">for</span> automating the <span class="keyword">process</span> <span class="keyword">of</span> building</span><br><span class="line">&gt; <span class="keyword">in</span> <span class="number">2018</span>, Go team finally introduced Go modules Go <span class="number">1.11</span> but wasn<span class="symbol">&#x27;t</span> enabled by <span class="keyword">default</span>. <span class="keyword">To</span> turn it <span class="keyword">on</span>, $ GO111MODULE = <span class="keyword">on</span>, Go <span class="number">1.14</span>, modules are now enabled by <span class="keyword">default</span></span><br><span class="line"></span><br><span class="line"># GOPATH (Go workspace)</span><br><span class="line">  &gt; assumed $HOME/go <span class="keyword">on</span> Unix system, %USERPROFILE%\go <span class="keyword">on</span> Windows</span><br><span class="line">  &gt; As <span class="keyword">of</span> Go v1.<span class="number">13</span>, $GOPATH mechanics <span class="keyword">is</span> now largely irrelevant(无关紧要).</span><br><span class="line"></span><br><span class="line"># Getting started <span class="keyword">with</span> Modules</span><br><span class="line">  $ go <span class="keyword">mod</span> init &lt;module name&gt; (The module name doubles as the import path, which allows internal imports <span class="keyword">to</span> be resolved inside the module.)</span><br><span class="line"></span><br><span class="line"># Installing dependencies</span><br><span class="line">  $ go get k8s.io/client-go@latest (adds a <span class="keyword">new</span> dependency )</span><br><span class="line">  $ go get -u &lt;&gt; (-u=patch <span class="keyword">to</span> upgrade a dependency <span class="keyword">to</span> a <span class="keyword">new</span> minor <span class="keyword">or</span> patch version)</span><br><span class="line">  // indirect comment indicates that this <span class="keyword">package</span> <span class="keyword">is</span> <span class="keyword">not</span> currently being used <span class="keyword">in</span> the project</span><br><span class="line"></span><br><span class="line">  $ go <span class="keyword">mod</span> tidy (cleans up unused dependencies <span class="keyword">or</span> adds missing depenencies)</span><br><span class="line">  $ go <span class="keyword">mod</span> vendor (create a vendor directory <span class="keyword">in</span> your project root. <span class="keyword">all</span> the project dependencies (direct <span class="keyword">and</span> indirect) required <span class="keyword">to</span> build your project are copied over <span class="keyword">to</span> the directory)</span><br><span class="line">  $ go build (compile packages <span class="keyword">and</span> dependencies)</span><br><span class="line"></span><br><span class="line"># Using replace <span class="keyword">in</span> go.<span class="keyword">mod</span> <span class="keyword">to</span> point <span class="keyword">to</span> your local module</span><br><span class="line">  &gt; point <span class="keyword">to</span> the local version <span class="keyword">of</span> a dependency <span class="keyword">in</span> Go rather than the one over the web, <span class="keyword">use</span> the replace keyword.</span><br><span class="line">  $ go <span class="keyword">mod</span> edit -replace github.com/pselle/bar=/Users/pselle/Projects/bar</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Go Tip #2</strong>: Go module proxy</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt; Goproxy.<span class="keyword">cn</span> <span class="built_in">has</span> fully implemented the GOPROXY protocol. provide <span class="keyword">a</span> free, trusted, always <span class="keyword">on</span>, <span class="built_in">and</span> globally CDNed Go module proxy <span class="keyword">for</span> Gophers in China.</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">go</span> env -<span class="keyword">w</span> GO111MODULE=<span class="keyword">on</span></span><br><span class="line">$ <span class="keyword">go</span> env -<span class="keyword">w</span> GOPROXY=http<span class="variable">s:</span>//goproxy.<span class="keyword">cn</span>,direct</span><br><span class="line"></span><br><span class="line"># Linux</span><br><span class="line">  $ <span class="keyword">echo</span> <span class="string">&quot;export GO111MODULE=on&quot;</span> &gt;&gt; ~/.<span class="keyword">profile</span></span><br><span class="line">  $ <span class="keyword">echo</span> <span class="string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.<span class="keyword">profile</span></span><br><span class="line">  $ <span class="keyword">source</span> ~/.<span class="keyword">profile</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>Go Tip #3</strong>: GOPATH, GOROOT, GOBIN</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GOPATH: is the root of the workspace and contains the following folders</span></span><br><span class="line">  - src : <span class="keyword">location</span> <span class="title">of</span> source files: .go,.c,.g,.s</span><br><span class="line">  - pkg : <span class="keyword">location</span> <span class="title">of</span> compiled packages (.a files)</span><br><span class="line">  - bin : <span class="keyword">location</span> <span class="title">of</span> executables built by Go</span><br><span class="line"><span class="comment"># GOBIN:</span></span><br><span class="line">  &gt; The directory where **go install** <span class="keyword">and</span> **go get** will place binaries after building main packages.</span><br><span class="line"><span class="comment"># GOROOT:</span></span><br><span class="line">  &gt; The <span class="keyword">location</span> <span class="title">of</span> your Go installation. It is used to find the standard libraries.</span><br></pre></td></tr></table></figure></li>
<li><p><strong>Go Tip #4</strong>: Go Version Management goenv</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># goenv</span></span><br><span class="line"><span class="bullet">  -</span> </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Awesome Tools Intro</title>
    <url>/2021/09/28/Awesome-Tools-Intro/</url>
    <content><![CDATA[<h1 id="工欲善其事-必先利其器"><a href="#工欲善其事-必先利其器" class="headerlink" title="工欲善其事 必先利其器"></a>工欲善其事 必先利其器</h1><blockquote>
<p>If you want to do good things, you must first sharpen your tools.</p>
</blockquote>
<span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>Code Review Intro</title>
    <url>/2021/09/28/Code-Review-Intro/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hyperledger Fabric Intro</title>
    <url>/2021/09/28/Hyperledger-Fabric-Intro/</url>
    <content><![CDATA[<h1 id="Hyperledger-Fabric"><a href="#Hyperledger-Fabric" class="headerlink" title="Hyperledger Fabric"></a>Hyperledger Fabric</h1><blockquote>
<p>Hyperledger Fabric 1.4 LTS - long-term support release<br>Hyperledger Fabric is a permissioned blockchain network(许可区块链网络).</p>
</blockquote>
<span id="more"></span>

<h2 id="Hyperledger-Fabric-Architecture"><a href="#Hyperledger-Fabric-Architecture" class="headerlink" title="Hyperledger Fabric Architecture"></a>Hyperledger Fabric Architecture</h2><ul>
<li>Simplest Hyperledger Fabric network with two organizations joining the same channel<br><img src="/misc/images/fabric-network-1.png" alt="Simplest Fabric network with two organizations joining the same channel"></li>
</ul>
  <figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Fabric components</span></span><br><span class="line">  - Peer:</span><br><span class="line">    &gt; is blockchain node that stores <span class="literal">all</span> transactions <span class="keyword">on</span> a joining channel.</span><br><span class="line"></span><br><span class="line">  - Orderer:</span><br><span class="line">    &gt; is the most important components used <span class="keyword">in</span> the Farbic consensus mechanism (共识机制)</span><br><span class="line">    &gt; is a service responsible <span class="keyword">for</span> ordering transactions(交易排序), creating a new <span class="built_in">block</span> of ordered transactions, and distributing a newly created <span class="built_in">block</span> <span class="keyword">to</span> <span class="literal">all</span> peers <span class="keyword">on</span> a relevant channel.</span><br><span class="line"></span><br><span class="line">  - CA (Certificate Authority) 证书颁发机构:</span><br><span class="line">    - 管理用户证书:</span><br><span class="line">      - <span class="keyword">user</span> registration: 用户注册</span><br><span class="line">      - <span class="keyword">user</span> enrollment: 用户登记</span><br><span class="line">      - <span class="keyword">user</span> revocation: 用户撤销</span><br><span class="line"></span><br><span class="line">    - standard certificate: 标准证书</span><br><span class="line">      - Hyperledger Fabric uses an X.<span class="number">509</span> srandard certificate <span class="keyword">to</span> represent permissions, roles, and attributes <span class="keyword">to</span> each <span class="keyword">user</span>.</span><br><span class="line">      - <span class="keyword">user</span> is able <span class="keyword">to</span> query or invoke <span class="literal">any</span> transaction <span class="keyword">on</span> <span class="literal">any</span> channel based <span class="keyword">on</span> permissions, roles, and attributes possesses.</span><br><span class="line"></span><br><span class="line">  - Client:</span><br><span class="line">    &gt; is considered <span class="keyword">to</span> be an application that interacts with Fabric blockchain network.</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Endorsing Peer(背书) vs Committing Peer()<br><img src="/misc/images/fabric_endorse_peer_commit_peer.png" alt="Endorsing Peer vs Committing Peer"></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Chaincode (Smart Contract)</span></span><br><span class="line">  - three language (Golang, Nodejs, Java) program Fabric chaincode - 链码</span><br><span class="line">  - 要部署链码，网络管理员将链码安装到目标peer,然后调用orderer排序节点将链码实例化到特定channel通道上.</span><br><span class="line">  - Endorsement policy defines which peers need <span class="keyword">to</span> agree <span class="keyword">on</span> <span class="keyword">the</span> results <span class="keyword">of</span> a <span class="keyword">transaction</span> <span class="keyword">before</span> <span class="keyword">the</span> <span class="keyword">transaction</span> can be added <span class="keyword">onto</span> ledgers <span class="keyword">of</span> all peers <span class="keyword">on</span> <span class="keyword">the</span> channel.</span><br><span class="line">  - A chaincode developer must opt <span class="keyword">to</span> use either LevelDB <span class="keyword">or</span> CouchDB when developing a chaincode.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Endorsing Peer 背书节点</span></span><br><span class="line">  &gt; which consists <span class="keyword">of</span> an installed chaincode <span class="keyword">and</span> a <span class="keyword">local</span> ledger <span class="keyword">on</span> <span class="keyword">it</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Committing Peer</span></span><br><span class="line">  &gt; would have only a <span class="keyword">local</span> ledger <span class="keyword">on</span> <span class="keyword">it</span>.</span><br></pre></td></tr></table></figure></li>
<li><p>Interior components inside the Peer’s ledger<br><img src="/misc/images/fabric-ledger-components.png" alt="Interior components inside the Peer&#39;s ledger"></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Blockchain</span></span><br><span class="line">  &gt; the history of alll transactions <span class="keyword">for</span> every chaincode <span class="keyword">on</span> a particular channel.</span><br><span class="line"></span><br><span class="line"><span class="comment"># World State:</span></span><br><span class="line">  &gt; maintains the current <span class="keyword">state</span> of variables <span class="keyword">for</span> each specific chaincode.</span><br><span class="line"></span><br><span class="line">  - Two type database:</span><br><span class="line">    - LevelDB:</span><br><span class="line">      &gt; key-value database built <span class="keyword">on</span> Fabric Peer</span><br><span class="line"></span><br><span class="line">    - CouchDB:</span><br><span class="line">      &gt; JSON-based database supporting rich querying operations based <span class="keyword">on</span> JSON objects.</span><br></pre></td></tr></table></figure></li>
<li><p>Fabric network with chaincodes and ledgers attached multiple channels<br><img src="/misc/images/fabric-network-2.png" alt="Fabric network with chaincodes and ledgers attached"></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; Actually, <span class="keyword">the</span> <span class="keyword">system</span> chaincodes <span class="keyword">and</span> ledgers are also deployed <span class="keyword">on</span> <span class="title">peers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># System Chaincodes</span></span><br><span class="line">  &gt; collect network, channel, <span class="keyword">and</span> underlying <span class="keyword">system</span> configurations <span class="keyword">for</span> Fabric virtual machine <span class="built_in">to</span> work properly.</span><br><span class="line"></span><br><span class="line">  - QSCC (Query System Chaincode): <span class="keyword">for</span> ledger <span class="keyword">and</span> Fabric-related queries</span><br><span class="line">  - CSCC (Configuration System Chaincode): which helps regulate access control</span><br><span class="line">  - LSCC (Lifecycle System Chaincode): which defines <span class="keyword">the</span> rules <span class="keyword">for</span> <span class="keyword">the</span> channel</span><br><span class="line">  - ESCC (Endorsement System Chaincode): endorsing transactions</span><br><span class="line">  - VSCC (Validation System Chaincode): validating transactions</span><br><span class="line"></span><br><span class="line"><span class="comment"># System Ledgers</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Channel</span></span><br><span class="line">  &gt; organizations that join <span class="keyword">the</span> same channel can secretly share business transaction <span class="keyword">or</span> information together <span class="keyword">with</span> confidence.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Chaincode:</span></span><br><span class="line">  - <span class="literal">one</span> chaincode can call another chaincode <span class="keyword">on</span> <span class="title">the</span> <span class="title">same</span> <span class="title">channel</span>.</span><br></pre></td></tr></table></figure></li>
<li><p>Fabric transaction invocation workflow (投票流程图)<br><img src="/misc/images/fabric-transaction-invocation-workflow.png" alt="Fabric transaction invocation workflow"></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># consensus(共识) divided into tree phases</span></span><br><span class="line">  - <span class="number">1</span>. Endorsement (背书) (Steps <span class="number">1</span>-<span class="number">3</span>)</span><br><span class="line">  - <span class="number">2</span>. Ordering (排序) (Steps <span class="number">4</span>-<span class="number">5</span>)</span><br><span class="line">  - <span class="number">3</span>. Validation and Commitment(验证和承诺) (Steps <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fabric transaction workflow:</span></span><br><span class="line">  - <span class="number">1</span>. Client:创建交易提议，并使用用户证书进行签名，然后发送交易到特定通道上预先确定的背书节点上</span><br><span class="line">  - <span class="number">2</span>. (Endorsing Peer) 首先从交易提议中验证用户身份和授权, 验证通过后，背书节点模拟交易, 生成相应和读写集，并使用证书对生成的响应进行背书</span><br><span class="line">  - <span class="number">3</span>. Client: accumulate并检查来自背书节点的背书提案响应.</span><br><span class="line">  - <span class="number">4</span>. Client: 将附有背书提案响应的交易发给Orderer.</span><br><span class="line">  - <span class="number">5</span>. Orderer: 对接收到的交易进行排序，生成一个新的有序交易快，并用其证书对生成的快进行签名</span><br><span class="line">  - <span class="number">6</span>. Orderer: 将生成的快广播给相关通道上的所有对等(endorse peer, commit peer)节点. 然后每个Peer确保接收到的区块中的每次交易都由适当的背书(Endorsing Peers)签名(根据调用的链码的背书策略确定)并且存在足够的背书. 之后，将进行版本检查(Multi-version concurrency control MVCC 检查) 以验证接收到的快的交易的正确性. 每一个Peer节点都会将每个交易的readset与其分类帐的世界状态进行比较，如果验证检查通过，则交易被标记为有效，并且每个Peer的word <span class="keyword">state</span>都会更新, 否则，交易被标记为无效而不更新world <span class="keyword">state</span>. 最后，无论该<span class="built_in">block</span>是否包含任何无效的交易，接收到的<span class="built_in">block</span>都会追加到Peer节点的本地blockchain中.</span><br><span class="line">  - <span class="number">7</span>. Client: 客户端从EventHub服务接受订阅的事件</span><br></pre></td></tr></table></figure></li>
<li><p>Fabric Orderer Service</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">&gt; It acts as a Hub for <span class="keyword">distributing </span><span class="keyword">blocks </span>of transactions to all peers on a relevant channel.</span><br><span class="line">&gt; <span class="keyword">Orderer </span>might <span class="keyword">be </span>considered to <span class="keyword">be </span>the weakest point in the Fabric network.</span><br><span class="line"></span><br><span class="line"><span class="comment"># two type of Fabric Orderer service</span></span><br><span class="line">  - Solo-<span class="keyword">based </span><span class="keyword">ordering </span>service (仅用于开发阶段)</span><br><span class="line"></span><br><span class="line">  - Kafka-<span class="keyword">based </span><span class="keyword">ordering </span>service (搭建Kafka集群)</span><br><span class="line">    - Kafka provide Crash Fault tolerance (CFT崩溃容错) consensus(共识)</span><br></pre></td></tr></table></figure></li>
<li><p>Fabric network in a production environment<br><img src="/misc/images/fabric-network-production.png" alt="Fabric network in a production environment"></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Client application interact with Fabric blockchain network in two ways:</span></span><br><span class="line"><span class="bullet">  -</span> Fabric SDK</span><br><span class="line"><span class="code">    &gt; Fabric SDK supports Go, Node.js and Java language</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">  -</span> Fabric CLI</span><br><span class="line"><span class="code">    &gt; use in development or maintenance mode</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># CA: 用户管理和证书颁发</span></span><br><span class="line"><span class="bullet">  -</span> Two ways to deploy Fabric CA:</span><br><span class="line"><span class="bullet">    -</span> 1. Fabric CA without LDAP Server:</span><br><span class="line"><span class="code">      &gt; Fabric CA 负责 用户注册、用户认证、颁发用户证书.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">    -</span> 2. Fabric CA with LDAP Server:</span><br><span class="line"><span class="code">      &gt; Fabric CA 负责颁发用户证书</span></span><br><span class="line"><span class="code">      &gt; LDAP Server 负责 用户注册、用户认证、撤销用户</span></span><br><span class="line"><span class="code">      &gt; 这种方式适合组织存在的AD,LDAP or Radius server.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="section"># CouchDB:</span></span><br><span class="line">  &gt; 支持JSON 查询，数据库索引，数据拷贝，ACID 属性</span><br><span class="line"></span><br><span class="line"><span class="section"># LevelDB:</span></span><br><span class="line">  &gt; 支持有限的操作</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Private-Data-Collection"><a href="#Private-Data-Collection" class="headerlink" title="Private Data Collection"></a>Private Data Collection</h2>  <figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">Fabric <span class="number">1.2</span>支持该特性</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Overview of Private Data Collection<br><img src="/misc/images/fabric-private-data-collection.png" alt="Peer&#39;s ledger enabled for Private Data Collection use"></p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># public data section:</span></span><br><span class="line">  - public <span class="built_in">block</span> storage: 公共快存储</span><br><span class="line">    &gt; is a blockchain that holds the history of <span class="literal">all</span> public transactions <span class="keyword">for</span> every chaincode instantiated <span class="keyword">on</span> a channel.</span><br><span class="line"></span><br><span class="line">  - public <span class="keyword">state</span> database 公共状态数据库</span><br><span class="line">    &gt; maintains the current <span class="keyword">state</span> of public variables <span class="keyword">for</span> a specific chaincode.</span><br><span class="line"></span><br><span class="line">  &gt; 对于任何特定通道channel,即公共数据部分仅包含单个公共快存储(public <span class="built_in">block</span> storage)实例, 但该部分可以包含基于在通道上实例化的多个链码(chaincode)的多个公共状态数据库实例.</span><br><span class="line"></span><br><span class="line"><span class="comment"># private data section:</span></span><br><span class="line">  - private writeset storage: 私有写入集存储</span><br><span class="line">    &gt; 收集特定私有数据集合的所有私有交易的历史记录</span><br><span class="line">    &gt; 这种存储不是区块链，而是一种典型的日志持久化数据库</span><br><span class="line"></span><br><span class="line">  - private <span class="keyword">state</span> database:</span><br><span class="line">    &gt;</span><br><span class="line"></span><br><span class="line">  - transient store database: 瞬态存储数据库</span><br><span class="line">    &gt; 这种数据库用作临时数据库，用于在交易调用过程中临时存储私有数据</span><br></pre></td></tr></table></figure></li>
<li><p>Peers maintaining multiple Private Data Collections<br><img src="/misc/images/fabric-private-data-collection-2.png" alt="Peers maintaining multiple Private Data Collections"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Public State Database:</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> (公共状态数据库)存储特定链码的公共变量的当前值, 还存储与该特定链码关联的修改后的私有数据集的哈希值.</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Private data collections:</span></span><br><span class="line"><span class="meta">  &gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Fabric-1-4-12-源代码分析"><a href="#Fabric-1-4-12-源代码分析" class="headerlink" title="Fabric (1.4.12) 源代码分析"></a>Fabric (1.4.12) 源代码分析</h2>  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载docker镜像、预编译程序</span></span><br><span class="line">➜ curl -sSL https:<span class="regexp">//</span>bit.ly/<span class="number">2</span>ysbOFE | bash -s <span class="number">1.4</span>.<span class="number">12</span></span><br><span class="line"></span><br><span class="line">$ cat https:<span class="regexp">//gi</span>thub.com<span class="regexp">/hyperledger/</span>fabric<span class="regexp">/blob/</span>release-<span class="number">1.4</span><span class="regexp">/scripts/</span>bootstrap.sh</span><br><span class="line">  export VERSION=<span class="number">1.4</span>.<span class="number">12</span></span><br><span class="line">  export CA_VERSION=<span class="number">1.4</span>.<span class="number">9</span></span><br></pre></td></tr></table></figure>

<h3 id="Fabric-Tips-amp-amp-Tracks"><a href="#Fabric-Tips-amp-amp-Tracks" class="headerlink" title="Fabric Tips &amp;&amp; Tracks"></a>Fabric Tips &amp;&amp; Tracks</h3><ul>
<li>Read-Write set semantics<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语:"></a>专业术语:</h3><ul>
<li><p>transaction (交易):</p>
<blockquote>
<p>chaincode的invoke或instantiate操作，invoke是从ledger中请求read-write set, instantiate是请求在peer上启动chaincode容器</p>
</blockquote>
</li>
<li><p>system chain (系统链):</p>
<blockquote>
<p>包含在系统级定义网络的配置区块中，系统链存在与ordering service中,与channel类似.</p>
</blockquote>
</li>
<li><p>state database (stateDB):</p>
<blockquote>
<p>current state数据存储在stateDB中，包括levelDB和couchDB.</p>
</blockquote>
</li>
<li><p>proposal(提案):</p>
<blockquote>
<p>一种对channel中某peer的背书请求，每个proposal要么是chaincode instantiate(实例),要么是chaincode invoke(调用).</p>
</blockquote>
</li>
<li><p>policy(策略):</p>
</li>
<li><p>peer(节点):</p>
<blockquote>
<p>网络实体,维护ledger并运行chaincode容器来对ledger执行read-write操作</p>
</blockquote>
</li>
<li><p>ordering service(排序服务/共识服务):</p>
<blockquote>
<p>将交易排序放入block的节点的集合,以先进先得的方式为网络上所有的channel提供交易排序服务.</p>
</blockquote>
</li>
<li><p>membership services(成员服务):</p>
<blockquote>
<p>在许可的区块链网络上认证、授权和管理身份. 在peer和order中运行的成员服务的代码都会认证和授权区块链操作, 他是基于PKI的MSP实现的.<br>fabric-ca 组件实现了成员服务以管理身份，处理ECert和TCert的颁发和撤销<br>ECert是长期的身份凭证，TCert是短期身份凭证</p>
</blockquote>
</li>
<li><p>membership service provider (MSP):</p>
<blockquote>
</blockquote>
</li>
<li><p>Member(成员):</p>
<blockquote>
</blockquote>
</li>
<li><p>Ledger (账本):</p>
<blockquote>
</blockquote>
</li>
<li><p>leading peer (主导节点):</p>
<blockquote>
<p>每一个member在其订阅的channel上可以拥有多个peer, 其中一个peer会作为channel的leading peer代表该member与ordering service通信. ordering service将block传递给leading peer, 该peer再将block分发给同一member下的其他peer.</p>
</blockquote>
</li>
<li><p>invoke (调用):</p>
<blockquote>
<p>调用chaincode内的函数, invoke结构就是一个函数和一个参数数组.</p>
</blockquote>
</li>
<li><p>instantiate (实例化):</p>
<blockquote>
<p>启动chaincode容器的过程</p>
</blockquote>
</li>
<li><p>gossip protocol (Gossip 协议):</p>
<blockquote>
<p>Gossip 数据传输协议有三项功能: 管理peer discovery和channel 成员; 在channel上所有的peer间广播账本数据;在channel上所有的peer间同步账本数据</p>
</blockquote>
</li>
<li><p>genesis block (初始化区块):</p>
<blockquote>
<p>genesis block是初始化区块链网络或channel的配置区块，也是链上的第一个区块</p>
</blockquote>
</li>
<li><p>fabric-ca:</p>
<blockquote>
<p>默认的证书管理组件，向网络成员及其用户颁发基于PKI的证书，CA为每个成员颁发一个根证书(rootCert), 为每一个授权用户颁发一个注册证书(eCert), 每一个注册证书颁发大量交易证书(tCert)</p>
</blockquote>
</li>
<li><p>endorser:</p>
<blockquote>
<p>背书节点</p>
</blockquote>
</li>
<li><p>dynamic membership (动态成员):</p>
<blockquote>
<p>fabric 支持动态添加、移除members、peers和ordering服务节点, 而不会影响整个网络的操作性. 当业务系统调整或因各种原因需要添加、移除实体时.</p>
</blockquote>
</li>
<li><p>consensus (共识):</p>
<blockquote>
<p>用于产生一个对于排序的同意书和确认构成区块的交易集的正确性</p>
</blockquote>
</li>
<li><p>concurrency control version check (并发控制版本检查):</p>
<blockquote>
<p>CCVC时保持通道中各对等节点间状态同步的一种方式，对等节点并行的执行交易</p>
</blockquote>
</li>
<li><p>committer:</p>
<blockquote>
<p>提交者</p>
</blockquote>
</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>  <a href="https://medium.com/coinmonks/demystifying-hyperledger-fabric-2-3-private-data-collection-164220ecafa5">Demystifying Hyperledger Fabric</a></p>
]]></content>
      <tags>
        <tag>Blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>LevelDB Intro</title>
    <url>/2021/09/28/LevelDB-Intro/</url>
    <content><![CDATA[<h1 id="LevelDB"><a href="#LevelDB" class="headerlink" title="LevelDB"></a>LevelDB</h1><blockquote>
<p>LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.</p>
</blockquote>
<span id="more"></span>

<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul>
<li>key和value支持存储任意长度的字节数组</li>
<li>数据存储根据Key排序</li>
<li>支持自定义排序规则</li>
<li>基本操作是Put(Key,value), Get(Key), Delete(Key)</li>
<li>支持批量原子操作</li>
<li>支持创建事务快照获取一致性视图数据</li>
<li>Forward and backward iteration is supported over the data.</li>
<li>自动使用Snappy算法压缩数据</li>
</ul>
<h2 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h2><ul>
<li>Not SQL database</li>
<li>Only a single process (possibly multi-threaded) can access a particular database at a time</li>
<li>No client-server support builtin to the library</li>
</ul>
]]></content>
      <tags>
        <tag>Key-Value DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Bash Script CheetSheet</title>
    <url>/2021/10/09/Bash-Script-CheetSheet/</url>
    <content><![CDATA[<h1 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h1><blockquote>
<p>Bash is a name of the unix shell, which was also distributed as the shell for the GNU operating system and as the default shell on most linux distros.</p>
</blockquote>
<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment"># First line of the script is the shebang which tells the system how to execute</span></span><br><span class="line"><span class="comment"># the script</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Simple hello world example:</span></span><br><span class="line"><span class="built_in">echo</span> Hello world!  <span class="comment"># =&gt; Hello world!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Each command starts on a new line, or after a semicolon:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;This is the first line&#x27;</span>; <span class="built_in">echo</span> <span class="string">&#x27;This is the second line&#x27;</span></span><br><span class="line"><span class="comment"># =&gt; This is the first line</span></span><br><span class="line"><span class="comment"># =&gt; This is the second line</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Declaring a variable looks like this:</span></span><br><span class="line">Variable=<span class="string">&quot;Some string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Using the variable:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$Variable</span>  <span class="comment"># =&gt; Some string</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$Variable</span>&quot;</span> <span class="comment"># =&gt; Some string</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$Variable&#x27;</span> <span class="comment"># =&gt; $Variable</span></span><br><span class="line"><span class="comment"># When you use the variable itself - assign it, export it, or else - you write</span></span><br><span class="line"><span class="comment"># its name without $. If you want to use the variable&#x27;s value, you should use $.</span></span><br><span class="line"><span class="comment"># Not that &#x27; (single quote) wan&#x27;t expand the variables!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Parameter expansion $&#123; &#125;:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Variable&#125;</span> <span class="comment"># =&gt; Some string</span></span><br><span class="line"><span class="comment"># This is a simple usage of parameter expansion</span></span><br><span class="line"><span class="comment"># Parameter Expansion gets a value from a variable.</span></span><br><span class="line"><span class="comment"># It &quot;expands&quot; or prints the value</span></span><br><span class="line"><span class="comment"># During the expansion time the value or parameter can be modified</span></span><br><span class="line"><span class="comment"># Below are other modifications that add onto this expansion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># String substitution in variables</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Variable/Some/A&#125;</span> <span class="comment"># =&gt; A string</span></span><br><span class="line"><span class="comment"># This will substitute the first occurrence of &quot;Some&quot; with &quot;A&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Substring from a variable</span></span><br><span class="line">Length=7</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Variable:0:Length&#125;</span> <span class="comment"># =&gt; Some st</span></span><br><span class="line"><span class="comment"># This will return only the first 7 characters of the value</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Variable: -5&#125;</span> <span class="comment"># =&gt; tring</span></span><br><span class="line"><span class="comment"># This will return the last 5 characters (note the space before -5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># String length</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#Variable&#125;</span> <span class="comment"># =&gt; 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Indirect expansion</span></span><br><span class="line">OtherVariable=<span class="string">&quot;Variable&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;!OtherVariable&#125;</span> <span class="comment"># =&gt; Some String</span></span><br><span class="line"><span class="comment"># This will expand the value of OtherVariable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default value for variable</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;Foo:-&quot;DefaultValueIfFooIsMissingOrEmpty&quot;&#125;</span></span><br><span class="line"><span class="comment"># =&gt; DefaultValueIfFooIsMissingOrEmpty</span></span><br><span class="line"><span class="comment"># This works for null (Foo=) and empty string (Foo=&quot;&quot;); zero (Foo=0) returns 0.</span></span><br><span class="line"><span class="comment"># Note that it only returns default value and doesn&#x27;t change variable value.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Declare an array with 6 elements</span></span><br><span class="line">array0=(one two three four five six)</span><br><span class="line"><span class="comment"># Print first element</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$array0</span> <span class="comment"># =&gt; &quot;one&quot;</span></span><br><span class="line"><span class="comment"># Print first element</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array0[0]&#125;</span> <span class="comment"># =&gt; &quot;one&quot;</span></span><br><span class="line"><span class="comment"># Print all elements</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array0[@]&#125;</span> <span class="comment"># =&gt; &quot;one two three four five six&quot;</span></span><br><span class="line"><span class="comment"># Print number of elements</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array0[@]&#125;</span> <span class="comment"># =&gt; &quot;6&quot;</span></span><br><span class="line"><span class="comment"># Print number of characters in third element</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array0[2]&#125;</span> <span class="comment"># =&gt; &quot;5&quot;</span></span><br><span class="line"><span class="comment"># Print 2 elements starting from forth</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array0[@]:3:2&#125;</span> <span class="comment"># =&gt; &quot;four five&quot;</span></span><br><span class="line"><span class="comment"># Print all elements. Each of them on new line.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;array0[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Brace Expansion &#123; &#125;</span></span><br><span class="line"><span class="comment"># Used to generate arbitrary strings</span></span><br><span class="line"><span class="built_in">echo</span> &#123;1..10&#125; <span class="comment"># =&gt; 1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line"><span class="built_in">echo</span> &#123;a..z&#125; <span class="comment"># =&gt; a b c d e f g h i j k l m n o p q r s t u v w x y z</span></span><br><span class="line"><span class="comment"># This will output the range from the start value to the end value</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Built-in variables:</span></span><br><span class="line"><span class="comment"># There are some useful built-in variables, like</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Last program&#x27;s return value: $?&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Script&#x27;s PID: $$&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Number of arguments passed to script: <span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;All arguments passed to script: <span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Script&#x27;s arguments separated into different variables: <span class="variable">$1</span> <span class="variable">$2</span>...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Now that we know how to echo and use variables,</span></span><br><span class="line"><span class="comment"># let&#x27;s learn some of the other basics of bash!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Our current directory is available through the command `pwd`.</span></span><br><span class="line"><span class="comment"># `pwd` stands for &quot;print working directory&quot;.</span></span><br><span class="line"><span class="comment"># We can also use the built-in variable `$PWD`.</span></span><br><span class="line"><span class="comment"># Observe that the following are equivalent:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;I&#x27;m in <span class="subst">$(pwd)</span>&quot;</span> <span class="comment"># execs `pwd` and interpolates output</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;I&#x27;m in <span class="variable">$PWD</span>&quot;</span> <span class="comment"># interpolates the variable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If you get too much output in your terminal, or from a script, the command</span></span><br><span class="line"><span class="comment"># `clear` clears your screen</span></span><br><span class="line">clear</span><br><span class="line"><span class="comment"># Ctrl-L also works for clearing output</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading a value from input:</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;What&#x27;s your name?&quot;</span></span><br><span class="line"><span class="built_in">read</span> Name <span class="comment"># Note that we didn&#x27;t need to declare a new variable</span></span><br><span class="line"><span class="built_in">echo</span> Hello, <span class="variable">$Name</span>!</span><br><span class="line"></span><br><span class="line"><span class="comment"># We have the usual if structure:</span></span><br><span class="line"><span class="comment"># use `man test` for more info about conditionals</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$Name</span> != <span class="variable">$USER</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Your name isn&#x27;t your username&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Your name is your username&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># True if the value of $Name is not equal to the current user&#x27;s login username</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> if $Name is empty, bash sees the above condition as:</span></span><br><span class="line"><span class="keyword">if</span> [ != <span class="variable">$USER</span> ]</span><br><span class="line"><span class="comment"># which is invalid syntax</span></span><br><span class="line"><span class="comment"># so the &quot;safe&quot; way to use potentially empty variables in bash is:</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$Name</span>&quot;</span> != <span class="variable">$USER</span> ] ...</span><br><span class="line"><span class="comment"># which, when $Name is empty, is seen by bash as:</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;&quot;</span> != <span class="variable">$USER</span> ] ...</span><br><span class="line"><span class="comment"># which works as expected</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># There is also conditional execution</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Always executed&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Only executed if first command fails&quot;</span></span><br><span class="line"><span class="comment"># =&gt; Always executed</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Always executed&quot;</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Only executed if first command does NOT fail&quot;</span></span><br><span class="line"><span class="comment"># =&gt; Always executed</span></span><br><span class="line"><span class="comment"># =&gt; Only executed if first command does NOT fail</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># To use &amp;&amp; and || with if statements, you need multiple pairs of square brackets:</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$Name</span>&quot;</span> == <span class="string">&quot;Steve&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$Age</span>&quot;</span> -eq 15 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;This will run if <span class="variable">$Name</span> is Steve AND <span class="variable">$Age</span> is 15.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$Name</span>&quot;</span> == <span class="string">&quot;Daniya&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$Name</span>&quot;</span> == <span class="string">&quot;Zach&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;This will run if <span class="variable">$Name</span> is Daniya OR Zach.&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># There is also the `=~` operator, which tests a string against a Regex pattern:</span></span><br><span class="line">Email=me@example.com</span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$Email</span>&quot;</span> =~ [a-z]+@[a-z]&#123;2,&#125;\.(com|net|org) ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Valid email!&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Note that =~ only works within double [[ ]] square brackets,</span></span><br><span class="line"><span class="comment"># which are subtly different from single [ ].</span></span><br><span class="line"><span class="comment"># See https://www.gnu.org/software/bash/manual/bashref.html#Conditional-Constructs for more on this.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redefine command `ping` as alias to send only 5 packets</span></span><br><span class="line"><span class="built_in">alias</span> ping=<span class="string">&#x27;ping -c 5&#x27;</span></span><br><span class="line"><span class="comment"># Escape the alias and use command with this name instead</span></span><br><span class="line">\ping 192.168.1.1</span><br><span class="line"><span class="comment"># Print all aliases</span></span><br><span class="line"><span class="built_in">alias</span> -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># Expressions are denoted with the following format:</span></span><br><span class="line"><span class="built_in">echo</span> $(( <span class="number">10</span> + <span class="number">5</span> )) <span class="comment"># =&gt; 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unlike other programming languages, bash is a shell so it works in the context</span></span><br><span class="line"><span class="comment"># of a current directory. You can list files and directories in the current</span></span><br><span class="line"><span class="comment"># directory with the ls command:</span></span><br><span class="line">ls <span class="comment"># Lists the files and subdirectories contained in the current directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This command has options that control its execution:</span></span><br><span class="line">ls -l <span class="comment"># Lists every file and directory on a separate line</span></span><br><span class="line">ls -t <span class="comment"># Sorts the directory contents by last-modified date (descending)</span></span><br><span class="line">ls -R <span class="comment"># Recursively `ls` this directory and all of its subdirectories</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Results of the previous command can be passed to the next command as input.</span></span><br><span class="line"><span class="comment"># The `grep` command filters the input with provided patterns.</span></span><br><span class="line"><span class="comment"># That&#x27;s how we can list .txt files in the current directory:</span></span><br><span class="line">ls -l | grep <span class="string">&quot;\.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `cat` to print files to stdout:</span></span><br><span class="line">cat file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># We can also read the file using `cat`:</span></span><br><span class="line">Contents=$(cat file.txt)</span><br><span class="line"><span class="comment"># &quot;\n&quot; prints a new line character</span></span><br><span class="line"><span class="comment"># &quot;-e&quot; to interpret the newline escape characters as escape characters</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;START OF FILE\n<span class="variable">$Contents</span>\nEND OF FILE&quot;</span></span><br><span class="line"><span class="comment"># =&gt; START OF FILE</span></span><br><span class="line"><span class="comment"># =&gt; [contents of file.txt]</span></span><br><span class="line"><span class="comment"># =&gt; END OF FILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `cp` to copy files or directories from one place to another.</span></span><br><span class="line"><span class="comment"># `cp` creates NEW versions of the sources,</span></span><br><span class="line"><span class="comment"># so editing the copy won&#x27;t affect the original (and vice versa).</span></span><br><span class="line"><span class="comment"># Note that it will overwrite the destination if it already exists.</span></span><br><span class="line">cp srcFile.txt clone.txt</span><br><span class="line">cp -r srcDirectory/ dst/ <span class="comment"># recursively copy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Look into `scp` or `sftp` if you plan on exchanging files between computers.</span></span><br><span class="line"><span class="comment"># `scp` behaves very similarly to `cp`.</span></span><br><span class="line"><span class="comment"># `sftp` is more interactive.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `mv` to move files or directories from one place to another.</span></span><br><span class="line"><span class="comment"># `mv` is similar to `cp`, but it deletes the source.</span></span><br><span class="line"><span class="comment"># `mv` is also useful for renaming files!</span></span><br><span class="line">mv s0urc3.txt dst.txt <span class="comment"># sorry, l33t hackers...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Since bash works in the context of a current directory, you might want to</span></span><br><span class="line"><span class="comment"># run your command in some other directory. We have cd for changing location:</span></span><br><span class="line"><span class="built_in">cd</span> ~    <span class="comment"># change to home directory</span></span><br><span class="line"><span class="built_in">cd</span>      <span class="comment"># also goes to home directory</span></span><br><span class="line"><span class="built_in">cd</span> ..   <span class="comment"># go up one directory</span></span><br><span class="line">        <span class="comment"># (^^say, from /home/username/Downloads to /home/username)</span></span><br><span class="line"><span class="built_in">cd</span> /home/username/Documents   <span class="comment"># change to specified directory</span></span><br><span class="line"><span class="built_in">cd</span> ~/Documents/..    <span class="comment"># still in home directory..isn&#x27;t it??</span></span><br><span class="line"><span class="built_in">cd</span> -    <span class="comment"># change to last directory</span></span><br><span class="line"><span class="comment"># =&gt; /home/username/Documents</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use subshells to work across directories</span></span><br><span class="line">(<span class="built_in">echo</span> <span class="string">&quot;First, I&#x27;m here: <span class="variable">$PWD</span>&quot;</span>) &amp;&amp; (<span class="built_in">cd</span> someDir; <span class="built_in">echo</span> <span class="string">&quot;Then, I&#x27;m here: <span class="variable">$PWD</span>&quot;</span>)</span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># still in first directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `mkdir` to create new directories.</span></span><br><span class="line">mkdir myNewDir</span><br><span class="line"><span class="comment"># The `-p` flag causes new intermediate directories to be created as necessary.</span></span><br><span class="line">mkdir -p myNewDir/with/intermediate/directories</span><br><span class="line"><span class="comment"># if the intermediate directories didn&#x27;t already exist, running the above</span></span><br><span class="line"><span class="comment"># command without the `-p` flag would return an error</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can redirect command input and output (stdin, stdout, and stderr).</span></span><br><span class="line"><span class="comment"># Read from stdin until ^EOF$ and overwrite hello.py with the lines</span></span><br><span class="line"><span class="comment"># between &quot;EOF&quot;:</span></span><br><span class="line">cat &gt; hello.py &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">#!/usr/bin/env python</span></span><br><span class="line"><span class="string">from __future__ import print_function</span></span><br><span class="line"><span class="string">import sys</span></span><br><span class="line"><span class="string">print(&quot;#stdout&quot;, file=sys.stdout)</span></span><br><span class="line"><span class="string">print(&quot;#stderr&quot;, file=sys.stderr)</span></span><br><span class="line"><span class="string">for line in sys.stdin:</span></span><br><span class="line"><span class="string">    print(line, file=sys.stdout)</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment"># Variables will be expanded if the first &quot;EOF&quot; is not quoted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the hello.py Python script with various stdin, stdout, and</span></span><br><span class="line"><span class="comment"># stderr redirections:</span></span><br><span class="line">python hello.py &lt; <span class="string">&quot;input.in&quot;</span> <span class="comment"># pass input.in as input to the script</span></span><br><span class="line"></span><br><span class="line">python hello.py &gt; <span class="string">&quot;output.out&quot;</span> <span class="comment"># redirect output from the script to output.out</span></span><br><span class="line"></span><br><span class="line">python hello.py 2&gt; <span class="string">&quot;error.err&quot;</span> <span class="comment"># redirect error output to error.err</span></span><br><span class="line"></span><br><span class="line">python hello.py &gt; <span class="string">&quot;output-and-error.log&quot;</span> 2&gt;&amp;1</span><br><span class="line"><span class="comment"># redirect both output and errors to output-and-error.log</span></span><br><span class="line"></span><br><span class="line">python hello.py &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"><span class="comment"># redirect all output and errors to the black hole, /dev/null, i.e., no output</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The output error will overwrite the file if it exists,</span></span><br><span class="line"><span class="comment"># if you want to append instead, use &quot;&gt;&gt;&quot;:</span></span><br><span class="line">python hello.py &gt;&gt; <span class="string">&quot;output.out&quot;</span> 2&gt;&gt; <span class="string">&quot;error.err&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Overwrite output.out, append to error.err, and count lines:</span></span><br><span class="line">info bash <span class="string">&#x27;Basic Shell Features&#x27;</span> <span class="string">&#x27;Redirections&#x27;</span> &gt; output.out 2&gt;&gt; error.err</span><br><span class="line">wc -l output.out error.err</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run a command and print its file descriptor (e.g. /dev/fd/123)</span></span><br><span class="line"><span class="comment"># see: man fd</span></span><br><span class="line"><span class="built_in">echo</span> &lt;(<span class="built_in">echo</span> <span class="string">&quot;#helloworld&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Overwrite output.out with &quot;#helloworld&quot;:</span></span><br><span class="line">cat &gt; output.out &lt;(<span class="built_in">echo</span> <span class="string">&quot;#helloworld&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#helloworld&quot;</span> &gt; output.out</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#helloworld&quot;</span> | cat &gt; output.out</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#helloworld&quot;</span> | tee output.out &gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cleanup temporary files verbosely (add &#x27;-i&#x27; for interactive)</span></span><br><span class="line"><span class="comment"># WARNING: `rm` commands cannot be undone</span></span><br><span class="line">rm -v output.out error.err output-and-error.log</span><br><span class="line">rm -r tempDir/ <span class="comment"># recursively delete</span></span><br><span class="line"><span class="comment"># You can install the `trash-cli` Python package to have `trash`</span></span><br><span class="line"><span class="comment"># which puts files in the system trash and doesn&#x27;t delete them directly</span></span><br><span class="line"><span class="comment"># see https://pypi.org/project/trash-cli/ if you want to be careful</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Commands can be substituted within other commands using $( ):</span></span><br><span class="line"><span class="comment"># The following command displays the number of files and directories in the</span></span><br><span class="line"><span class="comment"># current directory.</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;There are <span class="subst">$(ls | wc -l)</span> items here.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The same can be done using backticks `` but they can&#x27;t be nested -</span></span><br><span class="line"><span class="comment"># the preferred way is to use $( ).</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;There are `ls | wc -l` items here.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bash uses a `case` statement that works similarly to switch in Java and C++:</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$Variable</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    <span class="comment"># List patterns for the conditions you want to meet</span></span><br><span class="line">    0) <span class="built_in">echo</span> <span class="string">&quot;There is a zero.&quot;</span>;;</span><br><span class="line">    1) <span class="built_in">echo</span> <span class="string">&quot;There is a one.&quot;</span>;;</span><br><span class="line">    *) <span class="built_in">echo</span> <span class="string">&quot;It is not null.&quot;</span>;;  <span class="comment"># match everything</span></span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># `for` loops iterate for as many arguments given:</span></span><br><span class="line"><span class="comment"># The contents of $Variable is printed three times.</span></span><br><span class="line"><span class="keyword">for</span> Variable <span class="keyword">in</span> &#123;1..3&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$Variable</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Or write it the &quot;traditional for loop&quot; way:</span></span><br><span class="line"><span class="keyword">for</span> ((a=1; a &lt;= 3; a++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># They can also be used to act on files..</span></span><br><span class="line"><span class="comment"># This will run the command `cat` on file1 and file2</span></span><br><span class="line"><span class="keyword">for</span> Variable <span class="keyword">in</span> file1 file2</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    cat <span class="string">&quot;<span class="variable">$Variable</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ..or the output from a command</span></span><br><span class="line"><span class="comment"># This will `cat` the output from `ls`.</span></span><br><span class="line"><span class="keyword">for</span> Output <span class="keyword">in</span> $(ls)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    cat <span class="string">&quot;<span class="variable">$Output</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bash can also accept patterns, like this to `cat`</span></span><br><span class="line"><span class="comment"># all the Markdown files in current directory</span></span><br><span class="line"><span class="keyword">for</span> Output <span class="keyword">in</span> ./*.markdown</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    cat <span class="string">&quot;<span class="variable">$Output</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while loop:</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="literal">true</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;loop body here...&quot;</span></span><br><span class="line">    <span class="built_in">break</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># =&gt; loop body here...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can also define functions</span></span><br><span class="line"><span class="comment"># Definition:</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Arguments work just like script arguments: <span class="variable">$@</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;And: <span class="variable">$1</span> <span class="variable">$2</span>...&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;This is a function&quot;</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Call the function `foo` with two arguments, arg1 and arg2:</span></span><br><span class="line">foo arg1 arg2</span><br><span class="line"><span class="comment"># =&gt; Arguments work just like script arguments: arg1 arg2</span></span><br><span class="line"><span class="comment"># =&gt; And: arg1 arg2...</span></span><br><span class="line"><span class="comment"># =&gt; This is a function</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># or simply</span></span><br><span class="line"><span class="function"><span class="title">bar</span></span> ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Another way to declare functions!&quot;</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Call the function `bar` with no arguments:</span></span><br><span class="line">bar <span class="comment"># =&gt; Another way to declare functions!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calling your function</span></span><br><span class="line">foo <span class="string">&quot;My name is&quot;</span> <span class="variable">$Name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># There are a lot of useful commands you should learn:</span></span><br><span class="line"><span class="comment"># prints last 10 lines of file.txt</span></span><br><span class="line">tail -n 10 file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># prints first 10 lines of file.txt</span></span><br><span class="line">head -n 10 file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort file.txt&#x27;s lines</span></span><br><span class="line">sort file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># report or omit repeated lines, with -d it reports them</span></span><br><span class="line">uniq -d file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># prints only the first column before the &#x27;,&#x27; character</span></span><br><span class="line">cut -d <span class="string">&#x27;,&#x27;</span> -f 1 file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># replaces every occurrence of &#x27;okay&#x27; with &#x27;great&#x27; in file.txt</span></span><br><span class="line"><span class="comment"># (regex compatible)</span></span><br><span class="line">sed -i <span class="string">&#x27;s/okay/great/g&#x27;</span> file.txt</span><br><span class="line"><span class="comment"># be aware that this -i flag means that file.txt will be changed</span></span><br><span class="line"><span class="comment"># -i or --in-place erase the input file (use --in-place=.backup to keep a back-up)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print to stdout all lines of file.txt which match some regex</span></span><br><span class="line"><span class="comment"># The example prints lines which begin with &quot;foo&quot; and end in &quot;bar&quot;</span></span><br><span class="line">grep <span class="string">&quot;^foo.*bar$&quot;</span> file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># pass the option &quot;-c&quot; to instead print the number of lines matching the regex</span></span><br><span class="line">grep -c <span class="string">&quot;^foo.*bar$&quot;</span> file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Other useful options are:</span></span><br><span class="line">grep -r <span class="string">&quot;^foo.*bar$&quot;</span> someDir/ <span class="comment"># recursively `grep`</span></span><br><span class="line">grep -n <span class="string">&quot;^foo.*bar$&quot;</span> file.txt <span class="comment"># give line numbers</span></span><br><span class="line">grep -rI <span class="string">&quot;^foo.*bar$&quot;</span> someDir/ <span class="comment"># recursively `grep`, but ignore binary files</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># perform the same initial search, but filter out the lines containing &quot;baz&quot;</span></span><br><span class="line">grep <span class="string">&quot;^foo.*bar$&quot;</span> file.txt | grep -v <span class="string">&quot;baz&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if you literally want to search for the string,</span></span><br><span class="line"><span class="comment"># and not the regex, use `fgrep` (or `grep -F`)</span></span><br><span class="line">fgrep <span class="string">&quot;foobar&quot;</span> file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># The `trap` command allows you to execute a command whenever your script</span></span><br><span class="line"><span class="comment"># receives a signal. Here, `trap` will execute `rm` if it receives any of the</span></span><br><span class="line"><span class="comment"># three listed signals.</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;rm <span class="variable">$TEMP_FILE</span>; exit&quot;</span> SIGHUP SIGINT SIGTERM</span><br><span class="line"></span><br><span class="line"><span class="comment"># `sudo` is used to perform commands as the superuser</span></span><br><span class="line"><span class="comment"># usually it will ask interactively the password of superuser</span></span><br><span class="line">NAME1=$(whoami)</span><br><span class="line">NAME2=$(sudo whoami)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Was <span class="variable">$NAME1</span>, then became more powerful <span class="variable">$NAME2</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read Bash shell built-ins documentation with the bash `help` built-in:</span></span><br><span class="line"><span class="built_in">help</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">help</span></span><br><span class="line"><span class="built_in">help</span> <span class="keyword">for</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">return</span></span><br><span class="line"><span class="built_in">help</span> <span class="built_in">source</span></span><br><span class="line"><span class="built_in">help</span> .</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read Bash manpage documentation with `man`</span></span><br><span class="line">apropos bash</span><br><span class="line">man 1 bash</span><br><span class="line">man bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read info documentation with `info` (`?` for help)</span></span><br><span class="line">apropos info | grep <span class="string">&#x27;^info.*(&#x27;</span></span><br><span class="line">man info</span><br><span class="line">info info</span><br><span class="line">info 5 info</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read bash info documentation:</span></span><br><span class="line">info bash</span><br><span class="line">info bash <span class="string">&#x27;Bash Features&#x27;</span></span><br><span class="line">info bash 6</span><br><span class="line">info --apropos bash</span><br></pre></td></tr></table></figure>

<h2 id="Tips-amp-amp-Tracks"><a href="#Tips-amp-amp-Tracks" class="headerlink" title="Tips &amp;&amp; Tracks"></a>Tips &amp;&amp; Tracks</h2><ul>
<li>set<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; <span class="builtin-name">set</span> 命令修改Shell环境的运行参数</span><br><span class="line">  -x: <span class="builtin-name">Print</span> a trace of<span class="built_in"> simple </span>commands</span><br><span class="line">  Using <span class="string">&#x27;+&#x27;</span> rather than <span class="string">&#x27;-&#x27;</span> causes these options <span class="keyword">to</span> be turned off.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h2><ul>
<li><a href="https://devhints.io/bash">Bash scripting cheatsheet</a></li>
<li><a href="https://linuxhint.com/bash_operator_examples/">74 Bash Operators Examples</a></li>
</ul>
]]></content>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust vs. Go</title>
    <url>/2021/10/09/Rust-vs-Go/</url>
    <content><![CDATA[<h2 id="When-to-use-Rust-and-when-to-use-Go"><a href="#When-to-use-Rust-and-when-to-use-Go" class="headerlink" title="When to use Rust and when to use Go"></a>When to use Rust and when to use Go</h2><span id="more"></span>
<figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">Go has a stronger focus on building web APIs and small services that can scale endlessly, especially <span class="keyword">with</span> the power <span class="keyword">of</span> goroutines.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span> <span class="javascript">Rust works well <span class="keyword">for</span> processing large amounts <span class="keyword">of</span> data and other CPU-intensive operations, such <span class="keyword">as</span> executing algorithms.</span></span><br></pre></td></tr></table></figure>

<h3 id="Gettting-started-Rust"><a href="#Gettting-started-Rust" class="headerlink" title="Gettting started Rust"></a>Gettting started Rust</h3><blockquote>
<p>Quickly set up a Rust development environment and write a small app!</p>
</blockquote>
<ul>
<li>Rustup<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">the</span> Rust installer <span class="keyword">and</span> <span class="built_in">version</span> management tool</span><br><span class="line">➜ curl <span class="comment">--proto &#x27;=https&#x27; --tlsv1.2 -sSf https://sh.rustup.rs | sh</span></span><br><span class="line"></span><br><span class="line">info: downloading installer</span><br><span class="line"></span><br><span class="line">Welcome <span class="keyword">to</span> Rust!</span><br><span class="line"></span><br><span class="line">This will download <span class="keyword">and</span> install <span class="keyword">the</span> official compiler <span class="keyword">for</span> <span class="keyword">the</span> Rust</span><br><span class="line">programming language, <span class="keyword">and</span> <span class="keyword">its</span> package manager, Cargo.</span><br><span class="line"></span><br><span class="line">Rustup metadata <span class="keyword">and</span> toolchains will be installed <span class="keyword">into</span> <span class="keyword">the</span> Rustup</span><br><span class="line">home directory, located <span class="keyword">at</span>:</span><br><span class="line"></span><br><span class="line">  /home/chyiyaqing/.rustup</span><br><span class="line"></span><br><span class="line">This can be modified <span class="keyword">with</span> <span class="keyword">the</span> RUSTUP_HOME environment variable.</span><br><span class="line"></span><br><span class="line">The Cargo home directory located <span class="keyword">at</span>:</span><br><span class="line"></span><br><span class="line">  /home/chyiyaqing/.cargo</span><br><span class="line"></span><br><span class="line">This can be modified <span class="keyword">with</span> <span class="keyword">the</span> CARGO_HOME environment variable.</span><br><span class="line"></span><br><span class="line">The cargo, rustc, rustup <span class="keyword">and</span> other commands will be added <span class="keyword">to</span></span><br><span class="line">Cargo&#x27;s bin directory, located <span class="keyword">at</span>:</span><br><span class="line"></span><br><span class="line">  /home/chyiyaqing/.cargo/bin</span><br><span class="line"></span><br><span class="line">This path will <span class="keyword">then</span> be added <span class="keyword">to</span> your PATH environment variable <span class="keyword">by</span></span><br><span class="line">modifying <span class="keyword">the</span> profile files located <span class="keyword">at</span>:</span><br><span class="line"></span><br><span class="line">  /home/chyiyaqing/.profile</span><br><span class="line">  /home/chyiyaqing/.bashrc</span><br><span class="line">  /home/chyiyaqing/.zshenv</span><br><span class="line"></span><br><span class="line">You can uninstall <span class="keyword">at</span> any <span class="built_in">time</span> <span class="keyword">with</span> rustup self uninstall <span class="keyword">and</span></span><br><span class="line">these changes will be reverted.</span><br><span class="line"></span><br><span class="line">Current installation options:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   default host triple: x86_64-unknown-linux-gnu</span><br><span class="line">     default toolchain: stable (default)</span><br><span class="line">               profile: default</span><br><span class="line">  modify PATH variable: yes</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) Proceed <span class="keyword">with</span> installation (default)</span><br><span class="line"><span class="number">2</span>) Customize installation</span><br><span class="line"><span class="number">3</span>) Cancel installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># rustup: Toolchain management</span></span><br><span class="line">  - rustup update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cargo: the Rust build tool and package manager, used to install dependencies and manage the building, testing, running, and publishing of your project.</span></span><br><span class="line">  - cargo build : build your project</span><br><span class="line">  - cargo <span class="built_in">run</span>: <span class="built_in">run</span> your project</span><br><span class="line">  - cargo test: test your project</span><br><span class="line">  - cargo doc: build documentation <span class="keyword">for</span> your project</span><br><span class="line">  - cargo publish: publish a library <span class="keyword">to</span> crates.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># rustc: the Rust compiler</span></span><br><span class="line">  &gt; rustc <span class="keyword">is</span> invoked indirectly <span class="keyword">by</span> <span class="keyword">the</span> **cargo build** <span class="keyword">or</span> **cargo <span class="built_in">run</span>** commands.</span><br></pre></td></tr></table></figure></li>
<li>Toolchain overview<br><img src="/misc/images/rust-toolchain-overview.png" alt="Rust toolchain and ecosystem"><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 cargo          -- package manager</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 cargo-clippy</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 cargo-fmt</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 cargo-miri</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 clippy-driver</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 rls</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 rustc          -- rust compiler</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 rustdoc</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 rustfmt</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 rust-gdb</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 rust-lldb</span><br><span class="line">-rwxr-xr-x<span class="number"> 12 </span>chyiyaqing chyiyaqing 15M Oct <span class="number"> 9 </span>09:49 rustup         -- toolchain installer</span><br><span class="line"></span><br><span class="line">creates.io                                                          -- package repository</span><br><span class="line">docs.rs                                                             -- create documentation</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><ul>
<li><p>Go</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; Go take advantage <span class="keyword">of</span> the concurrency the <span class="keyword">language</span> offers. The <span class="keyword">language</span> provides goroutines that <span class="keyword">enable</span> run <span class="keyword">function</span> <span class="keyword">as</span> subprocesses.</span><br><span class="line">&gt; Go concurrency model allows <span class="keyword">to</span> deploy workloads across multiple CPU cores, making it efficient <span class="keyword">language</span></span><br></pre></td></tr></table></figure></li>
<li><p>Rust</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; Rust <span class="keyword">is</span> more efficient <span class="keyword">in</span> execution algorithms <span class="keyword">and</span> resource-<span class="built_in">int</span>ensive operations.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h3><ul>
<li><p>Go</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt; Go support concurrency.</span><br><span class="line">&gt; For example, yo<span class="string">u&#x27;re running a web server that handles API requests. use Go&#x27;</span>s goroutines to run each request <span class="keyword">as</span> a subprocess, maximizing efficiency by offloading tasks to <span class="built_in">all</span> available CPU cores.</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>Rust</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>Channel</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&gt; <span class="selector-tag">A</span> channel helps transfer <span class="selector-tag">a</span> message <span class="selector-tag">from</span> one thread <span class="selector-tag">to</span> another.</span><br></pre></td></tr></table></figure></li>
<li><p>Lock</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; Data <span class="keyword">is</span> <span class="keyword">only</span> accessible <span class="keyword">when</span> the <span class="keyword">lock</span> <span class="keyword">is</span> held. Rust relies <span class="keyword">on</span> the principle <span class="keyword">of</span> locking data <span class="keyword">instead</span> <span class="keyword">of</span> cod</span><br></pre></td></tr></table></figure></li>
<li><p>Memory safety</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul>
<li><a href="https://blog.logrocket.com/getting-up-to-speed-with-rust/">Getting up to speed with Rust</a></li>
<li><a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/rust-go.html">基准测试</a></li>
<li><a href="https://bitbucket.org/blog/why-rust">Bitbucket</a></li>
<li><a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/rust-go.html">bechmarksgame</a></li>
<li><a href="https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html">可证明正确的并发</a></li>
<li><a href="https://doc.rust-lang.org/stable/rust-by-example/std_misc/channels.html">通道</a></li>
<li><a href="https://doc.rust-lang.org/std/primitive.pointer.html">指针</a></li>
<li><a href="https://doc.rust-lang.org/std/sync/struct.Mutex.html">锁</a></li>
<li><a href="https://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html">使用Rust进行无所畏惧的并发</a></li>
<li><a href="https://en.wikipedia.org/wiki/Type_safety">类型安全</a></li>
<li><a href="https://kristoff.it/blog/why-go-and-not-rust/">Loris Cro</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>In Memory of Steve Jobs</title>
    <url>/2021/10/10/In-Memory-of-Steve-Jobs/</url>
    <content><![CDATA[<h1 id="Steve-Jobs"><a href="#Steve-Jobs" class="headerlink" title="Steve Jobs"></a>Steve Jobs</h1><span id="more"></span>
<p><img src="/misc/images/steve-jobs/In-memory-of-Steve-Jobs.jpg" alt="Steve Jobs"></p>
]]></content>
  </entry>
  <entry>
    <title>Vim Tips &amp; Tracks</title>
    <url>/2021/10/10/Vim-Tips-Tracks/</url>
    <content><![CDATA[<h1 id="Why-I-Still-Use-Vim"><a href="#Why-I-Still-Use-Vim" class="headerlink" title="Why I Still Use Vim"></a>Why I Still Use Vim</h1><ul>
<li>Vim is exists on all Unix systems, support all file formats and programming languages</li>
<li>Mouse free navigation</li>
<li>Vim is very light-weight and fast.</li>
<li>Vim is highly configurable. (~/.vimrc)</li>
<li>Memory Usage Low</li>
<li>Startup Time short</li>
</ul>
<span id="more"></span>

<h2 id="Installing"><a href="#Installing" class="headerlink" title="Installing"></a>Installing</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&gt; Since VIM comes <span class="keyword">pre</span>-installed <span class="keyword">on</span> <span class="keyword">a</span> <span class="keyword">number</span> of *nix systems, <span class="keyword">let</span><span class="string">&#x27;s first check to see if it&#x27;</span>s installed</span><br><span class="line">  $ <span class="keyword">vim</span> --<span class="keyword">version</span></span><br><span class="line"></span><br><span class="line"># *NIX/Linux (Debian <span class="built_in">or</span> Ubuntu)</span><br><span class="line">  $ sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> <span class="keyword">vim</span>-tiny</span><br><span class="line">  $ sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br><span class="line">  $ sudo apt-<span class="built_in">get</span> install <span class="keyword">vim</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>VIM Extensions</p>
<ul>
<li>vim-plug<blockquote>
<p>Minimalist Vim Plugin Manager</p>
</blockquote>
</li>
</ul>
<figure class="highlight pony"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot; junegunn/vim-plug -- 🌺  Minimalist Vim Plugin Manager</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span><span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> empty(glob(<span class="string">&#x27;~/.vim/autoload/plug.vim&#x27;</span>))</span><br><span class="line">  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs</span><br><span class="line">   \ https:<span class="comment">//raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span></span><br><span class="line">  autocmd <span class="type">VimEnter</span> * <span class="type">PlugInstall</span> --sync | source $<span class="type">MYVIMRC</span></span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; vim-plug configuration</span></span><br><span class="line"><span class="string">&quot;</span> <span class="type">For</span> <span class="type">Mac</span>/<span class="type">Linux</span> users</span><br><span class="line"><span class="string">&quot; Plugins will be download under the specified directory.</span></span><br><span class="line"><span class="string">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span><span class="type">List</span> ends here. <span class="type">Plugins</span> become visible to <span class="type">Vim</span> after <span class="literal">this</span> call.</span><br><span class="line">call plug#<span class="keyword">end</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Vim-Tips"><a href="#Vim-Tips" class="headerlink" title="Vim Tips"></a>Vim Tips</h2><ul>
<li><strong>Pro Tip #1</strong>: Make sure to utilize tab completion to find files after typing</li>
<li><strong>Pro Tip #2</strong>: Specify different areas of the screen where the splits should occur by adding the following lines to the .vimrc file<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> splitbelow</span><br><span class="line"><span class="builtin-name">set</span> splitright</span><br></pre></td></tr></table></figure></li>
<li><strong>Pro Tip #3</strong>: Jump between splits with just one key combination<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">&quot; split navigations</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-J&gt;</span> <span class="symbol">&lt;C-W&gt;</span><span class="symbol">&lt;C-J&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-K&gt;</span> <span class="symbol">&lt;C-W&gt;</span><span class="symbol">&lt;C-K&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-L&gt;</span> <span class="symbol">&lt;C-W&gt;</span><span class="symbol">&lt;C-L&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-H&gt;</span> <span class="symbol">&lt;C-W&gt;</span><span class="symbol">&lt;C-H&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><strong>Pro Tip #4</strong>: Buffers<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># :<span class="keyword">ls</span> - <span class="keyword">to</span> <span class="keyword">list</span> <span class="keyword">all</span> <span class="keyword">buffers</span></span><br><span class="line"># :<span class="keyword">b</span> &lt;<span class="keyword">buffer</span> <span class="keyword">number</span>&gt; - pick the <span class="keyword">buffer</span> immediately</span><br></pre></td></tr></table></figure></li>
<li><strong>Pro Tip #5</strong>: Code Folding<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># Collapse (<span class="built_in">or</span> <span class="keyword">fold</span>) methods <span class="built_in">and</span> classes</span><br><span class="line"><span class="comment">&quot; Enable folding</span></span><br><span class="line"><span class="keyword">set</span> foldmethod=<span class="built_in">indent</span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">foldlevel</span>=<span class="number">99</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Enable folding with the spacebar</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;space&gt;</span> za</span><br><span class="line"></span><br><span class="line"># VimL Script</span><br><span class="line">plug <span class="string">&quot;tmhedberg/SimpylFold&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:SimpylFold_docstring_preview</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><strong>Pro Tip #6</strong>: PEP 8<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="comment">&quot; Add the proper PEP 8 indentation</span></span><br><span class="line"><span class="keyword">au</span> BufNewFile,BufRead *.<span class="keyword">py</span></span><br><span class="line">    \ <span class="keyword">set</span> tabstop=<span class="number">4</span></span><br><span class="line">    \ <span class="keyword">set</span> softtabstop=<span class="number">4</span></span><br><span class="line">    \ <span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></span><br><span class="line">    \ <span class="keyword">set</span> textwidth=<span class="number">79</span></span><br><span class="line">    \ <span class="keyword">set</span> expandtab</span><br><span class="line">    \ <span class="keyword">set</span> autoindent</span><br><span class="line">    \ <span class="keyword">set</span> fileformat=unix</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; full stack development</span></span><br><span class="line"><span class="keyword">au</span> BufNewFile,BufRead *.js, *.html, *.css</span><br><span class="line">    \ <span class="keyword">set</span> tabstop=<span class="number">2</span></span><br><span class="line">    \ <span class="keyword">set</span> softtabstop=<span class="number">2</span></span><br><span class="line">    \ <span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li><strong>Pro Tip #7</strong>: Flagging Unnecessary Whitespace<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">au</span> BufRead,BufNewFile <span class="regexp">*.py</span>,<span class="regexp">*.pyw</span>,<span class="regexp">*.c</span>,<span class="regexp">*.h</span> match BadWhitespace /\s\+$/</span><br></pre></td></tr></table></figure></li>
<li><strong>Pro Tip #8</strong>: UTF-8 Support<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> <span class="attribute">encoding</span>=utf-8</span><br></pre></td></tr></table></figure></li>
<li><strong>Pro Tip #9</strong>: Syntax Checking/Highlighting<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">check</span> syntax <span class="keyword">on</span> <span class="keyword">each</span> save <span class="keyword">with</span> the syntastic <span class="keyword">extension</span></span><br><span class="line">Plug <span class="string">&#x27;vim-syntastic/syntastic&#x27;</span></span><br><span class="line"></span><br><span class="line"># <span class="keyword">add</span> PEP <span class="number">8</span> checking <span class="keyword">with</span> this nifty little plugin</span><br><span class="line">Plug <span class="string">&#x27;nvie/vim-flake8&#x27;</span></span><br><span class="line"></span><br><span class="line">let python_highlight_all=<span class="number">1</span></span><br><span class="line">syntax <span class="keyword">on</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="File-Browsing"><a href="#File-Browsing" class="headerlink" title="File Browsing"></a>File Browsing</h3><ul>
<li>NERDTree<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; File <span class="keyword">system</span> explorer <span class="keyword">for</span> the Vim. It enables you <span class="keyword">to</span> visually browse complex directory hierarchies, quickly <span class="keyword">open</span> files <span class="keyword">for</span> reading <span class="keyword">or</span> editing, <span class="keyword">and</span> <span class="keyword">perform</span> basic file <span class="keyword">system</span> operations.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Super-Searching"><a href="#Super-Searching" class="headerlink" title="Super Searching"></a>Super Searching</h3><ul>
<li>ctrlP<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Plug <span class="string">&#x27;kien/ctrlp.vim&#x27;</span></span><br><span class="line"></span><br><span class="line">Ctrl + P : <span class="keyword">enable</span> the <span class="keyword">search</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Using-Vim-for-Python-Development"><a href="#Using-Vim-for-Python-Development" class="headerlink" title="Using Vim for Python Development"></a>Using Vim for Python Development</h2><ul>
<li>Verifying VIM Install<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">Make sure have installed VIM &gt; <span class="number">7.3</span> <span class="keyword">with</span> Python support.</span><br><span class="line"></span><br><span class="line">  :python3 <span class="keyword">import</span> sys; <span class="built_in">print</span>(sys.version)</span><br><span class="line">  <span class="number">3.8</span><span class="number">.10</span> (<span class="keyword">default</span>, Sep <span class="number">28</span> <span class="number">2021</span>, <span class="number">16</span>:<span class="number">10</span>:<span class="number">42</span>)</span><br><span class="line">  [GCC <span class="number">9.3</span><span class="number">.0</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Using-Vim-for-Go-Development"><a href="#Using-Vim-for-Go-Development" class="headerlink" title="Using Vim for Go Development"></a>Using Vim for Go Development</h2><ul>
<li>vim-go<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; Go development plugin <span class="keyword">for</span> Vim. It has everything you need <span class="keyword">for</span> Go development.</span><br><span class="line"></span><br><span class="line">:GoBuild - Compile package</span><br><span class="line">:GoInstall - Install <span class="keyword">it</span></span><br><span class="line">:GoTest - Test <span class="keyword">it</span></span><br><span class="line">:GoRun - Quickly execute current <span class="built_in">file</span></span><br><span class="line">:GoDef - Go <span class="keyword">to</span> symbol/declaration</span><br><span class="line">:GoDoc - look up documentation</span><br><span class="line">:GoDocBrowser -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Auto Completion</span></span><br><span class="line">  &gt; It&#x27;s really hard <span class="keyword">to</span> code <span class="keyword">without</span> auto-completion <span class="keyword">and</span> <span class="keyword">not</span> being able <span class="keyword">to</span> going <span class="keyword">to</span> <span class="keyword">the</span> definition.</span><br><span class="line">  &gt; Vim-go use **gopls** <span class="keyword">for</span> completion etc. Completion(Ctrl-x Ctrl-p) <span class="keyword">is</span> enabled <span class="keyword">by</span> default via omnifunc.</span><br><span class="line"></span><br><span class="line">  <span class="comment"># check if vim-go has been configured correctly for autocompletetion</span></span><br><span class="line">  :verbose setlocal omnifunc?</span><br><span class="line"></span><br><span class="line">  <span class="comment"># autocomplete prompt to appear automatically whenever you press the dot(.)</span></span><br><span class="line">  au filetype go inoremap &lt;buffer&gt; . .&lt;C-x&gt;&lt;C-o&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Vim-and-Rust"><a href="#Vim-and-Rust" class="headerlink" title="Vim and Rust"></a>Vim and Rust</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://www.amazon.com/Practical-Vim-Edit-Speed-Thought/dp/1680501275/ref=as_li_ss_tl?ie=UTF8&qid=1501817867&sr=8-3&keywords=vim&linkCode=sl1&tag=caspbeye-20&linkId=6c394064b4e6f05b198e68c64a6f4d76">Practical Vim - Edit Text at the Speed of Thought</a></li>
<li><a href="http://vimcasts.org/">VIM CASTS.org</a></li>
<li><a href="https://realpython.com/vim-and-python-a-match-made-in-heaven/">VIM and Python - A Match Made in Heaven</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>XMind Intro</title>
    <url>/2021/10/10/XMind-Intro/</url>
    <content><![CDATA[<h1 id="XMind"><a href="#XMind" class="headerlink" title="XMind"></a>XMind</h1><blockquote>
<p>XMind是风靡全球的思维导图和头脑风暴软件.作为学习、工作、生活的效率工具.<br>XMind思维导图是一个可视化的图形思维工具.</p>
</blockquote>
<span id="more"></span>

<h2 id="主题类型"><a href="#主题类型" class="headerlink" title="主题类型"></a>主题类型</h2><ul>
<li><p>中心主题</p>
<blockquote>
<p>中心主题是导图的核心也是画布的中心，每张思维导图有且仅由一个中心主题</p>
</blockquote>
</li>
<li><p>分支主题</p>
<blockquote>
<p>中心主题发散出来的第一级主题为分支主题</p>
</blockquote>
</li>
<li><p>子主题</p>
<blockquote>
<p>分支主题发散出来的下一级主题为子主题</p>
</blockquote>
</li>
<li><p>自由主题</p>
<blockquote>
<p>自由主题是在思维导图结构外独立存在的主题</p>
</blockquote>
</li>
</ul>
<p>  <img src="/misc/images/xmind-point.jpg" alt="主题类型"></p>
<h2 id="逻辑元素"><a href="#逻辑元素" class="headerlink" title="逻辑元素"></a>逻辑元素</h2><ul>
<li><p>联系</p>
<blockquote>
<p>思维导图中任意两个主题之间用于显示特殊关系的自定义连接线</p>
</blockquote>
</li>
<li><p>概要</p>
<blockquote>
<p>当对几个主题进行总结和概述，进一步对主题进行总结和升华时，可以添加概要</p>
</blockquote>
</li>
<li><p>外框</p>
<blockquote>
<p>围绕主题的封闭区域</p>
</blockquote>
</li>
<li><p>笔记</p>
<blockquote>
<p>笔记用于注释主题的富文本</p>
</blockquote>
</li>
</ul>
<h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><ul>
<li><p>思维导图</p>
<blockquote>
<p>发散和纵深思考</p>
</blockquote>
</li>
<li><p>鱼骨图</p>
<blockquote>
<p>比较清晰地表达因果关系</p>
</blockquote>
</li>
<li><p>矩阵图</p>
<blockquote>
<p>用来左项目的任务管理或者个人的技术</p>
</blockquote>
</li>
<li><p>时间轴</p>
<blockquote>
<p>表示事件顺序或者事情的先后逻辑</p>
</blockquote>
</li>
<li><p>组织结构图</p>
<blockquote>
<p>可以做组织层次的人员构成</p>
</blockquote>
</li>
<li><p>逻辑图</p>
<blockquote>
<p>表达总分关系或分总关系</p>
</blockquote>
</li>
</ul>
]]></content>
      <tags>
        <tag>思维导图</tag>
        <tag>头脑风暴</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web Framework</title>
    <url>/2021/10/11/Go-Web-Framework/</url>
    <content><![CDATA[<h1 id="Go-Web-Frameworks"><a href="#Go-Web-Frameworks" class="headerlink" title="Go Web Frameworks"></a>Go Web Frameworks</h1><ul>
<li>Web框架分类<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行性能:</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 追求性能的框架很简洁，包含东西很少，一个路由一个MVC, 比如Gin</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开发效率:</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 封装很好，集成很多功能, 比如Beego</span></span><br></pre></td></tr></table></figure></li>
<li>Web框架选型<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> 对于中小型项目，开发效率往往是业务的第一需求, 任何领域做到第一名的产品基本上都有一个共性: 开发、迭代速度快</span><br><span class="line"><span class="bullet">2.</span> 好的框架要能区分清楚业务团队和架构团队的边界，什么应该是业务负责，什么应该是架构负责,</span><br><span class="line"><span class="bullet">3.</span> 架构是为加速业务发展而生，需要兼顾业务的开发效率和底层的性能效率</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
</ul>
<h2 id="Go-语言特性"><a href="#Go-语言特性" class="headerlink" title="Go 语言特性"></a>Go 语言特性</h2><ul>
<li>Goroutine<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Goroutine设计，提供“一个请求一个协程”的请求模型.对比PHP的“一个请求一个进程”的模型，提升后端资源占用和调度负载。</span><br></pre></td></tr></table></figure></li>
<li>Runtime<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Go的<span class="keyword">Runtime</span>机制让运行程序不再依赖各种环境和库</span><br></pre></td></tr></table></figure></li>
<li>compile<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Go提供交叉编译、数据结构、channel等语言级别提醒，让处理Web请求变得简单</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="First-Step"><a href="#First-Step" class="headerlink" title="First Step:"></a>First Step:</h2><ul>
<li>net, net/http<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Web Server</span></span><br><span class="line"> &gt; Web Server的本质，实际上就是接收、解析HTTP请求传输的文本字符，理解这些文本字符的指令，然后计算、在将返回值组织成HTTP响应的文本字符，通过TCP网络输出回去</span><br><span class="line"> &gt; 是一个通过HTTP协议处理Web请求的计算机系统</span><br><span class="line"><span class="bullet">  -</span> HTTP协议: 超文本传输协议</span><br><span class="line"><span class="bullet">    -</span> HTTP Head: 描述一般是和业务无关与传输相关的信息(请求地址、编码格式、缓存时长)</span><br><span class="line"><span class="bullet">    -</span> HTTP Body: 描述的是与业务相关的信息</span><br><span class="line"><span class="section"># net 库</span></span><br><span class="line">  &gt; 对应OSI的TCP层</span><br><span class="line"></span><br><span class="line"><span class="section"># net/http库</span></span><br><span class="line">  &gt; 对应OSI的HTTP层, 解析HTTP消息体</span><br><span class="line"></span><br><span class="line"><span class="section"># net/http 标准库源代码</span></span><br><span class="line">  &gt; 阅读代码库的技巧: 库函数(function) &gt; 结构定义(struct/class) &gt; 结构函数(method)</span><br><span class="line"><span class="bullet">    -</span> 库函数: 这个库要提供的功能</span><br><span class="line"><span class="bullet">    -</span> 结构定义: 这个库分为几个核心模块</span><br><span class="line"><span class="bullet">    -</span> 结构函数: 每个核心模块应该提供的能力</span><br></pre></td></tr></table></figure></li>
<li>context</li>
<li>router</li>
<li>middleware</li>
<li>encapsulation</li>
<li>restart</li>
</ul>
<h2 id="Second-Step"><a href="#Second-Step" class="headerlink" title="Second Step:"></a>Second Step:</h2><ul>
<li>面向接口编程</li>
<li>设计目录结构</li>
<li>命令行交互</li>
<li>定时任务</li>
<li>配置和环境</li>
<li>多输出日志</li>
</ul>
<h2 id="Third-Step"><a href="#Third-Step" class="headerlink" title="Third Step:"></a>Third Step:</h2><ul>
<li>一体化、自动化</li>
<li>调试模式</li>
<li>进程、接口管理</li>
<li>GORM</li>
<li>缓存服务</li>
<li>发布与维护</li>
</ul>
<h2 id="Fourth-Step"><a href="#Fourth-Step" class="headerlink" title="Fourth Step:"></a>Fourth Step:</h2><ul>
<li>设计需求分析</li>
<li>技术方案设计</li>
<li>网站统计服务</li>
<li>一站式前后台</li>
</ul>
<h3 id="毒鸡汤"><a href="#毒鸡汤" class="headerlink" title="毒鸡汤"></a>毒鸡汤</h3><figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span> <span class="javascript">了解一个东西最好的办法就是去实现它</span></span><br></pre></td></tr></table></figure>


<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://github.com/valyala/fasthttp">High Performance FastHTTP</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Tech Interview Handbook</title>
    <url>/2021/10/11/Tech-Interview-Handbook/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Uber Zap Intro</title>
    <url>/2021/10/12/Uber-Zap-Intro/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Apache APISIX Intro</title>
    <url>/2021/10/13/Apache-APISIX-Intro/</url>
    <content><![CDATA[<h1 id="Apache-APISIX"><a href="#Apache-APISIX" class="headerlink" title="Apache APISIX"></a>Apache APISIX</h1><blockquote>
<p>云原生微服务API网关，高性能、安全性、开源可扩展的服务平台<br>APISIX 基于Nginx, Etcd.与传统的API 网关相比，具有动态路由和热插拔加载，适合微服务系统下的API管理.</p>
</blockquote>
<span id="more"></span>

<h2 id="API-Gateway"><a href="#API-Gateway" class="headerlink" title="API Gateway"></a>API Gateway</h2><blockquote>
<p>API网关将微服务的通用功能作为中间层, 比如统计、安全、限速、限流和缓存,这样每个服务只需要关注自己的业务，无关的需求被抛给API网关.</p>
</blockquote>
<ul>
<li>Traditional vs. Cloud Native<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># 传统的<span class="selector-tag">API</span>网关功能</span><br><span class="line">  <span class="selector-tag">-</span> 覆盖了<span class="selector-tag">Nginx</span>所有的功能, 包括 <span class="selector-tag">reverse</span> <span class="selector-tag">proxy</span>(反向代理)、<span class="selector-tag">load</span> <span class="selector-tag">balancing</span>(负载均衡)、<span class="selector-tag">caching</span>(缓存)、<span class="selector-tag">secure</span> <span class="selector-tag">authentication</span>(安全认证)、<span class="selector-tag">rate-limiting</span>(限流)、<span class="selector-tag">speed-limiting</span>(限速).</span><br><span class="line">  <span class="selector-tag">-</span> 支持传统的<span class="selector-tag">Web</span>服务无法实现的功能，比如<span class="selector-tag">dynamic</span> <span class="selector-tag">upstream</span>(动态上行)、<span class="selector-tag">dynamic</span> <span class="selector-tag">SSL</span> <span class="selector-tag">certificate</span>(动态SSL证书)、<span class="selector-tag">dynamic</span> <span class="selector-tag">rate-limiting</span> <span class="selector-tag">and</span> <span class="selector-tag">speed-limiting</span>(动态限流限速)、<span class="selector-tag">active</span>/<span class="selector-tag">passive</span> <span class="selector-tag">health</span> <span class="selector-tag">check</span>(主动/被动健康检查)、<span class="selector-tag">service</span> <span class="selector-tag">disconnection</span>(服务断线)。</span><br><span class="line">  <span class="selector-tag">-</span> 提供生命周期管理,在<span class="selector-tag">API</span>网关领域，<span class="selector-tag">Google</span>是最大的参与者，<span class="selector-tag">Google</span>在收购<span class="selector-tag">Apigee</span>后，整合了除反向代理、负载均衡、限流限速功能外，<span class="selector-tag">API</span>网关还包括<span class="selector-tag">API</span>的设计、文件管理和测试.从项目设计到产品测试一系列功能都包含在<span class="selector-tag">API</span>网关的生命周期管理中.</span><br><span class="line"></span><br><span class="line"># 云原生下<span class="selector-tag">API</span>网关的新特性</span><br><span class="line">  <span class="selector-tag">-</span> 需要对接云环境下的<span class="selector-tag">Prometheus</span>(系统监控报警组件)、<span class="selector-tag">Zipkin</span>(分布式日志追踪系统)、<span class="selector-tag">Skywalking</span>(观察性分析平台和应用程序性能管理系统).</span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">gRPC</span> 代理和协议转换(REST &lt;=&gt; gRPC). 现在<span class="selector-tag">HTTP</span>在微服务中使用较少，开始使用<span class="selector-tag">gRPC</span></span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">identify</span> <span class="selector-tag">authentication</span>(身份认证的变化): 在传统的<span class="selector-tag">Nginx</span>中，一般流量进来之后，根据路由规则执行反向代理和负载均衡的功能，发送流量的客户端的身份很少经过身份验证，但是在云原生计算中，由于很多流量都在微服务中，必须进行严格的身份认证，包括加密和<span class="selector-tag">OpenID</span></span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">Serverless</span>今年来非常有名的概念，如果你想在边缘节点动态运行一个函数或停止一个函数.或者动态改变内容，可以在边缘节点部署<span class="selector-tag">API</span>网关,使用<span class="selector-tag">FaaS</span>(Function as a Service),边缘节点将更加灵活. <span class="selector-tag">Apache</span> <span class="selector-tag">APISIX</span>最近支持<span class="selector-tag">Serverless</span>,可以让<span class="selector-tag">Lua</span>函数在边缘节点动态运行.</span><br><span class="line">  <span class="selector-tag">-</span> 保持无状态，动态缩容/扩容的功能,云原生计算下的一个重要标准是所有的服务都可以通过容器随意扩容和缩容对<span class="selector-tag">Kubernetes</span>友好.</span><br><span class="line">  <span class="selector-tag">-</span> <span class="selector-tag">Support</span> <span class="selector-tag">multiple</span> <span class="selector-tag">clouds</span> <span class="selector-tag">and</span> <span class="selector-tag">hybrid</span> <span class="selector-tag">clouds</span>.</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Nginx-vs-OpenResty"><a href="#Nginx-vs-OpenResty" class="headerlink" title="Nginx vs OpenResty"></a>Nginx vs OpenResty</h3><ul>
<li>Nginx<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; A high performance free <span class="keyword">open</span> source web <span class="keyword">server</span> powering busiest sites <span class="keyword">on</span> the Internet.</span><br><span class="line">&gt; nginx [engine x] <span class="keyword">is</span> an HTTP <span class="keyword">and</span> <span class="keyword">reverse</span> proxy <span class="keyword">server</span>, <span class="keyword">as</span> well <span class="keyword">as</span> a mail proxy <span class="keyword">server</span></span><br></pre></td></tr></table></figure></li>
<li>OpenResty<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt; <span class="selector-tag">OpenResty</span> (aka. ngx_openresty) <span class="selector-tag">is</span> <span class="selector-tag">full-fledged</span>(成熟)的<span class="selector-tag">web</span>应用程序服务器,基于标准的<span class="selector-tag">Nginx</span>核心和许多第三方<span class="selector-tag">Nginx</span>模块以及第三方外部依赖.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://medium.com/@ming_wen/apache-apisixs-technology-selection-testing-and-continuous-integration-313221b02542">Apache APISIX’s technology selection,testing and continuous integration</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Apple Silicon M1 New product experience</title>
    <url>/2021/10/15/Apple-Silicon-M1-New-product-experience/</url>
    <content><![CDATA[<h1 id="Apple-Silicon-M1-MacBook-Pro"><a href="#Apple-Silicon-M1-MacBook-Pro" class="headerlink" title="Apple Silicon M1 MacBook Pro"></a>Apple Silicon M1 MacBook Pro</h1><blockquote>
<p>“Ths best way to predict the future is to invent it” - Alan Kay</p>
</blockquote>
<p><img src="/misc/images/macbookpro" alt="MacBook Pro"></p>
<span id="more"></span>

<h2 id="Apple-switching-Mac-to-ARM-Architecture"><a href="#Apple-switching-Mac-to-ARM-Architecture" class="headerlink" title="Apple switching Mac to ARM Architecture"></a>Apple switching Mac to ARM Architecture</h2><ul>
<li>Pros and Cons 优缺点<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pros优点</span></span><br><span class="line">  - <span class="number">1</span>. ARM processors use significantly less amount of power</span><br><span class="line">  - <span class="number">2</span>. MacOS is based on the [Darwin](https:<span class="regexp">//gi</span>thub.com<span class="regexp">/apple/</span>darwin-xnu)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cons缺点</span></span><br><span class="line">  - [<span class="string">&quot;Hackintosh&quot;</span>](https:<span class="regexp">//</span>hackintosh.com/) future will be doomed.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ARM64-amp-amp-Intel-x86-Virtual-Machines"><a href="#ARM64-amp-amp-Intel-x86-Virtual-Machines" class="headerlink" title="ARM64 &amp;&amp; Intel x86 Virtual Machines"></a>ARM64 &amp;&amp; Intel x86 Virtual Machines</h2><ul>
<li>ARM64<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">&gt; Apple Silicon <span class="keyword">is</span> an ARM <span class="keyword">platform</span> (RISC)</span><br></pre></td></tr></table></figure></li>
<li>Intel x86<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">&gt; Intel x86 <span class="keyword">is</span> a CISC <span class="keyword">platform</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="How-to-run-x86-Virtual-Machine-on-Apple-M1"><a href="#How-to-run-x86-Virtual-Machine-on-Apple-M1" class="headerlink" title="How to run x86 Virtual Machine on Apple M1"></a>How to run x86 Virtual Machine on Apple M1</h2><ul>
<li>Virtualization or Emulation<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Virtualization:</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 创建虚拟的副本(虚拟硬件和设备、存储设备和网络资源)</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Emulation:</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> (<span class="built_in">emulate</span> different CPU architecture ) 模拟不同的CPU架构</span></span><br><span class="line"></span><br><span class="line">  - QEMU : a king of emulation</span><br><span class="line">  - UTM : emulation and virtualization solution</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Harbor Intro</title>
    <url>/2021/10/15/Harbor-Intro/</url>
    <content><![CDATA[<h1 id="Harbor"><a href="#Harbor" class="headerlink" title="Harbor"></a>Harbor</h1><blockquote>
<p>Kubernetes 值得信赖的云原生镜像存储库(Image Registry)</p>
</blockquote>
<span id="more"></span>

<h2 id="Prerequisties"><a href="#Prerequisties" class="headerlink" title="Prerequisties"></a>Prerequisties</h2><ul>
<li>Domain mapped to A record to get letsencrypt certificate</li>
<li>Internet connection to the server.</li>
<li>Latest version of docker and docker-compose installed.</li>
</ul>
<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2>  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># update package repository</span></span><br><span class="line">$ sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># install the certificate</span></span><br><span class="line">$ sudo apt install certbot -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a sertificate (Using domain name and email)</span></span><br><span class="line">❯ sudo certbot certonly --standalone -d <span class="string">&quot;harbor.chyidl.com&quot;</span> --preferred-challenges http --agree-tos -n -m <span class="string">&quot;xxx@gmail.com&quot;</span> --keep-until-expiring</span><br><span class="line">Saving debug log to <span class="regexp">/var/</span>log<span class="regexp">/letsencrypt/</span>letsencrypt.log</span><br><span class="line">Plugins selected: Authenticator standalone, Installer None</span><br><span class="line">Obtaining a new certificate</span><br><span class="line">Performing the following challenges:</span><br><span class="line">http-<span class="number">01</span> challenge <span class="keyword">for</span> harbor.xx.com</span><br><span class="line">Waiting <span class="keyword">for</span> verification...</span><br><span class="line">Cleaning up challenges</span><br><span class="line"></span><br><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at:</span><br><span class="line"> -    <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/</span>harbor.xx.com/fullchain.pem</span><br><span class="line"> -    Your key file has been saved at:</span><br><span class="line"> -    <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/</span>harbor.xx.com/privkey.pem</span><br><span class="line"> -    Your cert will expire on <span class="number">2022</span>-<span class="number">01</span>-<span class="number">15</span>. To obtain a new or tweaked</span><br><span class="line"> -    version of this certificate <span class="keyword">in</span> the future, simply run certbot</span><br><span class="line"> -    again. To non-interactively renew *all* of your certificates, run</span><br><span class="line"> -    <span class="string">&quot;certbot renew&quot;</span></span><br><span class="line"> -    - If you like Certbot, please consider supporting our work by:</span><br><span class="line">   Donating to ISRG <span class="regexp">/ Let&#x27;s Encrypt:   https:/</span><span class="regexp">/letsencrypt.org/</span>donate</span><br><span class="line">      Donating to EFF:                    https:<span class="regexp">//</span>eff.org/donate-le</span><br><span class="line"></span><br><span class="line"><span class="comment"># certificate are generated in /etc/letsencrypt/live/harbor.xxx.com/</span></span><br><span class="line">root <span class="keyword">in</span> unreal-pod-<span class="number">1</span> <span class="keyword">in</span> ~/Downloads took <span class="number">8</span>s</span><br><span class="line">❯ cd <span class="regexp">/etc/</span>letsencrypt<span class="regexp">/live/</span>harbor.xx.com/</span><br><span class="line"></span><br><span class="line">root <span class="keyword">in</span> unreal-pod-<span class="number">1</span> <span class="keyword">in</span> letsencrypt<span class="regexp">/live/</span>harbor.xx.com</span><br><span class="line">❯ ll</span><br><span class="line">total <span class="number">4.0</span>K</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">41</span> Oct <span class="number">18</span> <span class="number">00</span>:<span class="number">31</span> cert.pem -&gt; ..<span class="regexp">/../</span>archive<span class="regexp">/harbor.xx.com/</span>cert1.pem</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">42</span> Oct <span class="number">18</span> <span class="number">00</span>:<span class="number">31</span> chain.pem -&gt; ..<span class="regexp">/../</span>archive<span class="regexp">/harbor.xx.com/</span>chain1.pem</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">46</span> Oct <span class="number">18</span> <span class="number">00</span>:<span class="number">31</span> fullchain.pem -&gt; ..<span class="regexp">/../</span>archive<span class="regexp">/harbor.xx.com/</span>fullchain1.pem</span><br><span class="line">lrwxrwxrwx <span class="number">1</span> root root  <span class="number">44</span> Oct <span class="number">18</span> <span class="number">00</span>:<span class="number">31</span> privkey.pem -&gt; ..<span class="regexp">/../</span>archive<span class="regexp">/harbor.xx.com/</span>privkey1.pem</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">692</span> Oct <span class="number">18</span> <span class="number">00</span>:<span class="number">31</span> README</span><br><span class="line"></span><br><span class="line"><span class="comment"># download the harbor package</span></span><br><span class="line">$ curl -s https:<span class="regexp">//</span>api.github.com<span class="regexp">/repos/g</span>oharbor<span class="regexp">/harbor/</span>releases/latest | grep browser_download_url | cut -d <span class="string">&#x27;&quot;&#x27;</span> -f <span class="number">4</span> | grep <span class="string">&#x27;\.tgz$&#x27;</span> | wget -i -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extract the harbor</span></span><br><span class="line">$ tar xvf harbor-offline-installer-v2.<span class="number">3.3</span>.tgz</span><br><span class="line">$ cd harbor</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy example of configuration</span></span><br><span class="line">$ cp harbor.yml.tmpl harbor.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># open harbor.yaml</span></span><br><span class="line">$ vim harbor.yaml</span><br><span class="line">  hostname:</span><br><span class="line">  http.port:</span><br><span class="line">  https.port</span><br><span class="line">    certificate:</span><br><span class="line">    private_key:</span><br><span class="line">  harbor_admin_password:</span><br><span class="line">  database.password:</span><br><span class="line">  database.max_idle_conns:</span><br><span class="line">  database.max_open_conns:</span><br><span class="line">  data_volume:</span><br><span class="line"></span><br><span class="line"><span class="comment"># notary helps to digitally sign images using keys that verify content and publish them securely</span></span><br><span class="line">$ sudo ./install.sh --with-notary --with-chartmuseum</span><br><span class="line"></span><br><span class="line"><span class="comment"># Harbor web access</span></span><br><span class="line">&gt; https:<span class="regexp">//</span>harbor.xxx.com (modify <span class="regexp">/etc/</span>hosts add records)</span><br><span class="line"></span><br><span class="line">&gt; login  harbor.xxx.com</span><br><span class="line">$ docker login -u admin_zcm -p abc@<span class="number">123</span>A harbor.xxx.com</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Kubernetes分析源码</title>
    <url>/2021/10/15/Kubernetes%E5%88%86%E6%9E%90%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Learning Helm: Managing Apps on Kubernetes</title>
    <url>/2021/10/15/Learning-Helm-Managing-Apps-on-Kubernetes/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>NFS Mount Intro</title>
    <url>/2021/10/15/NFS-Mount-Intro/</url>
    <content><![CDATA[<h1 id="NFS-or-Network-File-System"><a href="#NFS-or-Network-File-System" class="headerlink" title="NFS, or Network File System"></a>NFS, or Network File System</h1><blockquote>
<p>一种分布式文件系统协议，允许你在服务器上挂载远程目录，你可以管理不同位置的存储空间并从多客户端写入该空间. NFS提供一种相对标准和高效的方式来通过网络访问远程系统。并且适合访问共享资源的情况.</p>
</blockquote>
<span id="more"></span>

<h2 id="Step-1-Download-and-Install-the-Components"><a href="#Step-1-Download-and-Install-the-Components" class="headerlink" title="Step 1 - Download and Install the Components"></a>Step 1 - Download and Install the Components</h2><ul>
<li>On the Host<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>sudo apt install nfs-kernel-server (允许你分享文件目录)</span><br></pre></td></tr></table></figure></li>
<li>On the Client<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo apt update</span><br><span class="line"><span class="variable">$ </span>sudo apt install nfs-common</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Step-2-Create-the-Share-DIrectories-on-the-Host"><a href="#Step-2-Create-the-Share-DIrectories-on-the-Host" class="headerlink" title="Step 2 - Create the Share DIrectories on the Host"></a>Step 2 - Create the Share DIrectories on the Host</h2><ul>
<li>Example 1: Exporting a General Purpose Mount<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ubuntu <span class="keyword">in</span> ~ at k8s-node1 via 🐍 <span class="number">3.8</span>.<span class="number">6</span></span><br><span class="line">➜ sudo mkdir <span class="regexp">/var/</span>nfs/general -p  <span class="comment"># 创建目录</span></span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at k8s-node1 via 🐍 <span class="number">3.8</span>.<span class="number">6</span></span><br><span class="line">➜ ls -la <span class="regexp">/var/</span>nfs/general</span><br><span class="line">total <span class="number">8</span></span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">4096</span> Oct <span class="number">15</span> <span class="number">13</span>:<span class="number">41</span> .</span><br><span class="line">drwxr-xr-x <span class="number">3</span> root root <span class="number">4096</span> Oct <span class="number">15</span> <span class="number">13</span>:<span class="number">41</span> ..</span><br><span class="line"></span><br><span class="line">&gt; NFS会将客户端上的任何根操作转换为nobody:nogroup凭证作为安全措施，因此我们需要更改目录所有权匹配这些凭证.</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at k8s-node1 via 🐍 <span class="number">3.8</span>.<span class="number">6</span></span><br><span class="line">➜ sudo chown nobody:nogroup <span class="regexp">/var/</span>nfs/general</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Step-3-Configuring-the-NFS-Exports-on-the-Host-Server"><a href="#Step-3-Configuring-the-NFS-Exports-on-the-Host-Server" class="headerlink" title="Step 3 - Configuring the NFS Exports on the Host Server"></a>Step 3 - Configuring the NFS Exports on the Host Server</h2>  <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">chyi in ~ at k8s-master</span><br><span class="line">➜ sudo <span class="keyword">vim</span> /etc/exports</span><br><span class="line">  # This <span class="keyword">file</span> <span class="keyword">is</span> auto-generated by openmediavault (http<span class="variable">s:</span>//www.openmediavault.org)</span><br><span class="line">  # WARNING: Do not <span class="keyword">edit</span> this <span class="keyword">file</span>, your <span class="keyword">changes</span> will <span class="built_in">get</span> lost.</span><br><span class="line"></span><br><span class="line">  # directory_to_share  client(share_option1,...,share_optionN)</span><br><span class="line"></span><br><span class="line">  # /etc/export<span class="variable">s:</span> the access control <span class="keyword">list</span> <span class="keyword">for</span> filesystems which may <span class="keyword">be</span> exported</span><br><span class="line">  #               <span class="keyword">to</span> NFS clients.  See exports(<span class="number">5</span>).</span><br><span class="line">  /export/K8sData <span class="number">172.30</span>.<span class="number">1.0</span>/<span class="number">24</span>(fsid=<span class="number">2</span>,rw,subtree_check,insecure)</span><br><span class="line">    - r<span class="variable">w:</span> 此选项为客户端计算机提供对卷的读写访问权限</span><br><span class="line">    - <span class="keyword">sync</span>: 此选项强制NFS在响应恢复之前将更改写入磁盘，会导致更稳定和一致的环境，因为恢复响应远程卷的世纪状态，但是他也降低了文件操作的速度.</span><br><span class="line">    - no_subtree_check: 此选项防止子树检查，这是一个过程，主机必须检查该文件是否在每个请求的导出树中实际上仍然可用，在客户端打开文件和重命名文件时</span><br><span class="line">    - no_root_squash: 默认情况下，NFS将来自root用户的远程请求转换为服务器上的非特权用户，这是为了防止客户端上的root账户以root身份使用主机的文件系统的安全功能</span><br><span class="line"></span><br><span class="line">$ sudo systemctl restart nfs-kernel-server</span><br></pre></td></tr></table></figure>

<h2 id="Step-4-Create-Mount-Points-and-Mount-Directories-on-the-Client"><a href="#Step-4-Create-Mount-Points-and-Mount-Directories-on-the-Client" class="headerlink" title="Step 4 - Create Mount Points and Mount Directories on the Client"></a>Step 4 - Create Mount Points and Mount Directories on the Client</h2>  <figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">&gt; 为了使远程共享在客户端可用，我们需要将主机上要共享的目录挂载到客户端上的空目录中</span><br><span class="line">&gt; 如果你的挂载点中有文件和目录，一旦你挂载NFS共享，他们就会被隐藏，为了避免丢失重要文件，请确保你挂载在已存在的目录中，并且该目录为空.</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at <span class="number">3</span>B</span><br><span class="line">➜ sudo mkdir /k8s_data</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at <span class="number">3</span>B</span><br><span class="line">➜ sudo mount <span class="number">172.30</span>.<span class="number">1.14</span><span class="symbol">:/export/K8sData</span> /k8s_data</span><br></pre></td></tr></table></figure>

<h2 id="Step-5-Mounting-the-Remote-NFS-Directories-at-Boot"><a href="#Step-5-Mounting-the-Remote-NFS-Directories-at-Boot" class="headerlink" title="Step 5 - Mounting the Remote NFS Directories at Boot"></a>Step 5 - Mounting the Remote NFS Directories at Boot</h2>  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">&gt; 通过将远程NFS共享添加到客户端上的<span class="regexp">/etc/</span>fstab文件，可以在启动是自动挂载远程NFS共享</span><br><span class="line"></span><br><span class="line">ubuntu <span class="keyword">in</span> ~ at <span class="number">3</span>B</span><br><span class="line">➜ sudo vim <span class="regexp">/etc/</span>fstab</span><br><span class="line"></span><br><span class="line">  <span class="number">172.30</span>.<span class="number">1.14</span>:<span class="regexp">/export/</span>K8sData /k8s_data nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=<span class="number">1800</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h2 id="Step-6-Unmounting-an-NFS-Remote-Share"><a href="#Step-6-Unmounting-an-NFS-Remote-Share" class="headerlink" title="Step 6 - Unmounting an NFS Remote Share"></a>Step 6 - Unmounting an NFS Remote Share</h2>  <figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo umount /k8s_data</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Rancher Intro</title>
    <url>/2021/10/18/Rancher-Intro/</url>
    <content><![CDATA[<h1 id="Rancher"><a href="#Rancher" class="headerlink" title="Rancher"></a>Rancher</h1><span id="more"></span>
]]></content>
  </entry>
  <entry>
    <title>数据库迁移 MySQL -&gt; Postgres</title>
    <url>/2021/10/21/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB-MySQL-Postgres/</url>
    <content><![CDATA[<h1 id="数据库迁移-MySQL-gt-Postgres"><a href="#数据库迁移-MySQL-gt-Postgres" class="headerlink" title="数据库迁移 MySQL -&gt; Postgres"></a>数据库迁移 MySQL -&gt; Postgres</h1><span id="more"></span>

<h2 id="MySQL-to-PostgreSQL-Types-Mapping"><a href="#MySQL-to-PostgreSQL-Types-Mapping" class="headerlink" title="MySQL to PostgreSQL Types Mapping"></a>MySQL to PostgreSQL Types Mapping</h2><ul>
<li><p>Types Mapping</p>
<table>
<thead>
<tr>
<th align="left">MySQL</th>
<th align="left">PostgreSQL</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BIGINT</td>
<td align="left">BIGINT</td>
</tr>
<tr>
<td align="left">BINARY(n)</td>
<td align="left">BYTEA</td>
</tr>
<tr>
<td align="left">BIT</td>
<td align="left">BOOLEAN</td>
</tr>
<tr>
<td align="left">CHAR(n), CHARACTER(n)</td>
<td align="left">CHAR(n), CHARACTER(n)</td>
</tr>
<tr>
<td align="left">DATE</td>
<td align="left">DATE</td>
</tr>
<tr>
<td align="left">DATETIME</td>
<td align="left">TIMESTAMP [WITHOUT TIME ZONE]</td>
</tr>
<tr>
<td align="left">DECIMAL(p,s), DEC(p,s)</td>
<td align="left">DECIMAL(p,s), DEC(p,s)</td>
</tr>
<tr>
<td align="left">DOUBLE</td>
<td align="left">DOUBLE PERCISION</td>
</tr>
<tr>
<td align="left">FLOAT</td>
<td align="left">REAL</td>
</tr>
<tr>
<td align="left">INT, INTEGER</td>
<td align="left">INT, INTEGER</td>
</tr>
<tr>
<td align="left">MEDIUMINT</td>
<td align="left">INTEGER</td>
</tr>
<tr>
<td align="left">NUMERIC(p,s)</td>
<td align="left">NUMERIC(p,s)</td>
</tr>
<tr>
<td align="left">SMALLINT</td>
<td align="left">SMALLINT</td>
</tr>
<tr>
<td align="left">TINYINT</td>
<td align="left">SMALLINT</td>
</tr>
<tr>
<td align="left">TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT</td>
<td align="left">TEXT</td>
</tr>
<tr>
<td align="left">TIME</td>
<td align="left">TIME [WITHOUT TIME ZONE]</td>
</tr>
<tr>
<td align="left">TIMESTAMP</td>
<td align="left">TIMESTAMP [WITHOUT TIME ZONE]</td>
</tr>
<tr>
<td align="left">VARBINARY(n), VARBINARY(max)</td>
<td align="left">BYTEA</td>
</tr>
<tr>
<td align="left">VARCHAR(n)</td>
<td align="left">VARCHAR(n)</td>
</tr>
<tr>
<td align="left">VARCHAR(max)</td>
<td align="left">TEXT</td>
</tr>
</tbody></table>
</li>
<li><p>MySQL auto_increment</p>
<table>
<thead>
<tr>
<th align="left">MySQL</th>
<th align="left">PostgreSQL</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BIGINT AUTO_INCREMENT</td>
<td align="left">BIGSERIAL</td>
</tr>
<tr>
<td align="left">INTEGER AUTO_INCREMENT</td>
<td align="left">SERIAL</td>
</tr>
<tr>
<td align="left">SMALLINT AUTO_INCREMENT</td>
<td align="left">SMALLSERIAL</td>
</tr>
<tr>
<td align="left">TINYINT AUTO_INCREMENT</td>
<td align="left">SMALLSERIAL</td>
</tr>
</tbody></table>
</li>
<li><p>MySQL integer types (tinyint, smallint, int, bigint) UNSIGNED</p>
<table>
<thead>
<tr>
<th align="left">MySQL</th>
<th align="left">PostgreSQL</th>
</tr>
</thead>
<tbody><tr>
<td align="left">BIGINT UNSIGNED</td>
<td align="left">NUMERIC(20)</td>
</tr>
<tr>
<td align="left">INT UNSIGNED</td>
<td align="left">BIGINT</td>
</tr>
<tr>
<td align="left">MEDIUMINT UNSIGNED</td>
<td align="left">INTEGER</td>
</tr>
<tr>
<td align="left">SMALLINT UNSIGNED</td>
<td align="left">INTEGER</td>
</tr>
<tr>
<td align="left">TINYINT UNSIGNED</td>
<td align="left">INTEGER</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="使用pgloader将MySQL数据库迁移到PostgreSQL"><a href="#使用pgloader将MySQL数据库迁移到PostgreSQL" class="headerlink" title="使用pgloader将MySQL数据库迁移到PostgreSQL"></a>使用pgloader将MySQL数据库迁移到PostgreSQL</h2><ul>
<li>PGLOADER<ul>
<li>Supported operations include<ul>
<li>Migrate from MySQL to PostgreSQL</li>
<li>Migrate from SQLite to PostgreSQL</li>
<li>Migrate from MS SQL Server to PostgreSQL</li>
</ul>
</li>
<li>Install<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; pgloader使用postgresql的COPY命令将数据从源数据库或文件复制到目标PostgreSQL数据库中.</span></span><br><span class="line"><span class="bullet">  -</span> sbcl: 一个Common Lisp编译器</span><br><span class="line"><span class="bullet">  -</span> unzip: .zip文件的unzip器</span><br><span class="line"><span class="bullet">  -</span> libsqlite3-dev: SQLite3的开发文件集合</span><br><span class="line"><span class="bullet">  -</span> gawk: GNU awk 的缩写，是一种模式扫描和处理语言</span><br><span class="line"><span class="bullet">  -</span> curl: 用于从URL传输数据的命令行工具</span><br><span class="line"><span class="bullet">  -</span> make: 用于管理包编译的实用程序</span><br><span class="line"><span class="bullet">  -</span> freetds-dev: MS SQL和Sybase数据库的客户端库</span><br><span class="line"><span class="bullet">  -</span> libzip-dev:用于读取，穿件和修改zip存档的库</span><br><span class="line"><span class="section"># 安装依赖项</span></span><br><span class="line">$ sudo apt install sbcl unzip libsqlite3-dev gawk curl make freetds-dev libzip-dev</span><br><span class="line"></span><br><span class="line"><span class="section"># 下载pgloader</span></span><br><span class="line">$ wget https://github.com/dimitri/pgloader/releases/download/v3.6.2/pgloader-bundle-3.6.2.tgz</span><br><span class="line"></span><br><span class="line"><span class="section"># 提取tarball</span></span><br><span class="line">$ tar -xvf pgloader-bundle</span><br><span class="line"></span><br><span class="line"><span class="section"># 构建pgloader二进制文件</span></span><br><span class="line"><span class="section"># make pgloader</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li>Migrate from MySQL to PostgreSQL<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">  &gt; Migrate <span class="selector-tag">a</span> whole MySQL database, including its schema definition of tables and indexes, primary key and foreign key constraints, comments and default values, even when they require installing <span class="selector-tag">a</span> trigger <span class="keyword">in</span> PostgreSQL.</span><br><span class="line"></span><br><span class="line">	chyiyaqing <span class="keyword">in</span> ~ at chyiyaqing-PowerEdge-R720</span><br><span class="line">➜ pgloader mysql:<span class="comment">//admin:x@172.16.1.129:31540/stdb pgsql://kingbasees:x@180.76.152.26:5432/stdb</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">29</span>T18:<span class="number">31</span>:<span class="number">21.028000</span>+<span class="number">08</span>:<span class="number">00</span> LOG pgloader version <span class="string">&quot;3.6.2&quot;</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">29</span>T18:<span class="number">31</span>:<span class="number">21.453000</span>+<span class="number">08</span>:<span class="number">00</span> LOG Migrating from #&lt;MYSQL-CONNECTION mysql:<span class="comment">//admin@172.16.1.129:31540/stdb &#123;10054E05A3&#125;&gt;</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">29</span>T18:<span class="number">31</span>:<span class="number">21.453000</span>+<span class="number">08</span>:<span class="number">00</span> LOG Migrating into #&lt;PGSQL-CONNECTION pgsql:<span class="comment">//kingbasees@180.76.152.26:5432/stdb &#123;10056315A3&#125;&gt;</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">29</span>T18:<span class="number">32</span>:<span class="number">49.847000</span>+<span class="number">08</span>:<span class="number">00</span> LOG report <span class="selector-tag">summary</span> reset</span><br><span class="line">                  <span class="selector-tag">table</span> name     errors       rows      bytes      total <span class="selector-tag">time</span></span><br><span class="line">----------------------------  ---------  ---------  ---------  --------------</span><br><span class="line">             fetch meta data          <span class="number">0</span>        <span class="number">159</span>                     <span class="number">1.411s</span></span><br><span class="line">              Create Schemas          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">0.253s</span></span><br><span class="line">            Create SQL Types          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">0.152s</span></span><br><span class="line">               Create tables          <span class="number">0</span>        <span class="number">134</span>                    <span class="number">25.585s</span></span><br><span class="line">              Set Table OIDs          <span class="number">0</span>         <span class="number">67</span>                     <span class="number">0.080s</span></span><br><span class="line">----------------------------  ---------  ---------  ---------  --------------</span><br><span class="line">             stdb<span class="selector-class">.access_key</span>          <span class="number">0</span>          <span class="number">6</span>     <span class="number">1.6</span> kB          <span class="number">0.588s</span></span><br><span class="line">          stdb<span class="selector-class">.alert_history</span>          <span class="number">0</span>      <span class="number">84369</span>    <span class="number">28.7</span> MB         <span class="number">28.544s</span></span><br><span class="line">        stdb<span class="selector-class">.analysis_result</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">6.861s</span></span><br><span class="line">             stdb<span class="selector-class">.auth_group</span>          <span class="number">0</span>          <span class="number">2</span>     <span class="number">0.1</span> kB          <span class="number">7.222s</span></span><br><span class="line">  stdb<span class="selector-class">.baas_contract_cluster</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">7.661s</span></span><br><span class="line">                  stdb<span class="selector-class">.cache</span>          <span class="number">0</span>        <span class="number">300</span>    <span class="number">49.2</span> kB          <span class="number">8.278s</span></span><br><span class="line">            stdb<span class="selector-class">.auth_client</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">2.851s</span></span><br><span class="line">          stdb<span class="selector-class">.certification</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">8.631s</span></span><br><span class="line">           stdb<span class="selector-class">.auth_history</span>          <span class="number">0</span>         <span class="number">20</span>     <span class="number">1.6</span> kB          <span class="number">3.268s</span></span><br><span class="line">          stdb<span class="selector-class">.chain_account</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">8.968s</span></span><br><span class="line">stdb<span class="selector-class">.baas_contract_warehouse</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">3.595s</span></span><br><span class="line">            stdb<span class="selector-class">.config_info</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">9.251s</span></span><br><span class="line">                   stdb<span class="selector-class">.cert</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">4.014s</span></span><br><span class="line">        stdb<span class="selector-class">.contract_entity</span>          <span class="number">0</span>          <span class="number">1</span>     <span class="number">0.5</span> kB          <span class="number">9.452s</span></span><br><span class="line">                  stdb<span class="selector-class">.chain</span>          <span class="number">0</span>        <span class="number">163</span>   <span class="number">118.5</span> kB          <span class="number">4.337s</span></span><br><span class="line"> stdb<span class="selector-class">.contract_invoke_record</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">9.598s</span></span><br><span class="line">      stdb<span class="selector-class">.chain_transaction</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">4.221s</span></span><br><span class="line">   stdb<span class="selector-class">.contract_market_info</span>          <span class="number">0</span>         <span class="number">25</span>     <span class="number">3.5</span> kB          <span class="number">9.774s</span></span><br><span class="line">       stdb<span class="selector-class">.contract_address</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">4.065s</span></span><br><span class="line">      stdb<span class="selector-class">.contract_template</span>          <span class="number">0</span>        <span class="number">129</span>    <span class="number">79.5</span> kB         <span class="number">10.058s</span></span><br><span class="line">          stdb<span class="selector-class">.contract_info</span>          <span class="number">0</span>          <span class="number">8</span>     <span class="number">1.0</span> kB          <span class="number">4.046s</span></span><br><span class="line">             stdb<span class="selector-class">.credential</span>          <span class="number">0</span>         <span class="number">41</span>    <span class="number">48.5</span> kB         <span class="number">10.322s</span></span><br><span class="line">        stdb<span class="selector-class">.contract_market</span>          <span class="number">0</span>         <span class="number">16</span>    <span class="number">37.8</span> kB          <span class="number">4.197s</span></span><br><span class="line">                 stdb<span class="selector-class">.driver</span>          <span class="number">0</span>         <span class="number">14</span>    <span class="number">94.6</span> kB         <span class="number">10.825s</span></span><br><span class="line">        stdb<span class="selector-class">.contract_sample</span>          <span class="number">0</span>        <span class="number">664</span>     <span class="number">9.2</span> MB         <span class="number">14.125s</span></span><br><span class="line">     stdb<span class="selector-class">.file_system_entity</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">11.247s</span></span><br><span class="line">         stdb<span class="selector-class">.gas_distribute</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">11.666s</span></span><br><span class="line">              stdb<span class="selector-class">.grade_one</span>          <span class="number">0</span>        <span class="number">664</span>    <span class="number">64.3</span> kB         <span class="number">11.957s</span></span><br><span class="line">  stdb<span class="selector-class">.contract_version_info</span>          <span class="number">0</span>          <span class="number">1</span>     <span class="number">0.1</span> kB          <span class="number">3.688s</span></span><br><span class="line">       stdb<span class="selector-class">.debug_properties</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">4.150s</span></span><br><span class="line">              stdb<span class="selector-class">.err_event</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">4.543s</span></span><br><span class="line">     stdb<span class="selector-class">.hibernate_sequence</span>          <span class="number">0</span>          <span class="number">1</span>     <span class="number">0.0</span> kB         <span class="number">11.902s</span></span><br><span class="line">                   stdb<span class="selector-class">.form</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">5.003s</span></span><br><span class="line">         stdb<span class="selector-class">.instance_event</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">12.349s</span></span><br><span class="line">            stdb<span class="selector-class">.grade_group</span>          <span class="number">0</span>          <span class="number">5</span>     <span class="number">1.1</span> kB          <span class="number">5.484s</span></span><br><span class="line">       stdb<span class="selector-class">.integral_account</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">12.779s</span></span><br><span class="line">             stdb<span class="selector-class">.grpc_event</span>          <span class="number">0</span>       <span class="number">4002</span>   <span class="number">894.1</span> kB          <span class="number">9.082s</span></span><br><span class="line">       stdb<span class="selector-class">.java_file_entity</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">13.242s</span></span><br><span class="line">        stdb<span class="selector-class">.license_history</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">13.717s</span></span><br><span class="line">               stdb<span class="selector-class">.instance</span>          <span class="number">0</span>         <span class="number">70</span>   <span class="number">122.2</span> kB          <span class="number">9.365s</span></span><br><span class="line">            stdb<span class="selector-class">.log_operate</span>          <span class="number">0</span>        <span class="number">439</span>   <span class="number">103.6</span> kB         <span class="number">14.198s</span></span><br><span class="line">               stdb<span class="selector-class">.integral</span>          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">9.765s</span></span><br><span class="line">     stdb<span class="selector-class">.monitor_indicators</span>          <span class="number">0</span>         <span class="number">52</span>    <span class="number">10.0</span> kB         <span class="number">14.635s</span></span><br><span class="line">   stdb<span class="selector-class">.integral_transaction</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">10.234s</span></span><br><span class="line">                 stdb<span class="selector-class">.notice</span>          <span class="number">0</span>        <span class="number">270</span>   <span class="number">385.6</span> kB         <span class="number">15.572s</span></span><br><span class="line">    stdb<span class="selector-class">.java_project_entity</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">10.688s</span></span><br><span class="line">               stdb<span class="selector-class">.log_file</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">11.105s</span></span><br><span class="line">           stdb<span class="selector-class">.organization</span>          <span class="number">0</span>         <span class="number">34</span>     <span class="number">8.1</span> kB         <span class="number">15.521s</span></span><br><span class="line">          stdb<span class="selector-class">.monitor_alert</span>          <span class="number">0</span>         <span class="number">14</span>    <span class="number">11.2</span> kB         <span class="number">11.741s</span></span><br><span class="line">                  stdb<span class="selector-class">.panel</span>          <span class="number">0</span>        <span class="number">169</span>     <span class="number">7.5</span> kB         <span class="number">15.474s</span></span><br><span class="line">                   stdb<span class="selector-class">.node</span>          <span class="number">0</span>        <span class="number">333</span>   <span class="number">150.5</span> kB         <span class="number">12.311s</span></span><br><span class="line">                stdb<span class="selector-class">.renewal</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">15.791s</span></span><br><span class="line">                   stdb<span class="selector-class">.role</span>          <span class="number">0</span>          <span class="number">6</span>     <span class="number">7.5</span> kB         <span class="number">15.830s</span></span><br><span class="line">    stdb<span class="selector-class">.order_resource_ship</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">12.207s</span></span><br><span class="line">              stdb<span class="selector-class">.rule_type</span>          <span class="number">0</span>         <span class="number">11</span>     <span class="number">1.1</span> kB         <span class="number">15.752s</span></span><br><span class="line">                 stdb<span class="selector-class">.output</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">12.650s</span></span><br><span class="line">              stdb<span class="selector-class">.secretkey</span>          <span class="number">0</span>         <span class="number">48</span>    <span class="number">23.2</span> kB         <span class="number">16.119s</span></span><br><span class="line">             stdb<span class="selector-class">.prometheus</span>          <span class="number">0</span>        <span class="number">283</span>    <span class="number">56.8</span> kB         <span class="number">12.608s</span></span><br><span class="line">  stdb<span class="selector-class">.third_contract_market</span>          <span class="number">0</span>          <span class="number">2</span>     <span class="number">0.4</span> kB         <span class="number">16.107s</span></span><br><span class="line">       stdb<span class="selector-class">.report_id_entity</span>          <span class="number">0</span>          <span class="number">5</span>     <span class="number">0.1</span> kB         <span class="number">13.235s</span></span><br><span class="line">           stdb<span class="selector-class">.user_setting</span>          <span class="number">0</span>          <span class="number">7</span>     <span class="number">0.5</span> kB         <span class="number">16.055s</span></span><br><span class="line">                   stdb<span class="selector-class">.rule</span>          <span class="number">0</span>         <span class="number">39</span>    <span class="number">13.0</span> kB         <span class="number">13.143s</span></span><br><span class="line">    stdb<span class="selector-class">.verification_result</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">16.398s</span></span><br><span class="line">     stdb<span class="selector-class">.sample_grade_model</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">13.639s</span></span><br><span class="line">           stdb<span class="selector-class">.subscription</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">13.503s</span></span><br><span class="line">                 stdb.<span class="string">&quot;user&quot;</span>          <span class="number">0</span>         <span class="number">34</span>    <span class="number">29.2</span> kB         <span class="number">14.018s</span></span><br><span class="line">           stdb<span class="selector-class">.user_use_gas</span>          <span class="number">0</span>          <span class="number">0</span>                    <span class="number">13.895s</span></span><br><span class="line">----------------------------  ---------  ---------  ---------  --------------</span><br><span class="line">     COPY Threads Completion          <span class="number">0</span>          <span class="number">4</span>                    <span class="number">28.540s</span></span><br><span class="line">              Create Indexes          <span class="number">0</span>         <span class="number">92</span>                    <span class="number">19.382s</span></span><br><span class="line">      Index Build Completion          <span class="number">0</span>         <span class="number">92</span>                     <span class="number">1.384s</span></span><br><span class="line">             Reset Sequences          <span class="number">0</span>         <span class="number">16</span>                     <span class="number">0.746s</span></span><br><span class="line">                Primary Keys          <span class="number">0</span>         <span class="number">66</span>                    <span class="number">12.146s</span></span><br><span class="line">         Create Foreign Keys          <span class="number">0</span>          <span class="number">0</span>                     <span class="number">0.000s</span></span><br><span class="line">             Create Triggers          <span class="number">0</span>         <span class="number">14</span>                     <span class="number">2.716s</span></span><br><span class="line">             Set Search Path          <span class="number">0</span>          <span class="number">1</span>                     <span class="number">0.306s</span></span><br><span class="line">            Install Comments          <span class="number">0</span>         <span class="number">74</span>                    <span class="number">13.552s</span></span><br><span class="line">----------------------------  ---------  ---------  ---------  --------------</span><br><span class="line">           Total import <span class="selector-tag">time</span>          ✓      <span class="number">92247</span>    <span class="number">40.2</span> MB       <span class="number">1</span>m18.<span class="number">772s</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="使用pgbench测试PostgreSQL"><a href="#使用pgbench测试PostgreSQL" class="headerlink" title="使用pgbench测试PostgreSQL"></a>使用pgbench测试PostgreSQL</h2><ul>
<li>pgbench</li>
</ul>
<h2 id="Mysql-SQL-迁移-Postgres"><a href="#Mysql-SQL-迁移-Postgres" class="headerlink" title="Mysql SQL 迁移 Postgres"></a>Mysql SQL 迁移 Postgres</h2>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Limit 用法</span></span><br><span class="line"><span class="bullet">  -</span> mysql limit 0,1</span><br><span class="line"><span class="bullet">  -</span> postgres limit 1 offset 0</span><br><span class="line"></span><br><span class="line"><span class="section"># REGEXP 用法</span></span><br><span class="line"><span class="bullet">  -</span> mysql REGEXP</span><br><span class="line"><span class="bullet">  -</span> postgres ~</span><br></pre></td></tr></table></figure>

<h2 id="路上遇到的坑"><a href="#路上遇到的坑" class="headerlink" title="路上遇到的坑"></a>路上遇到的坑</h2><ul>
<li>PostgreSQL列名区分大小写<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">blocface=<span class="comment"># \d public.alert</span></span><br><span class="line">                                         Table <span class="string">&quot;public.alert&quot;</span></span><br><span class="line">   Column    |<span class="string">            Type             </span>|<span class="string"> Collation </span>|<span class="string"> Nullable </span>|<span class="string">              Default</span></span><br><span class="line"><span class="string">-------------+-----------------------------+-----------+----------+-----------------------------------</span></span><br><span class="line"><span class="string"> id          </span>|<span class="string"> integer                     </span>|<span class="string">           </span>|<span class="string"> not null </span>|<span class="string"> nextval(&#x27;alert_id_seq&#x27;::regclass)</span></span><br><span class="line"><span class="string"> time_create </span>|<span class="string"> timestamp without time zone </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> time_update |<span class="string"> timestamp without time zone </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> time_delete |<span class="string"> timestamp without time zone </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> name        |<span class="string"> character varying(255)      </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> mode        |<span class="string"> integer                     </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> condition   |<span class="string"> integer                     </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> silence     |<span class="string"> integer                     </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> user_id     |<span class="string"> character varying(64)       </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> group_id    |<span class="string"> character varying(64)       </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> viewer      |<span class="string"> character varying(32)       </span>|<span class="string">           </span>|<span class="string">          </span>|</span><br><span class="line"> isDeleted   |<span class="string"> integer                     </span>|<span class="string">           </span>|<span class="string">          </span>|<span class="string"> 0</span></span><br><span class="line"><span class="string">Indexes:</span></span><br><span class="line"><span class="string">    &quot;alert_pkey&quot; PRIMARY KEY, btree (id)</span></span><br><span class="line"><span class="string">    &quot;IDX_alert_time_delete&quot; btree (time_delete)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 所有未双引号的标识符(包括列名)在PostgreSQL中被折叠为小写，用双引号创建的列名并因此保留了大写字母，必须在余下的时间将双引号括起来(&quot;first_Name&quot;)</span></span><br><span class="line"><span class="string">blocface=# SELECT isDeleted from public.alert;</span></span><br><span class="line"><span class="string">ERROR:  column &quot;isdeleted&quot; does not exist</span></span><br><span class="line"><span class="string">LINE 1: SELECT isDeleted from public.alert;</span></span><br><span class="line"><span class="string">               ^</span></span><br><span class="line"><span class="string">HINT:  Perhaps you meant to reference the column &quot;alert.isDeleted&quot;.</span></span><br><span class="line"><span class="string">blocface=# SELECT &quot;isDeleted&quot; from public.alert;</span></span><br><span class="line"><span class="string"> isDeleted</span></span><br><span class="line"><span class="string">-----------</span></span><br><span class="line"><span class="string">(0 rows)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.howtoing.com/how-to-migrate-mysql-database-to-postgres-using-pgloader">如果使用pgloader将MySQL数据库迁移到PostgreSQL</a></li>
<li>[from Mysql to PostgreSQL](ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMdgFTAb5v6IKtasDh9HWzx8hiLhGjZ0acwke/O9vcRO <a href="mailto:&#99;&#104;&#x79;&#105;&#x79;&#97;&#x71;&#105;&#110;&#103;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;">&#99;&#104;&#x79;&#105;&#x79;&#97;&#x71;&#105;&#110;&#103;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a>)</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Build Go Executables for Multiple Platforms</title>
    <url>/2021/10/26/Build-Go-Executables-for-Multiple-Platforms/</url>
    <content><![CDATA[<h1 id="构建Go可执行文件"><a href="#构建Go可执行文件" class="headerlink" title="构建Go可执行文件"></a>构建Go可执行文件</h1><blockquote>
<p>Go most powerful features is the ability to cross-build(跨平台交叉编译构建可执行文件)executables for any Go-supported foreign platform.</p>
</blockquote>
<span id="more"></span>

<h2 id="Installing-Go-Programs-from-Version-Control"><a href="#Installing-Go-Programs-from-Version-Control" class="headerlink" title="Installing Go Programs from Version Control"></a>Installing Go Programs from Version Control</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">go</span> get -u <span class="keyword">package</span>-<span class="keyword">import</span>-path</span><br></pre></td></tr></table></figure>

<h2 id="Building-an-Executable"><a href="#Building-an-Executable" class="headerlink" title="Building an Executable"></a>Building an Executable</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This command creates the executable, and also create the ./build directory if it doesn&#x27;t exist</span></span><br><span class="line">$ go build -o build<span class="regexp">/caddy-server github.com/m</span>holt<span class="regexp">/caddy/</span>caddy</span><br></pre></td></tr></table></figure>

<h2 id="Installing-an-Executable"><a href="#Installing-an-Executable" class="headerlink" title="Installing an Executable"></a>Installing an Executable</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ go install github.com<span class="regexp">/mholt/</span>caddy/caddy</span><br></pre></td></tr></table></figure>

<h2 id="Cross-Compiling"><a href="#Cross-Compiling" class="headerlink" title="Cross Compiling"></a>Cross Compiling</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; Cross-compiling works <span class="keyword">by</span> setting required environment variables that specify <span class="keyword">the</span> target operating <span class="keyword">system</span> <span class="keyword">and</span> architecture.</span><br><span class="line">   - GOOS: <span class="keyword">the</span> target operating <span class="keyword">system</span></span><br><span class="line">   - GOARCH: <span class="keyword">the</span> target architecture</span><br><span class="line"></span><br><span class="line"><span class="comment"># the env command runs a program in a modified environment.</span></span><br><span class="line">$ env GOOS=target-OS GOARCH=target-architecture go build package-import-path</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">GOOS - Target Operating System</th>
<th align="center">GOARCH - Target Platform</th>
</tr>
</thead>
<tbody><tr>
<td align="center">android</td>
<td align="center">arm</td>
</tr>
<tr>
<td align="center">darwin</td>
<td align="center">386</td>
</tr>
<tr>
<td align="center">darwin</td>
<td align="center">amd64</td>
</tr>
<tr>
<td align="center">darwin</td>
<td align="center">arm</td>
</tr>
<tr>
<td align="center">darwin</td>
<td align="center">arm64</td>
</tr>
<tr>
<td align="center">dragonfly</td>
<td align="center">amd64</td>
</tr>
<tr>
<td align="center">freebsd</td>
<td align="center">386</td>
</tr>
<tr>
<td align="center">freebsd</td>
<td align="center">amd64</td>
</tr>
<tr>
<td align="center">freebsd</td>
<td align="center">arm</td>
</tr>
<tr>
<td align="center">linux</td>
<td align="center">386</td>
</tr>
<tr>
<td align="center">linux</td>
<td align="center">amd64</td>
</tr>
<tr>
<td align="center">linux</td>
<td align="center">arm</td>
</tr>
<tr>
<td align="center">linux</td>
<td align="center">arm64</td>
</tr>
<tr>
<td align="center">linux</td>
<td align="center">ppc64</td>
</tr>
<tr>
<td align="center">linux</td>
<td align="center">ppc64le</td>
</tr>
<tr>
<td align="center">linux</td>
<td align="center">mips</td>
</tr>
<tr>
<td align="center">linux</td>
<td align="center">mips64le</td>
</tr>
<tr>
<td align="center">netbsd</td>
<td align="center">386</td>
</tr>
<tr>
<td align="center">netbsd</td>
<td align="center">amd64</td>
</tr>
<tr>
<td align="center">netbsd</td>
<td align="center">arm</td>
</tr>
<tr>
<td align="center">openbsd</td>
<td align="center">386</td>
</tr>
<tr>
<td align="center">openbsd</td>
<td align="center">amd64</td>
</tr>
<tr>
<td align="center">openbsd</td>
<td align="center">arm</td>
</tr>
<tr>
<td align="center">plan9</td>
<td align="center">386</td>
</tr>
<tr>
<td align="center">plan9</td>
<td align="center">amd64</td>
</tr>
<tr>
<td align="center">solaris</td>
<td align="center">amd64</td>
</tr>
<tr>
<td align="center">windows</td>
<td align="center">386</td>
</tr>
<tr>
<td align="center">windows</td>
<td align="center">amd64</td>
</tr>
</tbody></table>
<h2 id="Creating-a-Script-to-Automate-Cross-Compilation"><a href="#Creating-a-Script-to-Automate-Cross-Compilation" class="headerlink" title="Creating a Script to Automate Cross-Compilation"></a>Creating a Script to Automate Cross-Compilation</h2><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">$ cd ~</span><br><span class="line">$ vim go-executable-build.sh</span><br><span class="line">#!/usr/bin/env bash</span><br><span class="line"></span><br><span class="line">######################################################################</span><br><span class="line"># @author      : chyiyaqing (<span class="number">404</span>@gmail.com)</span><br><span class="line"># @file        : go-executable-build</span><br><span class="line"># @created     : Tuesday Oct <span class="number">26</span>, <span class="number">2021</span> <span class="number">18</span>:<span class="number">22</span>:<span class="number">35</span> CST</span><br><span class="line">#</span><br><span class="line"># @description : Creating a Script to Automate Cross-Compilation go build</span><br><span class="line">######################################################################</span><br><span class="line"></span><br><span class="line"># $<span class="number">0</span> -- contains the name <span class="keyword">of</span> the script you executed</span><br><span class="line">package=$<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Make sure the user provided this value</span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">&quot;$package&quot;</span>  ]]; then</span><br><span class="line">   echo <span class="string">&quot;usage: $0 &lt;package-name&gt;&quot;</span></span><br><span class="line">   # <span class="number">0</span> for successful executions and any non-zero value for unsuccessful executions</span><br><span class="line">   exit <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># extract the package name <span class="keyword">from</span> the ath</span><br><span class="line">package_split=($&#123;package<span class="comment">//\// &#125;)</span></span><br><span class="line">package_name=$&#123;package_split[<span class="number">-1</span>]&#125;</span><br><span class="line"></span><br><span class="line">platforms=(<span class="string">&quot;linux/amd64&quot;</span>, <span class="string">&quot;darwin/amd64&quot;</span>, <span class="string">&quot;linux/arm64&quot;</span>, <span class="string">&quot;darwin/arm64&quot;</span>)</span><br><span class="line"></span><br><span class="line"># ierate though the array <span class="keyword">of</span> platforms, split each platform into values for the GOOS and GOARCH</span><br><span class="line">for platform <span class="keyword">in</span> <span class="string">&quot;$&#123;platform[@]&#125;&quot;</span></span><br><span class="line">do</span><br><span class="line">   platform_split = ($&#123;platform<span class="comment">//\// &#125;)</span></span><br><span class="line">   GOOS=$&#123;platform_split[<span class="number">0</span>]&#125;</span><br><span class="line">   GOARCH=$&#123;platform_split[<span class="number">1</span>]&#125;</span><br><span class="line"></span><br><span class="line">   output_name=$package_name<span class="string">&#x27;-&#x27;</span>$GOOS<span class="string">&#x27;-&#x27;</span>$GOARCH</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> [ $GOOS = <span class="string">&quot;windows&quot;</span>  ]; then</span><br><span class="line">    ¦   output_name+=<span class="string">&#x27;.exe&#x27;</span></span><br><span class="line">   fi</span><br><span class="line"></span><br><span class="line">   env GOOS=$GOOS GOARCH=$GOARCH go build -o $output_name $package</span><br><span class="line"></span><br><span class="line">   # check <span class="keyword">if</span> there were errors building the executable</span><br><span class="line">   <span class="keyword">if</span> [ $? -ne <span class="number">0</span>  ]; then</span><br><span class="line">      echo <span class="string">&#x27;An error has occurred! Aborting the script execution...&#x27;</span></span><br><span class="line">     ¦exec <span class="number">1</span></span><br><span class="line">   fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Git Intro</title>
    <url>/2021/10/26/Git-Intro/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><span id="more"></span>

<h2 id="git-commit-message"><a href="#git-commit-message" class="headerlink" title="git commit message"></a>git commit message</h2><ul>
<li>git commit -m “<type>(<scope>): <subject>“<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># type:</span></span><br><span class="line"><span class="bullet">  -</span> feat: feature</span><br><span class="line"><span class="bullet">  -</span> fix: fix bug</span><br><span class="line"><span class="bullet">  -</span> docs: 修改README</span><br><span class="line"><span class="bullet">  -</span> style: 格式化</span><br><span class="line"><span class="bullet">  -</span> refactor: 代码重构</span><br><span class="line"><span class="bullet">  -</span> test: 测试</span><br><span class="line"><span class="bullet">  -</span> chore: 改变构建流程，增加依赖库</span><br><span class="line"><span class="bullet">  -</span> perf: 性能优化</span><br><span class="line"><span class="bullet">  -</span> revert: 回滚到上一个版本</span><br><span class="line"></span><br><span class="line"><span class="section"># scope:</span></span><br><span class="line">  &gt; 说明commit影响的范围 [数据层、控制层、视图层]</span><br><span class="line"></span><br><span class="line"><span class="section"># subject:</span></span><br><span class="line">  &gt; commit目的的简短描述,不超过50个字符</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Unix&amp;Linux FAQ</title>
    <url>/2021/10/27/Unix-Linux-FAQ/</url>
    <content><![CDATA[<h2 id="查看状态信息"><a href="#查看状态信息" class="headerlink" title="查看状态信息"></a>查看状态信息</h2><ul>
<li><ol>
<li>calculate total disk space<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">df</span> <span class="literal">-</span><span class="comment">h</span> --<span class="comment">output=size</span> --<span class="comment">total</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="2">
<li>dig &amp; nslookup<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> dig, nslookup 用于网络故障排除和收集有关域名的信息</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dig: Domain Information Gopher</span></span><br><span class="line"><span class="meta">  &gt;</span><span class="bash"> 一种DNS查找程序,用于探测DNS服务器并对与DNS服务相关的问题进行故障排查</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Nslookup:</span> </span><br></pre></td></tr></table></figure>
<h2 id="内核参数调优"><a href="#内核参数调优" class="headerlink" title="内核参数调优"></a>内核参数调优</h2></li>
</ol>
</li>
<li></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hacker Scripts</title>
    <url>/2021/10/31/Hacker-Scripts/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>My World</title>
    <url>/2021/11/03/My-World/</url>
    <content><![CDATA[<h1 id="My-World-我的世界"><a href="#My-World-我的世界" class="headerlink" title="My World (我的世界)"></a>My World (我的世界)</h1><span id="more"></span>
<h2 id="Jargon"><a href="#Jargon" class="headerlink" title="Jargon"></a>Jargon</h2><ul>
<li>IMO: In My Opinion</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>School of SRE</title>
    <url>/2021/11/16/School-of-SRE/</url>
    <content><![CDATA[<h1 id="SRE-Site-Reliability-Engineers"><a href="#SRE-Site-Reliability-Engineers" class="headerlink" title="SRE (Site Reliability Engineers)"></a>SRE (Site Reliability Engineers)</h1><ul>
<li>Level 101<ul>
<li><a href="#fundamentals-series">Fundamentals Series</a><ul>
<li>Linux Basics</li>
<li>Git</li>
<li>Linux Networking</li>
</ul>
</li>
<li><a href="#python-and-web">Python and Web</a></li>
<li>Data<ul>
<li>Relational databasees(MySQL)</li>
<li>NoSQL concepts</li>
<li>Big Data</li>
</ul>
</li>
<li>Systems Design</li>
<li>Metrics and Monitoring</li>
<li>Security</li>
</ul>
</li>
<li>Level 102<ul>
<li>Linux Intermediate</li>
<li>Linux Advanced<ul>
<li>Containers and orchestration</li>
<li>System Calls and Signals</li>
</ul>
</li>
<li>Networking</li>
<li>System Design</li>
<li>System troubleshooting and performance improvements</li>
<li>Continuous Integration and Continuous Delivery</li>
</ul>
</li>
</ul>
<span id="more"></span>


<h2 id="Fundamentals-Series"><a href="#Fundamentals-Series" class="headerlink" title="Fundamentals Series"></a>Fundamentals Series</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">say</span> hello</span><br></pre></td></tr></table></figure>

<h2 id="Python-and-Web"><a href="#Python-and-Web" class="headerlink" title="Python and Web"></a>Python and Web</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">say</span> python</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Markdown Intro</title>
    <url>/2021/11/18/Markdown-Intro/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Patterns of Distributed Systems</title>
    <url>/2021/11/25/Patterns-of-Distributed-Systems/</url>
    <content><![CDATA[<h1 id="Patterns-of-Distributed-Systems"><a href="#Patterns-of-Distributed-Systems" class="headerlink" title="Patterns of Distributed Systems"></a>Patterns of Distributed Systems</h1><ul>
<li>Distributed systems - An implementation perspective<table>
<thead>
<tr>
<th align="left">Type of platform/framework</th>
<th align="left">Example</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Databases</td>
<td align="left">Cassandra, HBase, Riak</td>
</tr>
<tr>
<td align="left">Message Brokers</td>
<td align="left">Kafka, Pulsar</td>
</tr>
<tr>
<td align="left">Infrastructure</td>
<td align="left">Kubernetes, Mesos, Zookeeper, etcd, Consul</td>
</tr>
<tr>
<td align="left">In Memory Data/Compute Grids</td>
<td align="left">Hazelcast, Pivotal Gemfire</td>
</tr>
<tr>
<td align="left">Stateful Microservices</td>
<td align="left">Akka Actors, Axon</td>
</tr>
<tr>
<td align="left">File Systems</td>
<td align="left">HDFS, Ceph</td>
</tr>
</tbody></table>
</li>
</ul>
<span id="more"></span>


<h2 id="Problems-and-Their-Recurriing-Solutions"><a href="#Problems-and-Their-Recurriing-Solutions" class="headerlink" title="Problems and Their Recurriing Solutions"></a>Problems and Their Recurriing Solutions</h2><blockquote>
<p>Serveral things can go wrong when data is stored on multiple servers.</p>
</blockquote>
<ul>
<li><p>Process crashes</p>
<ul>
<li>It can be taken down for routine maintenance by system administrators</li>
<li>It can be killed doing some file IO because the disk if full and the exception is not properly handled.</li>
<li>It cloud environments, it can be even trickier, as some unrelated events can bring the servers down.<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; Flushing data <span class="keyword">to</span> the disk <span class="keyword">is</span> one <span class="keyword">of</span> the most <span class="type">time</span> consuming operations, <span class="keyword">not</span> every <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">storage</span> can be flushed <span class="keyword">to</span> disk.</span><br><span class="line"></span><br><span class="line"># <span class="keyword">Write</span>-Ahead <span class="keyword">Log</span></span><br><span class="line">&gt; Servers store <span class="keyword">each</span> state change <span class="keyword">as</span> a command <span class="keyword">in</span> an append-<span class="keyword">only</span> file <span class="keyword">on</span> a hard disk. Appending a file <span class="keyword">is</span> generally a very fast operation, so it can be done <span class="keyword">without</span> impacting performance. This gives a durability guarantee. The data will <span class="keyword">not</span> <span class="keyword">get</span> lost even <span class="keyword">if</span> the <span class="keyword">server</span> abruptly crashes <span class="keyword">and</span> <span class="keyword">then</span> restarts</span><br><span class="line"></span><br><span class="line">&gt; But clients will <span class="keyword">not</span> be able <span class="keyword">to</span> <span class="keyword">get</span> <span class="keyword">or</span> store <span class="keyword">any</span> data till the <span class="keyword">server</span> <span class="keyword">is</span> back up. lack availability <span class="keyword">in</span> the <span class="keyword">case</span> <span class="keyword">of</span> <span class="keyword">server</span> failure. One <span class="keyword">of</span> the obvious solutions <span class="keyword">is</span> <span class="keyword">to</span> store the data <span class="keyword">on</span> multiple servers. So we can replicate the <span class="keyword">write</span> ahead <span class="keyword">log</span> <span class="keyword">on</span> multiple servers.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Network delays(延迟)</p>
<blockquote>
<p>In the TCP/IP protocol stack, there is no upper bound on delays caused in transmitting messages across a network.</p>
</blockquote>
<ul>
<li>A particular server can not wait indefinitely(无期限) to know if another server has crashed.<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; To tackle <span class="keyword">the</span> <span class="keyword">first</span> problem, every server sends <span class="keyword">a</span> HeartBeat message <span class="built_in">to</span> other servers <span class="keyword">at</span> <span class="keyword">a</span> regular interval.</span><br></pre></td></tr></table></figure></li>
<li>There should not be two set of servers, each considering another set to have failed, and therefore continuing to serve different sets of clients. This is called the split brain(脑裂)<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">In gneral, If we want <span class="built_in">to</span> tolerate f failures we need <span class="built_in">to</span> cluster size <span class="keyword">of</span> <span class="number">2</span>f + <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">Leader <span class="keyword">and</span> Followers is used <span class="keyword">in</span> this situation. One <span class="keyword">of</span> <span class="keyword">the</span> servers is elected <span class="keyword">a</span> leader <span class="keyword">and</span> <span class="keyword">the</span> other servers acts <span class="keyword">as</span> followers.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Process Pauses</p>
<ul>
<li>Generation Clock<blockquote>
<p>A monotenically increasing number indicating the generation of the server.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Unsynchronized Clocks and Ordering Events</p>
<blockquote>
<p>The main reason we can not use system clocks is that system clocks across servers are not guaranteed to be synchronized. A time-of-the day clock in a computer is amanaged by a quartz crystal and measures time based on the oscilations of the crystal.<br>The clocks across a set of servers are synchronized by a service called NTP. This service periodically checks a set of global time servers, and adjusts the computer clock accordingly.</p>
</blockquote>
<ul>
<li>Lamport(烂波特) Clock<blockquote>
<p>Use logical timestamps as a version for a value to allow ordering of values across servers.</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="Pattern-Sequence"><a href="#Pattern-Sequence" class="headerlink" title="Pattern Sequence"></a>Pattern Sequence</h2><blockquote>
<p>In very simple terms, Consensus(共识) refers to a set of servers which agree on stored data, the order in which the data is stored and when to make that data visible to the clients.</p>
</blockquote>
<ul>
<li>Pattern Sequence(序列) for implementing consensus<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">Consensus implementations use <span class="keyword">state</span> machine replication <span class="keyword">to</span> achieve fault tolerance.</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><ul>
<li>Raft</li>
<li>Zab</li>
<li>Cassandra</li>
<li>Epoch’s in Kafka</li>
</ul>
]]></content>
  </entry>
</search>
