<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stay Hungry Stay Foolish</title>
  <icon>http://chyidl.github.io/icon.png</icon>
  <subtitle>Alaways be curious to learn more and achieve more.</subtitle>
  <link href="http://chyidl.github.io/atom.xml" rel="self"/>
  
  <link href="http://chyidl.github.io/"/>
  <updated>2021-09-16T22:29:27.000Z</updated>
  <id>http://chyidl.github.io/</id>
  
  <author>
    <name>chyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Blockchain Intro</title>
    <link href="http://chyidl.github.io/2021/09/17/Blockchain-Intro/"/>
    <id>http://chyidl.github.io/2021/09/17/Blockchain-Intro/</id>
    <published>2021-09-16T22:29:27.000Z</published>
    <updated>2021-09-16T22:29:27.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Huawei LiteOS Intro</title>
    <link href="http://chyidl.github.io/2021/09/14/Huawei-LiteOS-Intro/"/>
    <id>http://chyidl.github.io/2021/09/14/Huawei-LiteOS-Intro/</id>
    <published>2021-09-14T15:58:01.000Z</published>
    <updated>2021-09-14T15:58:01.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Huawei-LiteOS&quot;&gt;&lt;a href=&quot;#Huawei-LiteOS&quot; class=&quot;headerlink&quot; title=&quot;Huawei LiteOS&quot;&gt;&lt;/a&gt;Huawei LiteOS&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;面向IOT领域，构建轻量级物联网操作系统, 目前支持ARM64,ARM Contex-A, ARM Cortex-M0, Cortex-M3, Cortex-M4, Cortex-M7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优势:&lt;ul&gt;
&lt;li&gt;高实时性,高稳定性&lt;/li&gt;
&lt;li&gt;超小内核，基础内核体积可以裁剪至不到10K&lt;/li&gt;
&lt;li&gt;低功耗&lt;/li&gt;
&lt;li&gt;支持功能静态裁剪&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="IOT" scheme="http://chyidl.github.io/tags/IOT/"/>
    
  </entry>
  
  <entry>
    <title>Go PProf Intro</title>
    <link href="http://chyidl.github.io/2021/09/13/Go-PProf-Intro/"/>
    <id>http://chyidl.github.io/2021/09/13/Go-PProf-Intro/</id>
    <published>2021-09-13T08:55:41.000Z</published>
    <updated>2021-09-13T08:55:41.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Go-Profling-剖析&quot;&gt;&lt;a href=&quot;#Go-Profling-剖析&quot; class=&quot;headerlink&quot; title=&quot;Go Profling - 剖析&quot;&gt;&lt;/a&gt;Go Profling - 剖析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Using “pprof” to profiling your program&lt;br&gt;Go语言可视化性能分析工具,PProf以profile.proto读取分析样本集合，并生成报告可视化帮助分析数据(支持文本和图形报告)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;runtime/pprof: 采集程序指定区块的运行数据分析&lt;/li&gt;
&lt;li&gt;net/http/pprof: 基于HTTP Server运行,采集运行时数据分析&lt;/li&gt;
&lt;li&gt;go test: 通过运行测试用例，指定所需标识进行采样&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装可视化工具graphviz查看profile&lt;/p&gt;
&lt;figure class=&quot;highlight vala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# Mac: $ brew install graphviz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# Linux: $ sudo apt install graphviz&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;报告生成 Report generation&lt;/li&gt;
&lt;li&gt;交互终端使用 Interactive terminal use&lt;/li&gt;
&lt;li&gt;Web页面 Web interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以做那些&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU Profiling: CPU分析&lt;ul&gt;
&lt;li&gt;按照一定频率采集监听应用程序CPU使用情况，确定应用程序的主动消耗CPU周期时花费时间的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Memory Profiling: 内存分析&lt;ul&gt;
&lt;li&gt;程序进行堆分配时记录堆栈跟踪，监视当前和历史内存使用情况，检查内存泄漏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Block Profiling: 阻塞分析&lt;ul&gt;
&lt;li&gt;记录Goroutine阻塞等待同步的位置，默认不开启，需要调用runtime.SetBlockProfileRate 设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mutex Profiling: 互斥锁分析&lt;ul&gt;
&lt;li&gt;报告互斥锁的竞争情况, 默认不开启, runtime.SetMutexProfileFraction 设置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Goroutine Profiling: Goroutine分析&lt;ul&gt;
&lt;li&gt;对当前应用程序正在运行的Goroutine进行堆栈跟踪和分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="性能分析" scheme="http://chyidl.github.io/tags/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Go Constants</title>
    <link href="http://chyidl.github.io/2021/09/12/Go-Constants/"/>
    <id>http://chyidl.github.io/2021/09/12/Go-Constants/</id>
    <published>2021-09-11T22:54:54.000Z</published>
    <updated>2021-09-11T22:54:54.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Constants-常量&quot;&gt;&lt;a href=&quot;#Constants-常量&quot; class=&quot;headerlink&quot; title=&quot;Constants 常量&quot;&gt;&lt;/a&gt;Constants 常量&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Go是静态类型语言，不允许同步类型的数值类型进行计算. 不允许float64 + int 甚至 int32 + int. 如果你希望不同类型进行计算需要显式转换后在进行 int(float64) + int.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="常量" scheme="http://chyidl.github.io/tags/%E5%B8%B8%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ansible Intro</title>
    <link href="http://chyidl.github.io/2021/09/11/Ansible-Intro/"/>
    <id>http://chyidl.github.io/2021/09/11/Ansible-Intro/</id>
    <published>2021-09-11T14:12:27.000Z</published>
    <updated>2021-09-11T14:12:27.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Ansible&quot;&gt;&lt;a href=&quot;#Ansible&quot; class=&quot;headerlink&quot; title=&quot;Ansible&quot;&gt;&lt;/a&gt;Ansible&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Tool to automate IT</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Go CLI Intro</title>
    <link href="http://chyidl.github.io/2021/09/11/Go-CLI-Intro/"/>
    <id>http://chyidl.github.io/2021/09/11/Go-CLI-Intro/</id>
    <published>2021-09-11T10:16:25.000Z</published>
    <updated>2021-09-11T10:16:25.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;flag&quot;&gt;&lt;a href=&quot;#flag&quot; class=&quot;headerlink&quot; title=&quot;flag&quot;&gt;&lt;/a&gt;flag&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;命令行flag解析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;flag</summary>
        
      
    
    
    
    
    <category term="CLI" scheme="http://chyidl.github.io/tags/CLI/"/>
    
  </entry>
  
  <entry>
    <title>Go Concurrency Patterns</title>
    <link href="http://chyidl.github.io/2021/09/10/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://chyidl.github.io/2021/09/10/Go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2021-09-10T09:22:42.000Z</published>
    <updated>2021-09-10T09:22:42.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Golang&quot;&gt;&lt;a href=&quot;#Golang&quot; class=&quot;headerlink&quot; title=&quot;Golang&quot;&gt;&lt;/a&gt;Golang&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simplicity: 简单&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Simplicity is prerequisite for reliability. 简单是可靠的先觉条件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Readablity: 可读性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Readability is essential for maintainablity. 可读性对于可维护性至关重要&lt;br&gt;Programs must be written for people to read, and only incidentally for machine to execute. 程序必须是为人们阅读而编写的，而偶然为及其执行而编写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Productivity: 生产力&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Design is the art of arranging code to work today, and be changeable forever.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Golang" scheme="http://chyidl.github.io/tags/Golang/"/>
    
    <category term="sync" scheme="http://chyidl.github.io/tags/sync/"/>
    
  </entry>
  
  <entry>
    <title>gorm intro</title>
    <link href="http://chyidl.github.io/2021/09/09/gorm-intro/"/>
    <id>http://chyidl.github.io/2021/09/09/gorm-intro/</id>
    <published>2021-09-09T05:24:11.000Z</published>
    <updated>2021-09-09T05:24:11.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;GORM&quot;&gt;&lt;a href=&quot;#GORM&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="ORM" scheme="http://chyidl.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>Error Code Design Intro</title>
    <link href="http://chyidl.github.io/2021/09/09/Error-Code-Design-Intro/"/>
    <id>http://chyidl.github.io/2021/09/09/Error-Code-Design-Intro/</id>
    <published>2021-09-09T05:13:07.000Z</published>
    <updated>2021-09-09T05:13:07.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;错误码设计&quot;&gt;&lt;a href=&quot;#错误码设计&quot; class=&quot;headerlink&quot; title=&quot;错误码设计&quot;&gt;&lt;/a&gt;错误码设计&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;错误码实现方式&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
        
      
    
    
    
    
    <category term="Error" scheme="http://chyidl.github.io/tags/Error/"/>
    
  </entry>
  
  <entry>
    <title>SwaggerAPI intro</title>
    <link href="http://chyidl.github.io/2021/09/09/SwaggerAPI-intro/"/>
    <id>http://chyidl.github.io/2021/09/09/SwaggerAPI-intro/</id>
    <published>2021-09-09T03:45:13.000Z</published>
    <updated>2021-09-09T03:45:13.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Swagger&quot;&gt;&lt;a href=&quot;#Swagger&quot; class=&quot;headerlink&quot; title=&quot;Swagger&quot;&gt;&lt;/a&gt;Swagger&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Swagger是一套围绕OpenAPI规范构建的开源工具,可以设计·构建·编写·使用RESTAPI&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Swagger编辑器:&lt;/li&gt;
&lt;li&gt;Swagger UI: 将OpenAPI规范呈现为交互式API文档，并可以在浏览器中尝试API调用&lt;/li&gt;
&lt;li&gt;Swagger Codegen: 根据OpenAPI规范，生成服务器存根和客户端代码库&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="SwaggerAPI" scheme="http://chyidl.github.io/tags/SwaggerAPI/"/>
    
  </entry>
  
  <entry>
    <title>Gin Crash Course</title>
    <link href="http://chyidl.github.io/2021/09/08/Gin-Crash-Course/"/>
    <id>http://chyidl.github.io/2021/09/08/Gin-Crash-Course/</id>
    <published>2021-09-08T14:00:11.000Z</published>
    <updated>2021-09-08T14:00:11.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Gin-Web-Framework&quot;&gt;&lt;a href=&quot;#Gin-Web-Framework&quot; class=&quot;headerlink&quot; title=&quot;Gin Web Framework&quot;&gt;&lt;/a&gt;Gin Web Framework&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Gin是Go语言编写的Web框架，功能完善，使用简单，性能高，Gin核心的路由功能是通过HttpRouter实现，具有很高的路由性能.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Gin" scheme="http://chyidl.github.io/tags/Gin/"/>
    
    <category term="Web框架" scheme="http://chyidl.github.io/tags/Web%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构-Radix-Tree</title>
    <link href="http://chyidl.github.io/2021/09/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Radix-Tree/"/>
    <id>http://chyidl.github.io/2021/09/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Radix-Tree/</id>
    <published>2021-09-08T12:14:39.000Z</published>
    <updated>2021-09-08T12:14:39.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Radix-Tree-基数树&quot;&gt;&lt;a href=&quot;#Radix-Tree-基数树&quot; class=&quot;headerlink&quot; title=&quot;Radix Tree - 基数树&quot;&gt;&lt;/a&gt;Radix Tree -</summary>
        
      
    
    
    
    
    <category term="数据结构" scheme="http://chyidl.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>静态代码检查 golangci-lint</title>
    <link href="http://chyidl.github.io/2021/09/08/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5-golangci-lint/"/>
    <id>http://chyidl.github.io/2021/09/08/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5-golangci-lint/</id>
    <published>2021-09-08T11:42:05.000Z</published>
    <updated>2021-09-08T11:42:05.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;静态代码检查&quot;&gt;&lt;a href=&quot;#静态代码检查&quot; class=&quot;headerlink&quot; title=&quot;静态代码检查&quot;&gt;&lt;/a&gt;静态代码检查&lt;/h1&gt;</summary>
    
    
    
    
    <category term="golangci-lint" scheme="http://chyidl.github.io/tags/golangci-lint/"/>
    
  </entry>
  
  <entry>
    <title>Makefile Intro</title>
    <link href="http://chyidl.github.io/2021/09/08/Makefile-Intro/"/>
    <id>http://chyidl.github.io/2021/09/08/Makefile-Intro/</id>
    <published>2021-09-08T09:00:38.000Z</published>
    <updated>2021-09-08T09:00:38.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>gRPC Intro</title>
    <link href="http://chyidl.github.io/2021/09/07/gRPC-Intro/"/>
    <id>http://chyidl.github.io/2021/09/07/gRPC-Intro/</id>
    <published>2021-09-07T13:50:41.000Z</published>
    <updated>2021-09-07T13:50:41.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;gRPC&quot;&gt;&lt;a href=&quot;#gRPC&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="gRPC" scheme="http://chyidl.github.io/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>Protocol Buffer Intro</title>
    <link href="http://chyidl.github.io/2021/09/07/Protocol-Buffer-Intro/"/>
    <id>http://chyidl.github.io/2021/09/07/Protocol-Buffer-Intro/</id>
    <published>2021-09-07T13:43:25.000Z</published>
    <updated>2021-09-07T13:43:25.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Protocol-Buffers&quot;&gt;&lt;a href=&quot;#Protocol-Buffers&quot; class=&quot;headerlink&quot; title=&quot;Protocol Buffers&quot;&gt;&lt;/a&gt;Protocol Buffers&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Google 开发的一套对数据结构进行序列化的方法，可用作数据通信协议、数据存储格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;主要特征&lt;ul&gt;
&lt;li&gt;更快的数据传输速度：protobuf传输将数据序列化为二进制数据，JSON文本传输格式 节省大量IO操作，提高数据传输速度&lt;/li&gt;
&lt;li&gt;跨平台多语言：protobuf编译工具protoc基于protobuf定义文件，编译出不同语言的客户端或者服务端&lt;/li&gt;
&lt;li&gt;良好的扩展性和兼容性:&lt;/li&gt;
&lt;li&gt;基于IDL文件定义服务，通过proto3工具生成指定语言的数据结构,服务端和客户端接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Protocol Buffer" scheme="http://chyidl.github.io/tags/Protocol-Buffer/"/>
    
  </entry>
  
  <entry>
    <title>API Design</title>
    <link href="http://chyidl.github.io/2021/09/07/RESTful-API-Design/"/>
    <id>http://chyidl.github.io/2021/09/07/RESTful-API-Design/</id>
    <published>2021-09-07T08:45:01.000Z</published>
    <updated>2021-09-07T08:45:01.000Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目前业界常用的API风格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;RESTful&lt;/li&gt;
&lt;li&gt;RPC&lt;/li&gt;
&lt;li&gt;GraphQL&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="API" scheme="http://chyidl.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>CS - Basic Introduction</title>
    <link href="http://chyidl.github.io/2021/09/06/CS-Time/"/>
    <id>http://chyidl.github.io/2021/09/06/CS-Time/</id>
    <published>2021-09-06T02:29:50.000Z</published>
    <updated>2021-09-06T02:29:50.000Z</updated>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;计算机通识介绍&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="计算机" scheme="http://chyidl.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Middleware Tips &amp; Tracks</title>
    <link href="http://chyidl.github.io/2021/09/06/Middleware-Tips-Tracks/"/>
    <id>http://chyidl.github.io/2021/09/06/Middleware-Tips-Tracks/</id>
    <published>2021-09-06T00:36:13.000Z</published>
    <updated>2021-09-06T00:36:13.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;技术选型&quot;&gt;&lt;a href=&quot;#技术选型&quot; class=&quot;headerlink&quot; title=&quot;技术选型&quot;&gt;&lt;/a&gt;技术选型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;面对技术选型时，就是一个关于如何取舍的问题，不要不经过思考就觉得那个方案好，那个方案不好。需要根据具体场景分析&lt;br&gt;技术选型不只是技术问题，还与团队、管理、组织结构有关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;业务功能角度&lt;/li&gt;
&lt;li&gt;技术资源角度&lt;blockquote&gt;
&lt;p&gt;所处的环境、技术资源能否匹配这些技术方案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="中间件" scheme="http://chyidl.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="Middleware" scheme="http://chyidl.github.io/tags/Middleware/"/>
    
  </entry>
  
  <entry>
    <title>Distribute Scraping for Gophers</title>
    <link href="http://chyidl.github.io/2021/09/03/Distribute-Scraping-for-Gophers/"/>
    <id>http://chyidl.github.io/2021/09/03/Distribute-Scraping-for-Gophers/</id>
    <published>2021-09-03T10:19:17.000Z</published>
    <updated>2021-09-03T10:19:17.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;分布式爬虫&quot;&gt;&lt;a href=&quot;#分布式爬虫&quot; class=&quot;headerlink&quot; title=&quot;分布式爬虫&quot;&gt;&lt;/a&gt;分布式爬虫&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;分布式爬虫是一套任务分发和执行系统，常见的任务分发，因为上下游存在速度不匹配问题，需要借助消息队列&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="分布式" scheme="http://chyidl.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="爬虫" scheme="http://chyidl.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
